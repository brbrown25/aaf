#! /bin/bash

###############################################################################
#
# The contents of this file are subject to the AAF SDK Public
# Source License Agreement (the "License"); You may not use this file
# except in compliance with the License.  The License is available in
# AAFSDKPSL.TXT, or you may obtain a copy of the License from the AAF
# Association or its successor.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code of this file is Copyright 1998-2003, Licensor of the
# AAF Association.
# 
# All rights reserved.
#
###############################################################################

short_usage()
{
    echo "Usage `basename $0` [-basedir] [-bump] [-update| [-nocvsco] [-nocvslog] [-nobuild] [-h|-help]"
}

usage()
{
    short_usage
    #    0         1         2         3         4         5         6         7
    #    01234567890123456789012345678901234567890123456789012345678901234567890123456789
    echo ""
    echo "-basedir directory"
    echo "	Set the directory where the cvs checkout command will write the\n"
    echo "	AAF directory, or where it already exists. The default value is the"
    echo "	current working directory."
    echo ""
    echo "-bump"
    echo "	Bump the build number (i.e. increment it). This is implemented using"
    echo "	the BuildNumber script."
    echo ""
    echo "-update"
    echo "	Update an existing cvs sandbox rather than performing a checkout."
    echo ""
    echo "-nocvsco"
    echo "	Don't run a cvs checkout (or update) command.  This assumes an AAF"
    echo "	source tree exists in the base directory."
    echo ""
    echo "-nocvslog"
    echo "	Skip the cvs log command required used to determine the age of the"
    echo "	most recent build tag.  If this option is specified, the result of"
    echo "	a previous cvs log command is used.  This is of very limited utility"
    echo "	under normal circumstances."
    echo ""
    echo "-nobuild"
    echo "	Do not build the source tree (i.e. execute make).  Subsequent make log"
    echo "	filtering is still performed, hence, a previous make log should exist."
    echo "	This is of limited utility under normal circumstances.  One use is as an"
    echo "	an means to experiment with the FilterLog_{i686Linux,*} scripts."
    echo ""

    echo "`basename $0` automates the following build processing operations:"
    echo ""
    echo "1. Checkout or update the AAF source tree using CVS."
    echo "2. Optionally bump the build number. (Edit AAFSDKBuild.h and tag the tree.)"
    echo "3. Determine and report the most recent build tag, the date the tag was"
    echo "   applied, and the current date."
    echo "4. Run \"make everything\" and log the results."
    echo "5. Filter the make log to identify unexpected build log messages"
    echo "   (i.e. errors)."
    echo "6. Generate a build report and copy this to aaf.sourceforge.net."
    echo ""
    echo "If CVSROOT is not set, then it is assigned the default value:"
    echo ""
    echo "      :pserver:anonymous@cvs.aaf.sourceforge.net:/cvsroot/aaf"
    echo

    exit 1;
}

CVS_RUN_CO_COMMAND=1
CVS_RUN_LOG_COMMAND=1
CVS_UPDATE_ONLY=0
BUILD_RUN_COMMAND=1
BUMP_BUILD_TAG=0
BASE_DIR=.

until [ $# == 0 ]
do

	case $1 in
		-basedir  ) BASE_DIR=$2 ; shift ;;
		-bump     ) BUMP_BUILD_TAG=1 ;;
		-update   ) CVS_UPDATE_ONLY=1 ;;
		-nocvsco  ) CVS_RUN_CO_COMMAND=0 ;;
		-nocvslog ) CVS_RUN_LOG_COMMAND=0 ;;
		-nobuild  ) BUILD_RUN_COMMAND=0 ;;
		-h        ) usage ;;
		-help     ) usage ;;
		*	  ) echo Unrecognized option $1 ; short_usage; exit 1 ;;
	esac

	shift
done

cd $BASE_DIR
if [ $? -ne 0 ]; then
    echo Failed to change to base directory: $BASE_DIR
    exit -1
fi

#
# Set default CVSROOT value.
# Assume that CVS_RSH is set correctly if CVSROOT is set.
#

CVSROOT=${CVSROOT:=:pserver:anonymous@cvs.aaf.sourceforge.net:/cvsroot/aaf}
export CVSROOT

# Fetch the source tree using cvs.  The default access method is
# pserver.  Use ssh if option specified Update only, if option
# specified.

CVS_CO_LOG_FILENAME=~/tmp/cvs.co.log
CVS_UPDATE_LOG_FILENAME=~/tmp/cvs.update.log

if [ $CVS_RUN_CO_COMMAND -eq 1 ]; then

	if [ $CVS_UPDATE_ONLY -eq 1 ]; then
		echo cvs update -d
		echo cvs log file is: $CVS_UPDATE_LOG_FILENAME
		cd AAF
		cvs update > $CVS_UPDATE_LOG_FILENAME 2>&1
		CVS_STATUS=$?
		cd ..
	else

		echo cvs -z3 co AAF
	        echo CVSROOT = $CVSROOT
		echo cvs log file is: $CVS_CO_LOG_FILENAME
		cvs -z3 co AAF > $CVS_CO_LOG_FILENAME 2>&1
		CVS_STATUS=$?

	fi

	if [ $CVS_STATUS -ne 0 ]; then
		echo cvs failed with exit status $CVS_STATUS
		exit $CVS_STATUS
	fi
fi

cd AAF
if [ $? -ne 0 ]; then
    echo Failed to change directory to AAF directory.
    exit -1
fi

#
# Optionally bump the build number.
#
if [ $BUMP_BUILD_TAG -eq 1 ]; then
    BuildNumber -basedir $BASE_DIR -bump
    if [ $? -ne 0 ] ; then
	echo Failed to bump the build number.
	exit 1
    fi
fi

#
# Fetch the current version info.  Determine when the build tag was
# applied, and the current day.
#

AAFSDKBUILD_H=ref-impl/include/AAFSDKBuild.h
AAF_BUILD_NUMBER=`grep "define AAF_BUILD_NUMBER" ${AAFSDKBUILD_H} | awk '{print $3}'`;
BUILD_TAG=`printf "Build-%04d" $AAF_BUILD_NUMBER`

CVS_LOG_OUTPUT_FILENAME=~/tmp/cvs.log.log

if [ $CVS_RUN_LOG_COMMAND -eq 1 ]; then

    echo cvs log -r${BUILD_TAG} ${AAFSDKBUILD_H}
    echo cvs log files are: ${CVS_LOG_OUTPUT_FILENAME} and ${CVS_LOG_OUTPUT_FILENAME}.error
    cvs log -r${BUILD_TAG} ${AAFSDKBUILD_H} > ${CVS_LOG_OUTPUT_FILENAME} 2>&1
    CVS_STATUS=$?
    if [ $CVS_STATUS -ne 0 ]; then
        mv ${CVS_LOG_OUTPUT_FILENAME} ${CVS_LOG_OUTPUT_FILENAME}.error
	echo cvs failed with exit status $CVS_STATUS
	exit -1
    fi

fi

if [ ! -f ${CVS_LOG_OUTPUT_FILENAME} ]; then
    echo ${CVS_LOG_OUTPUT_FILENAME} not found
    exit -1
fi

BUILD_TAG_DATE=`grep date: $CVS_LOG_OUTPUT_FILENAME | awk '{print $2, $3}' | sed s/\;//`
CURRENT_DATE=`date -u "+%Y/%m/%d %H:%M:%S %Z"`

#
# Make everything
#
if [ $BUILD_RUN_COMMAND -eq 1 ]; then

    MAKE_LOG_LINK=make.everything.log
    MAKE_LOG_FILENAME=make.everything.`echo $CURRENT_DATE | sed s/\ /_/g | sed sx/x-xg`.log

    MAKE_INFO_HEADER=~/tmp/make.header.log

    echo Building the entire source tree.
    echo Build log is: $MAKE_LOG_FILENAME

    cat /dev/null > $MAKE_LOG_FILENAME
    rm -f $MAKE_LOG_LINK
    rm -f $MAKE_LOG_LINK.filtered
    ln -s $MAKE_LOG_FILENAME $MAKE_LOG_LINK

    cat /dev/null > $MAKE_INFO_HEADER
    printf "Build tag:\t\t\t${BUILD_TAG}\n"                      >> $MAKE_INFO_HEADER
    printf "Date ${BUILD_TAG} was applied:\t${BUILD_TAG_DATE}\n" >> $MAKE_INFO_HEADER
    printf "Current date on host:\t\t${CURRENT_DATE}\n"                >> $MAKE_INFO_HEADER
    printf "\n "                                                 >> $MAKE_INFO_HEADER

    cat $MAKE_INFO_HEADER
    cat $MAKE_INFO_HEADER >> $MAKE_LOG_FILENAME

    printf "======================================================================\n\n" >> $MAKE_LOG_FILENAME

    (time make -k everything) >> $MAKE_LOG_FILENAME 2>&1

fi

#
# Filter log 
#

# Get the date stamped log file name from the link.  The link is used
# in case the build command was not executed (i.e. we don't have the
# date stamped file name).

FILTER_COMMAND=FilterLog_`sh build/aafplatform.sh`
MAKE_LOG_FILENAME=`ls -l $MAKE_LOG_LINK | awk '{print $11}'`
echo Filtering make log using: $FILTER_COMMAND
$FILTER_COMMAND  < $MAKE_LOG_FILENAME > ${MAKE_LOG_FILENAME}.filtered
rm -f $MAKE_LOG_LINK.filtered
ln -s $MAKE_LOG_FILENAME.filtered $MAKE_LOG_LINK.filtered
