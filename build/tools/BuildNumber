#! /bin/bash

###############################################################################
#
# $Id: BuildNumber,v 1.9 2004/02/27 14:26:16 stuart_hc Exp $ $Name:  $
#
# The contents of this file are subject to the AAF SDK Public
# Source License Agreement (the "License"); You may not use this file
# except in compliance with the License.  The License is available in
# AAFSDKPSL.TXT, or you may obtain a copy of the License from the AAF
# Association or its successor.
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
# the License for the specific language governing rights and limitations
# under the License.
#
# The Original Code of this file is Copyright 1998-2004, Licensor of the
# AAF Association.
#
###############################################################################

short_usage()
{
        echo "usage: `basename $0` [-basedir directory] [-bump] [-h|-help]"
}

usage()
{
        short_usage
	echo ""
	echo The \"-basedir\" option sets the directory where the
	echo \"AAF\" directory is found.  The default value is the
	echo present working directory.
	echo ""
	echo The \"-bump\" option will increment the build number, edit
        echo AAFSDKBuild.h, and tag the cvs source tree.
	echo
	echo The script will refuse to bump the build number if no changed
	echo files are detected.  The \"-force\" option overrides that behavior. 
	echo
	echo The script always checks the consistency of the build number found
 	echo in AAFSDKBuild.h and the latest build tag in the cvs header
 	echo of the same file.  The build number is consistent if the
 	echo tag and build number \(in AAFSDKBuild.h\) are equal.  If not
        echo consistent, the script will fail and the error must be resolved
        echo manually.
	echo ""
	echo CVSROOT is given the following default value:
	echo ""
        echo "    :pserver:anonymous@cvs.aaf.sourceforge.net:/cvsroot/aaf"
	echo ""
	echo This will not work with the \"-bump\" option because write access
 	echo to the server is required to commit AAFSDKBuild.h and tag the tree.
	echo Use ssh access to bump the build number \(configure CVSROOT
        echo appropriately\).
	echo ""
	echo The exit status is zero if successful, else the exit status is one.
	echo ""

	exit 0
}

CHECK_CONSISTENCY=1
BUMP_BUILD_NUMBER=0
CHECK_FOR_CHANGES=1
BASE_DIR=.

# For debug and development purposes the consistency check may
# be inhibited by enabling the "-nocheck" option

until [ $# == 0 ]
do
	case $1 in
		-basedir  ) BASE_DIR=$2 ; shift ;;
		-bump     ) BUMP_BUILD_NUMBER=1 ;;
#		-nocheck  ) CHECK_CONSISTENCY=0 ;;
		-force    ) CHECK_FOR_CHANGES=0 ;;
		-h        ) usage ;;
		-help     ) usage ;;
		*         ) echo Unrecognized option $1 ; short_usage ; exit 1 ;;
	esac

	shift
	
done

AAFSDKBUILD_H=ref-impl/include/AAFSDKBuild.h

cd $BASE_DIR
if [ $? -ne 0 ]; then
    echo Failed to change to base directory: $BASE_DIR
    exit 1
fi

cd AAF
if [ $? -ne 0 ]; then
    echo Failed to change directory to AAF directory.
    exit 1
fi

#
# Set default CVSROOT value.
# Assume that CVS_RSH is set correctly if CVSROOT is set.
#

CVSROOT=${CVSROOT:=:pserver:anonymous@cvs.aaf.sourceforge.net:/cvsroot/aaf}
export CVSROOT

#
# Fetch the build number and year from AAFSDKBuild.h
#

HEADER_CURRENT_YEAR=`grep "define AAF_CURRENT_YEAR" ${AAFSDKBUILD_H} | awk '{print $3}'| sed s/\"//g`;

HEADER_BUILD_NUMBER=`grep "define AAF_BUILD_NUMBER" ${AAFSDKBUILD_H} | awk '{print $3}'`;

HEADER_BUILD_TAG=`printf "Build-%04d" $HEADER_BUILD_NUMBER`

#
# Create the required ~/tmp directory.
#
mkdir -p ~/tmp

#
# Pluck out the most recent Build-#### tag from the log header.
# Note the tab character in the sed.  The regexp form used by sed does
# *not* recognized "\t" (AFAIK).
#

CVS_BUILD_TAG_HEADER_ONLY_FILE=~/tmp/cvs.header.log
HEADER_BUILD_TAG_LOG_FILE=~/tmp/cvs.headertag.log
CVS_BUILD_TAG_LOG_FILE=~/tmp/cvs.cvstag.log

echo Fetching the latest build tag.
echo CVSROOT = $CVSROOT

echo cvs log -t ${AAFSDKBUILD_H} logged to file ${CVS_BUILD_TAG_HEADER_ONLY_FILE}
cvs log -t ${AAFSDKBUILD_H} > ${CVS_BUILD_TAG_HEADER_ONLY_FILE}
CVSSTATUS=$?
if [ $CVSSTATUS -ne 0 ]; then 
    echo cvs command failed with status $CVSSTATUS
    exit 1
fi



echo cvs log -r${HEADER_BUILD_TAG} ${AAFSDKBUILD_H} logged to file $HEADER_BUILD_TAG_LOG_FILE
cvs log -r${HEADER_BUILD_TAG} ${AAFSDKBUILD_H} > $HEADER_BUILD_TAG_LOG_FILE 2>&1
CVSSTATUS=$?
if [ $CVSSTATUS -ne 0 ]; then 
    echo cvs command failed with status $CVSSTATUS
    exit 1
fi

# This will happen if AAFSDKBuild.h has a build number with no matching cvs tag.
# That would likely be the result of someone (or thing) erroneously editing the file.
grep "warning: no revision" $HEADER_BUILD_TAG_LOG_FILE > /dev/null
if [ $? -eq 0 ]; then
    echo ${HEADER_BUILD_TAG} tag not found.
    echo No tag was found in the cvs header that matched the build number in ${AAFSDKBUILD_H}.
    exit 1
fi




echo cvs log -r${CVS_BUILD_TAG} ${AAFSDKBUILD_H} logged to file $CVS_BUILD_TAG_LOG_FILE
cvs log -r${CVS_BUILD_TAG} ${AAFSDKBUILD_H} > $CVS_BUILD_TAG_LOG_FILE 2>&1
CVSSTATUS=$?
if [ $CVSSTATUS -ne 0 ]; then 
    echo cvs command failed with status $CVSSTATUS
    exit 1
fi

# This should never fail.  If it does, in means the Build-#### tag we
# pulled out of the cvs header wasn't found when we attempted to get a
# log for that revision.  If it happens, it is likely due to an error
# in this script.
grep "warning: no revision" $CVS_BUILD_TAG_LOG_FILE > /dev/null
if [ $? -eq 0 ]; then
    echo ${CVS_BUILD_TAG} tag not found.
    exit 1
fi


# Get the latest build tag.
CVS_BUILD_TAG=`grep "Build-" ${CVS_BUILD_TAG_HEADER_ONLY_FILE} | grep ": " | cut -d: -f1 | sort | tail -1 | sed "s/^	//g"`

# Determine the date and revision of the build tag in AAFSDKBuild.h
HEADER_BUILD_TAG_DATE=`grep date: $HEADER_BUILD_TAG_LOG_FILE | awk '{print $2, $3}' | sed s/\;//`
HEADER_BUILD_TAG_REV=`grep revision $HEADER_BUILD_TAG_LOG_FILE | grep -v revisions | awk '{print $2}' | sed s/\;//`

# Determine the date and revision of the latest build tag found in the cvs log header.
CVS_BUILD_TAG_DATE=`grep date:  $CVS_BUILD_TAG_LOG_FILE | awk '{print $2, $3}' | sed s/\;//`
CVS_BUILD_TAG_REV=`grep revision $CVS_BUILD_TAG_LOG_FILE | grep -v revisions | awk '{print $2}' | sed s/\;//`

echo " "
echo Build number found in $AAFSDKBUILD_H: $HEADER_BUILD_NUMBER
echo $HEADER_BUILD_TAG tag applied to revision $HEADER_BUILD_TAG_REV dated $HEADER_BUILD_TAG_DATE

echo " "
echo Latest built tag found in cvs log for $AAFSDKBUILD_H: $CVS_BUILD_TAG
echo $CVS_BUILD_TAG tag applied to revision $CVS_BUILD_TAG_REV dated $CVS_BUILD_TAG_DATE
echo " "

if [ $CHECK_CONSISTENCY -eq 1 ]; then

    # The tags must be identical.
    if [ $HEADER_BUILD_TAG != $CVS_BUILD_TAG ]; then

	# If the tags differ, so must the revision.
	if [ $HEADER_BUILD_TAG_REV == $CVS_BUILD_TAG_REV ]; then
	    echo Error: revision levels match, but tags differ.
	else
	    echo Error: revision levels don\'t match, and tags don\'t match.
	fi

	exit 1

    else
    
	# Sanity check - the tags match, hence, the revisions should
	# also match.  If the revisions do not match, it likely
	# indicates an error in this script.

	if [ $HEADER_BUILD_TAG_REV != $CVS_BUILD_TAG_REV ]; then
	    echo Error: tags match, but revision levels do not.
	    exit 1
	fi

	echo $AAFSDKBUILD_H build number and the latest cvs build tag match.

    fi
fi

if [ $CHECK_FOR_CHANGES -eq 1 ]; then
    # Determine if any files have changed on the repository since tag
    # was applied.  If not, then do not change the build number (i.e.
    # exit the script).

    echo CVS_BUILD_TAG=$CVS_BUILD_TAG
    echo cvs -nq update -r${CVS_BUILD_TAG} logged to ~/tmp/buildnumber.cvs.update.log
    cvs -nq update -r${CVS_BUILD_TAG} > ~/tmp/buildnumber.cvs.update.log
    DIFF_COUNT=`grep -v ^\? ~/tmp/buildnumber.cvs.update.log | wc -l`
    echo $DIFF_COUNT files have changed since ${CVS_BUILD_TAG}:

    grep -v ^\? ~/tmp/buildnumber.cvs.update.log

    if [ $DIFF_COUNT -eq 0 ]; then
	echo No files have changed since ${CVS_BUILD_TAG}.

	if [ $BUMP_BUILD_NUMBER -eq 1 ]; then
	    echo -bump option ignored
	fi

	exit 0
    fi
fi

if [ $BUMP_BUILD_NUMBER -eq 1 ]; then


    # Increment the build number, and determine build year.
    let NEXT_HEADER_BUILD_NUMBER=HEADER_BUILD_NUMBER+1
    NEW_CURRENT_YEAR=`date -u +%Y`

    echo " "
    echo Bumping the build number from $HEADER_BUILD_NUMBER to $NEXT_HEADER_BUILD_NUMBER.
    echo " "

    # Edit AAFSDKBuild.h
    cp $AAFSDKBUILD_H ~/tmp/AAFSDKBuild.h.sav
    CPSTATUS=$?
    if [ $CPSTATUS -ne 0 ]; then
      echo cp failed with status $CPSTATUS
      exit 1
    fi

    sed s/define\ AAF_BUILD_NUMBER\ $HEADER_BUILD_NUMBER/define\ AAF_BUILD_NUMBER\ $NEXT_HEADER_BUILD_NUMBER/ \
	< $AAFSDKBUILD_H > ~/tmp/AAFSDKBuid.h.tmp
    SEDSTATUS=$?
    if [ $SEDSTATUS -ne 0 ]; then
      echo first sed failed with status $SEDSTATUS
      exit 1
    fi

    sed s/define\ AAF_CURRENT_YEAR\ \"$HEADER_CURRENT_YEAR\"/define\ AAF_CURRENT_YEAR\ \"$NEW_CURRENT_YEAR\"/ \
	< ~/tmp/AAFSDKBuid.h.tmp > ~/tmp/AAFSDKBuild.h
    SEDSTATUS=$?
    if [ $SEDSTATUS -ne 0 ]; then
      echo second sed failed with status $SEDSTATUS
      exit 1
    fi

    mv ~/tmp/AAFSDKBuild.h $AAFSDKBUILD_H
    MVSTATUS=$?
    if [ $MVSTATUS -ne 0 ]; then
      echo mv failed with status $MVSTATUS
      exit 1
    fi

    # Commit the modified file, and tag the tree.
    # The file may have been checkout with a tag (e.g. HEAD) so
    # first, clear that tag.
    echo cvs update -A $AAFSDKBUILD_H
    cvs update -A $AAFSDKBUILD_H
    CVSSTATUS=$?
    if [ $CVSSTATUS -ne 0 ]; then
      # Restore the original file.
      cp ~/tmp/AAFSDKBuild.h.sav $AAFSDKBUILD_H 
      echo cvs failed with status $CVSSTATUS
      exit 1
    fi

    echo cvs commit -m \
     \"`basename $0` script automated edit. Changed build number from ${HEADER_BUILD_NUMBER} to ${NEXT_HEADER_BUILD_NUMBER}.\" \
     $AAFSDKBUILD_H

    cvs commit -m \
     "`basename $0` script automated edit. Changed build number from ${HEADER_BUILD_NUMBER} to ${NEXT_HEADER_BUILD_NUMBER}." \
     $AAFSDKBUILD_H

    CVSSTATUS=$?
    if [ $CVSSTATUS -ne 0 ]; then
      # Restore the original file.
      cp ~/tmp/AAFSDKBuild.h.sav $AAFSDKBUILD_H 
      echo cvs failed with status $CVSSTATUS
      exit 1
    fi

    NEXT_HEADER_BUILD_TAG=`printf "Build-%04d" $NEXT_HEADER_BUILD_NUMBER`
    echo cvs tag $NEXT_HEADER_BUILD_TAG
    cvs tag $NEXT_HEADER_BUILD_TAG
    CVSSTATUS=$?
    if [ $CVSSTATUS -ne 0 ]; then
      echo cvs failed with status $CVSSTATUS
      echo Warning: The build tag is out of sync with $AAFSDKBUILD_H.
      exit 1
    fi

fi

exit 0
