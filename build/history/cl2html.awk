#
# Generate an html table from a change log (output of cvs2cl.pl)
#
# $ cvs2cl.pl --stdout -rx:y > Changes-x-y.log
#
# $ cat Changes-x-y.log | awk -f cl2html.awk colormap > Changes-x-y.html
#
#
# Author : Tim Bingham - Tim_Bingham@avid.com
#
BEGIN {
  if (ARGC != 2) {
    printf("Error : Usage : %s <colormap>\n", ARGV[0]) | "cat 1>&2";
    exit 1;
  }
  
  entrytext = "";
  createColorMap(ARGV[1]);
  delete ARGV[1]; # Otherwise this would be the next input file
  printHeader();
}

/^[0-9]+-[0-9]+-[0-9]+/ {
  if (entrytext != "") {
    entry(entrytext);
  }
  /* Build new table row */
  date = $1;
  gsub("-", "/", date);
  name = $3;
  entrytext = "";
  files = "";
  comments = "";
}

/^\t/ {
  /* Accumulate the text of this entry */
  entrytext = entrytext $0;
}

END {
  if (entrytext) {
    entry(entrytext);
  }
  printTrailer();
}

function printKey() {
  printf("<TABLE>\n");
  printf("<TR><TH>Color</TH><TH>Component</TH></TR>\n");
  for (i in names) {
    printf("<TR>\n");
    printf("<TD bgcolor=\"%s\">%s</TD>\n", colors[names[i]], names[i]);
    printf("<TD>%s</TD>\n", i);
    printf("</TR>\n");
  }
  printf("</TABLE>\n");
}

function printHeader() {
  printf("\
<!-- This file was generated by cl2html.awk -->\n\
<!-- If you edit this file your changes may be lost. -->\n\
<!-- -->\n");
  printf("<title>cvs change log</title>\n");
  printKey();
  printf("\
<TABLE>\n\
<TR>\n\
  <TH>Date</TH>\n\
  <TH>Developer</TH>\n\
  <TH>Files</TH>\n\
  <TH>Checkin comment</TH>\n\
</TR>\n");
}

function printRow(date, name, files, comments, color) {
  printf("\
<TR>\n\
  <TD>%s</TD>\n\
  <TD bgcolor=\"%s\">%s</TD>\n\
  <TD bgcolor=\"%s\">%s</TD>\n\
  <TD bgcolor=\"%s\">%s</TD>\n\
</TR>\n",
    date, color, name, color, files, color, comments);
}

function printTrailer() {
  printf("</TABLE>\n");
}

# Remove first n characters of s
function trim(s, n) {
  return substr(s, n + 1, length(s) - n);
}

function createColorMap(file) {
  component = 0;
  line = 0;
  while (getline < file > 0) {
    line = line + 1;
    if ($1 != "#") {
      if (NF != 0) {
        if ($1 == "color") {
          if ($2 in colors) {
            printf("Error : \"%s\", line %s - duplicate color \"%s\".\n",
                   file, line, $2) | "cat 1>&2";
            exit 1;
          } else {
            colors[$2] = "#" $3
          }
        } else if ($1 == "component") {
          if (component == 0) {
            if ($2 in names) {
              printf("Error : \"%s\", line %s - duplicate name \"%s\".\n",
                     file, line, $2) | "cat 1>&2";
              exit 1;
            } else {
              name = $2;
            }
            if ($3 in colors) {
              color = colors[$3];
              names[name] = $3;
            } else {
              printf("Error : \"%s\", line %s - unknown color \"%s\".\n",
                     file, line, $3) | "cat 1>&2";
              exit 1;
            }
            component = 1;
          } else {
            printf("Error : \"%s\", line %s - unmatched component.\n",
                   file, line) | "cat 1>&2";
            exit 1;
          }
        } else if ($1 == "end") {
          if (component == 1) {
            component = 0;
          } else {
            printf("Error : \"%s\", line %s - unmatched end.\n",
                   file, line) | "cat 1>&2";
            exit 1;
          }
        } else if ($1 == "#") {
          # ignore comment
        } else {
          if (component == 1) {
            map[$1] = color;
          } else {
            printf("Error : \"%s\", line %s - unknown item \"%s\".\n",
                   file, line, $1) | "cat 1>&2";
            exit 1;
          }
        }
      } # else ignore empty line
    } # else ignore comment
  }
#  for (i in colors) {
#    printf("%s %s\n", i, colors[i]);
#  }
#  for (i in map) {
#    printf("%s %s\n", i, map[i]);
#  }
#  for (i in names) {
#    printf("%s %s\n", i, names[i]);
#  }
}

function rowcolor(files) {
  result = "#CCCCFF"; /* Blue */
  /* Get first file */
  split(files, fns, ",");
  ff = fns[1];
#  printf("<!--[%s]-->\n", ff);
  /* Match directory of file to a color */
  len = 0;
  for (x in map) { /* Arbitrary order */
    if (match(ff, "^" x)) {
      if (RLENGTH > len) {
        /* Take longest match */
        len = RLENGTH;
        result = map[x];
      }
    }
  }
  return result;
}

function entry(entrytext) {
#  printf("<!--[%s]-->\n", entrytext);
  gsub("\t", " ", entrytext);
  entrytext = trim(entrytext, 3);
  f = split(entrytext, fields, ":");
#  printf("<!--[%d]-->\n", f);
#  for (i = 1; i <= f; i++) {
#    printf("<!--[%d : \"%s\"]-->\n", i, fields[i]);
#  }
  /* We should have at least a file name and a comment */
  if (f < 2) {
    printf("cl2html : Error near \"%s\"\n", entrytext) | "cat 1>&2";
    exit(1);
  }
  if (match(fields[1], "/$")) {
    /* The first field is a directory */
    dir = fields[1];
    files = trim(fields[2], 1);
    gsub(" ", "", files);
    n = split(files, names, ",");
#    printf("<!--[%d]-->\n", n);
#    for (i = 1; i <= n; i++) {
#      printf("<!--[%d : \"%s\"]-->\n", i, names[i]);
#    }
    /* Insert directory names */
    files = dir names[1];
    for (i = 2; i <= n; i++) {
      files = files ", " dir names[i];
    }
    cs = 3; /* Start of comment */
  } else {
    /* The first field is not a directory */
    dir = "";
    files = fields[1];
    cs = 2; /* Start of comment */
  }
  /* Put comment back together - undo split on ":" */
  comments = trim(fields[cs], 1);
  for (i = cs + 1; i <= f; i++) {
    comments = comments ":" fields[i]
  }

  color = rowcolor(files);

#  printf("<!--[dir      = \"%s\"]-->\n", dir);
#  printf("<!--[files    = \"%s\"]-->\n", files);
#  printf("<!--[comments = \"%s\"]-->\n", comments);
  /* Print previous table row */
  printRow(date, name, files, comments, color);
}
