AAF SDK v1.1.1
==============

2005-12-20

This SDK is the reference implementation of the Advanced Authoring
Format (AAF) version 1.1. See doc/aafeditprotocol.pdf,
doc/aafobjectspec-v1.1.pdf, doc/aafstoredformatspec-v1.0.1.pdf and
doc/aafcontainerspec-v1.0.1.pdf for the AAF specification documents.


Supported platforms
-------------------

This release has been tested on the following platforms:

  Windows XP SP2 (Microsoft Visual C++ 7.1)
  Solaris 9 (gcc 3.4.2)
  x86-Linux (gcc 3.2.3, 3.3.5, 4.0.1   Note: 4.0.2 is known to fail*)
  x86_64-Linux (gcc 3.3.4)
  MacOS 10.3 (gcc 3.3)

The v1.1.0 major release was also tested on the following platforms. While
these platforms have not been tested with this v1.1.1 maintenance release,
the developers do not anticipate any new issues on these platforms:

  Windows 2000 SP4 (Microsoft Visual C++ 7.1)
  Windows XP SP1 (Microsoft Visual C++ 7.1)
  Irix 6.5.23 (MIPSPro 7.3.1*, gcc 3.4.3 using libgsf)
  i386-FreeBSD 5.3 (libgsf structured storage only)
  i386-OpenBSD 3.6 (libgsf structured storage only)

* = see Known Issues below


Licensing
---------

The source code of this SDK is licensed using the AAF Public Source
License (see LEGAL/AAFSDKPSL.TXT).

WARNING:  ALTHOUGH NO ADDITIONAL LICENSE IS REQUIRED FROM THE CONTRIBUTORS
TO USE THE SOURCE CODE IN THIS AAF SDK TO WHICH THE AAF PSL APPLIES,
THE AAF PSL DOES NOT PROVIDE ALL LICENSES, UNDER INTELLECTUAL
PROPERTY RIGHTS COVERING THE AAF STANDARD, THAT MAY BE NECESSARY TO
CREATE AND DISTRIBUTE AAF COMPLIANT PRODUCTS.  PLEASE CONTACT THE AAF
ASSOCIATION, INC. FOR MORE INFORMATION ABOUT ANY ADDITIONAL LICENSES
THAT MAY BE REQUIRED TO CREATE AND DISTRIBUTE AAF COMPLIANT PRODUCTS
(HTTP://WWW.AAFASSOCIATION.ORG/POLICIES).


Major Changes from V1.1.0 to V1.1.1
-----------------------------------

This is a bug-fix release.  The following problems in V1.1.0 are fixed with
this release:

- Writing a file containing a Set or Array of Records using V1.1.0 might
  result in a file that is unreadable.  Attempting to open such a file with a
  debug version of the SDK library will result in an assertion failure.
  Attempting to open such a file with a release version of the SDK library
  has the potential to cause a heap corruption.


- SourceForge Bug ID #1188299:
  ImplAAFSourceReference::SetChannelIDs() does not work 
  ImplAAFSourceReference::SetChannelIDs() passes its numberElements parameter
  directly to _channelIDs.copyToBuffer(), which is expecting a byte count not
  a number of elements. As a result, nothing is set if you call
  IAAFSourceReference2::SetChannelIDs() with less than 4 channel IDs, etc.

  The fix appears to be to pass (numberElements * sizeof(aafUInt32)) 
  instead of numberElements

  This also applied to IAAFSourceReference2.


- SourceForge Bug ID #1188301:
  ImplAAFSourceReference::GetChannelIDs() does not work 
  As with ImplAAFSourceReference::SetChannelIDs(),
  ImplAAFSourceReference::GetChannelIDs() passes the number of elements when
  it should be passing a byte count. Specifically, it passes numberElements to
  _channelIDs.copyToBuffer() instead of (numberElements *sizeof(aafUInt32)). 

  This also applied to IAAFSourceReference2.


- The 6 new IAAFSourceReference2 APIs were tested.


- SourceForge Bug ID #1191791:
  LastModified property of Header not set on AAFFile->Save() 
  When Save() is called on an IAAFFile object, the LastModified property on
  the Header is not updated and is written as 0000-00-00-00-00-00
  (aafTimeStamp_t).
  This occurred in version 1.1.0 and 1.0.2 of the AAF SDK. 


- Add support for powerpc64-linux platform (Apple G5, IBM Power64, etc).
  Tested using Gentoo Linux 2005.0 on Apple G5.


- Added tests for: IAAFHeader, IAAFAuxiliaryDescriptor, IAAFComponent and
  IAAFDictionary


- doxygen formatting fixes for dodo files




Major Changes From V1.0.2 to V1.1.0
-----------------------------------

Extended APIs:
  IAAFMob2, IAAFCDCIDescriptor2, IAAFComponent2, AAFCompositionMob2,
  IAAFDictionary2, IAAFDigitalImageDescriptor2, IAAFHeader2, IAAFMasterMob2,
  IAAFRGBADescriptor2, IAAFSourceReference2, IAAFTimelineMobSlot2
  IAAFEssenceCodec2

  see http://aaf.sourceforge.net/docs/aafapiman/
      http://aaf.sourceforge.net/docs/pluginapiman/index.html

New APIs:
  IAAFPCMDescriptor, IAAFImportDescriptor, IAAFPhysicalDescriptor,
  IAAFRecordingDescriptor, IAAFSoundDescriptor, IAAFAuxiliaryDescriptor,
  IAAFDescriptiveFramework, IAAFDescriptiveMarker, IAAFKLVDataDefinition,
  IAAFTaggedValueDefinition, IEnumAAFKLVDataDefs, IEnumAAFTaggedValueDefs
  AAFGetLibraryVersion, AAFGetLibraryPathNameBufLen, AAFGetLibraryPathName

  see http://aaf.sourceforge.net/docs/aafapiman/

APIs with modified behaviour:
  IAAFMob::Copy() and IAAFMob::CloneExternal() now work
  IAAFFile::SaveCopyAs() now works
  IAAFFile::GetRevision() returns file version instead of a hard-coded value
  IAAFDataDef interfaces revised to support data definitions that are
    deemed to be equivalent:
      IsPictureKind(), IsSoundKind(), IsTimecodeKind(),
      DoesDataDefConvertTo(), DoesDataDefConvertFrom()
  AAFFileOpenExistingRead(), AAFFileOpenExistingModify() now merge file model
    with SDK builtin model
  AAFLoadLibrary() plugin search now looks under "aafext/" on all platforms

New header files:
  AAFCompressionDefs.h - UIDs for known compressed essence formats
  CAAFBuiltinDefs.h    - convenience classes

Plugin Codec changes:
  Added DV functionality to CDCI plugin codec
  Added PCM audio plugin codec (supporting BWF and SMPTE 382M audio essence)
  AIFC codec incorrect bytesPerFrame bug fixed
  Removed 2GB filesize limit in CDCI codec

New Examples:
  ExportDV, ImportDV
  ExportPCM, ImportPCM

New Utilities:
  aafextract - extract all essence streams from an AAF file as separate files
  aaf2xtl - AAF to Microsoft XTL utility
            see Utilities/aaf2xtl/doc/Aaf2XtlSoftwareDescription.pdf
  aafdump - structured storage dumper using choice of libgsf/ole32 API

Portability:
  - Linux x86-64 platform supported
  - Added UTF-8 filename support
  - added support for libgsf structured storage in addition to SchemaSoft
  - Win32/i686Linux/PPCDarwin SchemaSoft libraries can now write >2GB files

Removed features:
  - OMF libraries are no longer part of the AAF SDK project.  The libraries
    can be downloaded from http://www.aafassociation.org/download/
  - Support for Mac OS 9 has been removed


Compatibility with earlier releases
-----------------------------------

- Files generated by the AAF v1.1.x SDK cannot be read by earlier AAF SDKs,
  due to a limitation in the metadictionary processing code of SDKs prior
  to AAF v1.1.


Notes
-----

- To create 4kB sector AAF files use any of the following interfaces.
  When embedding large amounts of essence in an AAF file (e.g. 10 minutes of
  DV material) 4kB sectors are necessary to overcome the 2GB filesize limit.
    AAFFileOpenNewModify( filename, AAF_FILE_MODE_USE_LARGE_SS_SECTORS, ...)
    AAFFileOpenNewModifyEx( filename, kAAFFileKind_Aaf4KBinary, ...)
    AAFCreateRawStorageDisk(...) followed by
      AAFCreateAAFFileOnRawStorage(..., kAAFFileKind_Aaf4KBinary, ...)


Structured Storage implementation (where applicable)
----------------------------------------------------

The AAF SDK requires an implementation of Structured Storage to be
provided on the platform. This may be provided as part of the operating
system, as part of an another application, as a proprietary library or
as an open source library.

The AAF Association is starting work on its own open source implementation
of Structured Storage to maximise the range of platforms on which AAF can be
used.

In the meantime, for the cases where such a library is not already
available, a pre-compiled Structured Storage library is provided
(libSSRW2C.a and ssrw_c.lib) for use on the supported platforms. The
pre-compiled Structured Storage library is licensed under an agreement
between the AAF Association and a proprietary Structured Storage library
vendor:
  http://www.aafassociation.org/html/licenses/SchemaSoftTerms.pdf
  (reproduced in text form at the end of this document)

This proprietary library may be redistributed as part of the AAF SDK under
the conditions of that agreement. If you need to port this proprietary
Stuctured Storage library to another platform, please get in touch with the
AAF Association (info@aafassociation.org).  Below is the list of all
pre-compiled Structured Storage proprietary libraries in the AAF SDK.
    AAFWinSDK/sss-impl/ssrw_c.lib
    AAFi686LinuxSDK/g++/sss-impl/libSSRW2C.a
    AAFSparcSolarisSDK/g++/sss-impl/libSSRW2C.a
    AAFPPCDarwinSDK/g++/sss-impl/libSSRW2C.a
    AAFPPCDarwinSDK/g++/sss-impl/libSSRW2C.dylib
    AAFMipsIrixSDK/MIPSpro/sss-impl/libSSRW2C.a
    AAFx86_64LinuxSDK/g++/sss-impl/libSSRW2C.a

As an alternative, the open source libgsf library is also
supported with some limitations - see Known Issues below for details.


Known Issues
------------
- The pre-compiled Structured Storage implementation provided for Irix and
  the MIPSPro 7.3.1 compiler has the following limitations:
    ScaleTest failure for embedded essence streams >2GB in Structured Storage
	files with 4096 byte sectors
  UTF8FileNameTest failure for opening filenames containing international
  characters

- The SDK will fail at runtime when compiled using the MIPSpro 7.4.1
  C++ compiler.  For example, InfoDumper and ComModAAF will abort with:
  Assertion failed:
    _elementType && TypeDefinition::null() != _elementType,
    file AAFObjectModel.cpp, line 2826

- The SDK will not compile using gcc 4.0.2 on Linux (and possibly other
  platforms).  This is believed to be caused by a bug in this particular 
  version of gcc.  gcc 4.0.1 is known to work correctly.

- The Microsoft Structured Storage implementation (ole32.dll) (part of the
  MS Windows platform) can fail when reading or writing 512-byte Structured
  Storage AAF files containing a large number of objects. This does not
  occur with the pre-compiled Structured Storage implementation provided
  with the AAF SDK or the libgsf implementation. The performance and
  scalability of the AAF SDK and a Structured Storage library can be
  evaluated using the ScaleTest scripts.

- The libgsf Structured Storage implementation has the following limitations
  in conjuction with the AAF SDK:
  - No edit-in-place functionality.  This will cause a run-time failure in
    the AAFFileOpenExistingModify() interface call.
  - No RawStorage functionality causing the following interfaces to fail
    - AAFFileOpenNewModifyEx()
    - AAFCreateRawStorageDisk()
    - AAFCreateRawStorageCachedDisk()
    - AAFCreateAAFFileOnRawStorage()
      
  In practice these limitations restrict a client application's use of the SDK
  to only "Import AAF" and "Export AAF" operations using the following APIs:
    - AAFFileOpenExistingRead() (importing from an existing AAF file)
    - AAFFileOpenNewModify() (exporting to a new AAF file)

  To select the libgsf implementation and assuming you have libgsf installed
  under /usr/local, run make as follows
    make LIBGSF_PATH=/usr/local

- The AxLib library (examples2/axLib) does not compile using gcc-4.0.0

- The IAAFTypeDefRecord interface implementation does not result in 
  correct property values when calls to SetValue() or
  CreateValueFromValues() are mixed with calls to RegisterMembers().
  This can happen regardless of the order of these calls.  
  In addition, the GetValue() method should not be used following a call
  to RegisterMembers() as it will result in incorrect results.
  If you use RegisterMembers(), confine Record property creation to the use of
  SetStruct() and CreateValueFromStruct() and Record property reading to the
  use of GetStruct().


SchemaSoft license agreement
============================

Please be advised that the terms of the agreement between the AAF
Association and SchemaSoft Corporation allows us (the AAF Association) to
make available the Object Code contained in ssrw_c.lib and/or libSSRWC.a
under the following terms:

Use of Object Code
------------------
SchemaSoft grants a non-exclusive license in and to the Software in Object
Code form:

(a) to use and execute the Software for purposes of serving the Licensee's
    internal needs;
(b) to make, use, reproduce, have reproduced, display, incorporate, bundle,
    import, offer for sale, sell, sublicense and/or otherwise distribute by
    any means now known or hereafter developed (including without limitation
    electronic software downloads), directly or indirectly through multiple
    tiers or channels on a worldwide basis the Object Code and Derivative
    Works thereof authorized to be made hereunder, in whole or in part, only
    as part of a Licensee Product, statically or dynamically linked thereto;
    and
(c) to make, use, reproduce and distribute the Object Code or Derivative
    Works thereof for purposes of maintaining and supporting any Licensee
    Product,

provided always that any use, reproduction or distribution of the Object
Code will only be in conjunction with and as a part, statically or
dynamically linked, to the Licensee Product.
