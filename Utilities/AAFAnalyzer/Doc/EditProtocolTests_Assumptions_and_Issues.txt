 1. The Edit Protocol does not specify what type of references a file source is
    allowed to reference.  REQ_EP_063 states that "if a file source has any of
    the following sources, then those source mobs should be referenced and
    included by the file source."  This is an application requirement that and
    is a "should" not a "shall."  Until a more appropriate requirement is
    available, REQ_EP_063 is being used to specify an invalid reference from
    a file source.
 
 2. REQ_EP_063 only deals with references to import, tape and film sources, not
    file sources.  This was discussed in the conference call on September 26
    and it was concluded that this was probably an omission.  With (1),
    REQ_EP_063 is being used to specify that a reference from a file source to
    another file source is valid.
    
 3. REQ_EP_064 states "if a file source does not have one of the above sources,
    then it shall reference and include a recording source."  This is currently
    being interpreted to mean that a file source must reference another source
    (it can not be the end of the derivation chain).  The requirement is not
    being interpreted as an if and only if, therefore, a file source may have
    a(n) file/import/tape/file source as well as a recording source.
    
 4. The Edit Protocol does not specify what types of references an import
    source is allowed to reference.  REQ_EP_076 states that "if an import
    source has any of the following sources, then those source mobs should be
    included and referenced by the import source."  This is an application
    requirement and is a "should" not a "shall."  Until a more appropriate
    requirement is available, REQ_EP_076 is being used to specify an invalid
    reference from an import source.
    
 5. The Edit Protocol does not specify what type of references a tape source is
    allowed to reference.  REQ_EP_083 states that "if a tape source has a film
    source, then it should be included and referenced by the tape source.  This
    is an application requirement and is a "should" not a "shall."  Until a
    more appropriate requirement is available, REQ_EP_083 is being used to
    specify an invalid reference from a tape source.
    
 6. The Edit Protocol does not specify what type of references a film source is
    allowed to reference.  Currently, a test will fail, although all
    requirements will appear to have passed if a film source is not the end of
    the derivation chain.
    
 7. Currently a test will fail if a CompositionMob does not have a UsageCode
    property.  However, there is no requirement in the Edit Protocol that
    specifies that every CompositionMob must have a UsageCode property.
    Currently, the test will fail and all requirements will appear to pass,
    A possible solution is to fail the requirement that specifies acceptable
    references out of the "current node."
    
 8. Currently a test will fail if a CompositionMob or a MasterMob has an
    unknown UsageCode property.  However, there is no requirement in the Edit
    Protocol that specifies a UsageCode property must be one that currently
    exists.  Currently, the test will fail and all requirements will appear to
    pass.  A possible solution is to fail the requirement that specifies
    acceptable references out of the "current node."
    
 9. Currently a test will fail if a SourceMob has no descriptor.  However, the
    Edit Protocol does not specify that a SourceMob must have a descriptor.
    Currently, the test will fail and all requirements will appear to pass.  A
    possible solution is to fail the requirement that specifies acceptable
    references out of the "current node."
    
10. Currently a test will fail if a SourceMob has an "invalid" descriptor (ie.
    Auxiliary).  However, the Edit Protocol does not specify that a SourceMob
    cannot have an "invalid" descriptor.  Currently, the test will fail and all
    requirements will appear to pass.  A possible solution is to fail the
    requirement that specifies acceptable references out of the "current node."
    
11. Currently a test will fail if a SourceClip does not have a SourceReference
    property.  However, the Edit Protocol does not specify that a SourceClip
    must have a SourceReference property.  Currently, the test will fail and
    all requirements will appear to pass.  A possible solution is to fail the
    requirement that specifies acceptable references out of the "current node."
    
12. Tests will currently fail if the first "node" in the derivation chain is
    anything other than a top-level composition.  REQ_EP_030 states that "a
    lower-level composition shall be referenced by a top-level or lower-level
    in the AAF file," but there are no similar requirements that specify other
    types of "nodes" cannot be the initial "node" (the exception is REQ_EP_025
    which specifies top-level composition shall not be referenced).  Also, due
    to the way the CompMobDependency is implemented, only CompositionMobs
    will be considered as the first "node" in a derivation chain.  Unreferenced
    SourceMobs, MasterMobs and SourceClips will never be tested.
    
13. REQ_EP_026, REQ_EP_031, REQ_EP_036 and REQ_EP_045 state that top-level,
    lower-level, sub-clip and adjusted-clip compositions respectively "shall
    only reference the following kinds of material."  When the derivation chain
    ends no material is referenced, therefore these requirements do not prevent
    these compositions from being the end of the chain.  Currently, if one of
    these compositions is the end of a chain, the test will fail, however, all
    requirements will appear to pass.
    
14. As was discussed in the conference call on September 26, 2005, REQ_EP_031
    does not specify a lower-level composition can reference another
    lower-level composition although REQ_EP_030 implies that this is a valid
    reference.  As was decided during the call, this was probably an omission
    therefore, REQ_EP_031 is used to specify a valid reference from one
    lower-level composition to another.
    
15. As was discussed during the conference call on September 26, 2005, the
    figure in Section 6.1 makes it appear that a Clip may be the end of the
    derivation chain.  Until further information is avaliable, the test will
    assume that it is valid for a clip to be the end of the derivation chain.
    
16. Requirements REQ_EP_025, REQ_EP_030, REQ_EP_034, REQ_EP_043, REQ_EP_049,
    REQ_EP_054, REQ_EP_058, REQ_EP_071, REQ_EP_074, REQ_EP_080, REQ_EP_085 and
    REQ_EP_096 define terms used in the Edit Protocol.  Some of these
    requirements are used to find particular data, however, they can not
    generate a warning or a failure.  These should not be requirements, they
    should be definitions (ie. Instead of using shall, REQ_EP_043 should be
    rewritten as "Let an adjusted-clip composistion be defined as a
    CompositionMob with Mob::UsageCode property equal to Usage_AdjustedClip"
	
17. REQ_EP_013, REQ_EP_014 and REQ_EP_039 are all classified as file
    requirements but they seem dependant on an importing or exporting
    application.
	
18. REQ_EP_023 and REQ_EP_097 are optional ("MAY") requirements.  There is no
    way they can present a warning or a failure - they are not currently being
    tested.
	
19. REQ_EP_028 does not specify if physical track numbers may be repeated. 
    Until further information is avaliable, it is assumed that they can not be
    repeated.
	
20. REQ_EP_028 does not specify if reserved physical track numbers are legal
    values.  Until further information is avaliable, it is assumed that they are
    illegal.
	
21. REQ_EP_028 does not specify if physical track numbers outside the range 1-6
    are legal.  Until further information is avaliable, it is assumed that they
    are illegal.
	
22. REQ_EP_082 does not specify if physical track numbers may be repeated. 
    Until further information is avaliable, it is assumed that they can not be
    repeated.
	
23. REQ_EP_082 does not specify if reserved physical track numbers are legal
    values.  Until further information is avaliable, it is assumed that they are
    illegal.
	
24. REQ_EP_082 does not specify if physical track numbers outside the range 1-12
    are legal.  Until further information is avaliable, it is assumed that they
    are illegal.
	
25. REQ_EP_087 does not specify if physical track numbers may be repeated. 
    Until further information is avaliable, it is assumed that they can not be
    repeated.
	
26. REQ_EP_087 does not specify if physical track numbers outside the range 1-3
    are legal.  Until further information is avaliable, it is assumed that they
    are illegal.
    
27. Timecode track is not defined.  It is assumed to be a TimelineMobSlot with
    a Timecode segment.
    
28. Edgecode track is not defined.  It is assumed to be a TimelineMobSlot with
    an Edgecode segment.
    
29. The legal layout of a derivation chain is not specified in test, only in
    the diagram.
    
30. REQ_EP_037 states each essence track of a sub-clip composition shall contain
    exactly one SourceClip - what about sequences of one SourceClip?  Currently,
    sequences are not accepted.
    
31. REQ_EP_046 states each essence track of an adjusted-clip composition shall
    contain exactly one OperationGroup - what about sequence of one 
    OperationGroup?  Currently sequences are not accepted.
    
32. What does REQ_EP_056 mean?

33. Essence track is not defined.  It is assumed to be a MobSlot that has an
    Sound or Picture DataDefinition.
    
34. REQ_EP_091 states that the edit rate of an essence track must be equivalent
    to value in the table.  However, StaticMobSlots do not have edit rates.
    As was noted above, it is assumed that an essence track is a MobSlot with
    a Sound or Picture DataDefinition.  How should REQ_EP_091 treat 
    StaticMobSlots?
    
35. REQ_EP_061 and REQ_EP_075 require that URIs comply with RFC 2396 and also
	that absolute URIs conform to RFC 1738.  However, RFC 2396 updates RFC 1738.
	If a URI complies with RFC 2396, but one of the updates cause it to not
	conform with RFC 1738 should the test fail?  What if in order to comform to
	RFC 1738 it can not comply with RFC 2396.
	
36. REQ_EP_061 and REQ_EP_075 require that if a NetworkLocator contains a
	"relative URI, the base URI should be determined from the URI of the AAF
	file itself."  What exactly does this mean?
	
37. REQ_EP_059 says that essence associated with a file SourceMob shall be
    internal to the AAF file or external to the AAF file.  If the 
    FileDescriptor::ContainerDefinition property is used to determine if the
    essence is internal or external, what values indicate internal and what
    values indicate external.  Are there some values that are illegal?  For now
    assume the only legal values are kAAFContainerDef_External and
    kAAFContainerDef_AAF.
    
38. REQ_EP_060 states there should be a Locator specifying the location of the
    essence.  REQ_EP_061 states there should be a NetworkLocator that complies
    with a set of constraints.  These requirements do not state that these must
    be the same locator.  There are enough differences in these requirements
    (60: Locator, 61: NetworkLocator; 60: External to the AAF File; 61: Internal
    or External is not specified), that the test is currently being implemented
    to accept two differnt locators that will meet these requeirements.
    
39. The URI validator that is currently being used does not accept wide
	characters.  It also does not appear to accept relative URIs.  Until
	a different URI validator is found, these problems will exist when
	validating URIs.
	
40. REQ_EP_060 tests if a file exists at the location pointed to by the locator.
    Currently this is done assuming the path is specified as an absolute URI.
    Once a URI tool that deals with relative URIs, this can be modified to
    to allow the path to be absolute or relative.
    
41. The words "valid name" are used throughout the Edit Protocol, but what makes
	a name valid is never determined.  Until further information is avaliable,
	it is assumed that a name is valid if an AAF Object has a name property that
	has been set.
	
42. REQ_EP_099 and REQ_EP_100 state that the edit rates of audio tracks must
	equal the sample rate and the edit rates of video tracks must be less than
	or equal to the sample rate respectively.  Currently, it is assumed that an
	audio track is a mob slot where IsSoundKind() is true that contains a
	File Source mob	and a video track is a mob slot where IsPictureKind() is
	true that contains a File Source mob.  This includes StaticMobSlots, which
	do not have edit rates.  Until more information is avaliable, all 
	StaticMobSlots will cause test failures.
	
43. The term zero-valued SourceClip object is not defined.  For the purpose of
	this test, it is assumed to be a SourceClip object with a SourceID = 
	{ {0,0,0,0,0,0,0,0,0,0,0,0}, 0, 0, 0, 0, { 0, 0, 0, {0,0,0,0,0,0,0,0} } } =
	00000000000000000000000000000000-00000000-0000-0000-0000000000000000.
	
44. The term essence track is not defined.  For the purpose of this test
	(REQ_EP_050, REQ_EP_072), it is aussumed to be any SourceClip object along
	the derivation chain.
	
45. How do you acuratley check that a file exists (ie. it is insufficient to
    check if the file can be open using an ifstream) in a platform independant
    fashion?