#startm .this-module 0
AAFGroup\
#endm
#c
#startm .parent-module 0
AAFSegment\
#endm
#c
#import ./AAFSegment.exp
AD_HEAD

AD_INCLUDE(AAFTypes)

AD_FORWARD_DECLARATION(AAFDataDef)
AD_FORWARD_DECLARATION(AAFEffectDef)
AD_FORWARD_DECLARATION(AAFParameter)
AD_FORWARD_DECLARATION(AAFSourceReference)
AD_FORWARD_DECLARATION(EnumAAFEffectDefs)
AD_FORWARD_DECLARATION(EnumAAFParameterDefs)
AD_FORWARD_DECLARATION(AAFSegment)

/******************************************\
*                                          *
* Advanced Authoring Format                *
*                                          *
* Copyright (c) 1998 Avid Technology, Inc. *
* Copyright (c) 1998 Microsoft Corporation *
*                                          *
\******************************************/

 
/***********************************************\
*	Stub only.   Implementation not yet added	*
\***********************************************/


AD_CLASS_UUID(3AE3BA81, 2C98, 11d2, 80, 42, 00, 60, 08, 14, 3E, 6F)

AD_DEFAULT_UUID(3AE3BA82, 2C98, 11d2, 80, 42, 00, 60, 08, 14, 3E, 6F)


AD_XCLASS_BEGIN(Concrete, StoredObject)

AD_XMETHOD3(Initialize,
	[in], objPass, aafUID_t *, pDatadef, Data Definition Object,
	[in], objPass, aafLength_t, length, Length property value,
	[in], objIn, AAFEffectDef, effectDef, Effect Definition object,
	Initializes an effect object with the given property values.)
	//@comm  This function takes an already created effect definition object as an argument.
	//@comm  To add slots to the effect, call AddNewSlot.
	//@comm  To add renderings, call SetRender.

AD_XMETHOD1(GetEffectDefinition,
			[out], objOut, AAFEffectDef, ppEffectDef, Effect definition object,
		   Returns the effect definition for this invocation.)
  // 
  // Succeeds if all of the following are true:
  // - the ppEffectDef pointer is valid.
  // 
  // If this method fails nothing will be written to *ppEffectDef.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  //
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_PROP_NOT_PRESENT
  //   - This property does not exist in the file.
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEffectDef arg is NULL.)


AD_XMETHOD1(GetRender,
			[out], objOut, AAFSourceReference, ppSourceRef, Final rendering segment,
			Returns the segment that represents the optional rendering on an effect object.
  // Working and final renderings are handled by using
  // an IAAFEssenceGroup as the segment.
  // 
  // Succeeds if all of the following are true:
  // - the ppSourceRef pointer is valid.
  // 
  // If this method fails nothing will be written to *ppSourceRef.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  //
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_PROP_NOT_PRESENT
  //   - This property does not exist in the file.
  //
  // AAFRESULT_NULL_PARAM
  //   - ppSourceRef arg is NULL.)

AD_METHOD1(IsATimeWarp,
		   [out\\\,retval], aafBool *, pIsTimeWarp, Returned boolean value,
		   This boolean function returns whether or not an effect is a timewarp effect.
  // 
  // Succeeds if all of the following are true:
  // - the pIsTimeWarp pointer is valid.
  // 
  // If this method fails nothing will be written to *pIsTimeWarp.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pIsTimeWarp arg is NULL.)

AD_METHOD1(GetBypassOverride,
	[out], aafArgIDType_t *, pBypassOverride, Bypass override property value,
	Returns the optional bypass override propertyvalue from the input effect object.
  // 
  // Succeeds if all of the following are true:
  // - the pBypassOverride pointer is valid.
  // 
  // If this method fails nothing will be written to *pBypassOverride.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.
  //
  // AAFRESULT_PROP_NOT_PRESENT
  //   - This property does not exist in the file.
  //
  // AAFRESULT_NULL_PARAM
  //   - pBypassOverride arg is NULL.)

AD_METHOD1(GetNumSourceSegments,
	[out], aafInt32 *, pNumSources, Number of source media segments in the effect,
	Returns the number of media sources to the effect.
  //
  // Succeeds if all of the following are true:
  // - the pNumSources pointer is valid.
  // 
  // If this method fails nothing will be written to *pNumSources.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pNumSources arg is NULL.)

AD_METHOD1(IsValidTranEffect,
	[out], aafBool *, pValidTransition, TRUE if the effect is valid in a transition,
	Verifies that the input effect object can be used in a transition.
  // 
  // Succeeds if all of the following are true:
  // - the pValidTransition pointer is valid.
  // 
  // If this method fails nothing will be written to *pValidTransition.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pValidTransition arg is NULL.)

AD_METHOD1(GetNumParameters,
	[out], aafInt32 *, pNumParameters, Number of parameter slots in the effect,
	Returns the number of parameters in the effect.
  //
  // Succeeds if all of the following are true:
  // - the pNumParameters pointer is valid.
  // 
  // If this method fails nothing will be written to *pNumParameters.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pNumParameters arg is NULL.)


AD_XMETHOD1(AddNewParameter,
	[in], objIn, AAFParameter, pValue, Parameter to place in effect slot,
	Adds a new parameter object.
  // Succeeds if all of the following are true:
  // - the pValue pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_DUPLICATE_PARAMETER
  //   - The given argID is already present.
  //
  // AAFRESULT_NULL_PARAM
  //   - pValue arg is NULL.)

AD_XMETHOD2(AddNewInputSegment,
	[in], objPass, aafInt32, index, Index \(1-based\) of the input segment,
	[in], objIn, AAFSegment, pSegment, Segment to place in effect,
	Adds another input segment to an effect at the given index.
  // 
  // Succeeds if all of the following are true:
  // - the pSegment pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_DUPLICATE_INDEX
  //   - The given index value is already present.
  //
  // AAFRESULT_NULL_PARAM
  //   - pSegment arg is NULL.)

AD_XMETHOD1(SetRender,
	[in], objIn, AAFSourceReference, ppSourceRef, A segment containing a representation of the rendering,
	This function sets the final rendering for the given effect
	//    to the input source clip.  Multiple renderings may exist if the
	//    source clip refers to a master mob that contains a media group.)
  // 
  // Succeeds if all of the following are true:
  // - the ppSourceRef pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - ppSourceRef arg is NULL.)
	//@comm Replaces omfiEffectSetFinalRender and omfiEffectSetWorkingRender

AD_METHOD1(SetBypassOverride,
	[in], aafArgIDType_t, bypassOverride, Bypass override,
	This function sets the optional bypass override property on the given effect object.)
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.)

AD_XMETHOD2(GetParameterByArgID,
		   [in], objPass, aafArgIDType_t, argID, Arg ID,
		   [out], objOut, AAFParameter, ppParameter, Parameter object,
		   Given an argID\, returns the corresponding parameter slot and parameter slot value.
  // 
  // Succeeds if all of the following are true:
  // - the ppParameter pointer is valid.
  // 
  // If this method fails nothing will be written to *ppParameter.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_MISSING_PARAMETER
  //   - The given argID is not present.
  //
  // AAFRESULT_NULL_PARAM
  //   - ppParameter arg is NULL.)


AD_XMETHOD2(GetIndexedInputSegment,
		   [in], objPass, aafInt32, index, 1-based index into the effet inputs,
		   [out], objOut, AAFSegment, ppInputSegment, Input segment,
		   Given an index\, returns the corresponding input segment.
  // Working and final renderings are handled by using
  // an IAAFEssenceGroup as the segment.
  // 
  // Succeeds if all of the following are true:
  // - the ppInputSegment pointer is valid.
  // 
  // If this method fails nothing will be written to *ppInputSegment.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_MISSING_INDEX
  //   - The given index value is not present.
  //
  // AAFRESULT_NULL_PARAM
  //   - ppInputSegment arg is NULL.)

AD_XCLASS_END(Concrete, StoredObject)
