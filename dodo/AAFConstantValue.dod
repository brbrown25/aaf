#startm .this-module 0
AAFConstValue\
#endm
#c
#startm .parent-module 0
AAFParameter\
#endm
#c
AD_HEAD
AD_IDL(//
// The IAAFConstValue interface is implemented by objects that specify a parameter
// whose value is constant for an entire effect.  Use IAAFVaryingValue and one or
// more IAAFControlPoints for parameters which change in value during the effect.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)

/***********************************************\
*												*
* Advanced Authoring Format						*
*												*
* Copyright (c) 1998-1999 Avid Technology, Inc. *
* Copyright (c) 1998-1999 Microsoft Corporation *
*												*
\***********************************************/

AD_FORWARD_DECLARATION(AAFDataDef)
AD_FORWARD_DECLARATION(AAFParameter)

AD_CLASS_UUID(b8ddc081, 2afa, 11D2, bf, A5, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(b8ddc080, 2afa, 11D2, bf, A5, 00, 60, 97, 11, 62, 12)

AD_XCLASS_BEGIN(Concrete, StoredObject)

	
/****/
AD_METHOD3(GetValue,
			[in],aafUInt32,valueSize,Size of preallocated buffer,
			[out\\\, size_is\\\(valueSize\\\)\\\,length_is\\\(*bytesRead\\\)],aafDataBuffer_t,pValue,Preallocated buffer to hold value,
			[out],aafUInt32*,bytesRead,Number of actual bytes read,
			Writes the value into the pValue buffer.  The buffer is allocated by the caller\\\,
  // and the size of the buffer is given by valueSize.
  // 
  // Caller may call GetValueBufLen\\\(\\\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pValue pointer is valid.
  // - valueSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to *pValue.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pValue arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - valueSize indicates the buffer is too small to hold the value.)


AD_XMETHOD1(GetValueBufLen,
			[out],
			objPass,
			aafUInt32 *,
			pLen,
			Pointer to an variable used to return the length,

			Returns the length of buffer required for the GetValue\(\) method.
  // The value is placed into the location specified by pLen.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)

/****/
AD_METHOD2(SetValue,
			[in],aafUInt32,valueSize, Size of preallocated buffer,
			[in\\\, size_is\\\(valueSize\\\)],aafDataBuffer_t,pValue, buffer containing value,
			The data value is set from a buffer of size valueSize.
  //
  // Succeeds if all of the following are true:
  // - the pValue pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pValue is null.)

AD_XCLASS_END(Concrete, StoredObject)
