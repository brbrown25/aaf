#startm .this-module 0
EnumAAFComponents\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(//
// This interface is used to enumerate over the AAFComponents contained
// in an AAFSequence.
//)

AD_FORWARD_DECLARATION(AAFComponent)


AD_CLASS_UUID(B1A21395, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A21394, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)
AD_CLASS_BEGIN

AD_XMETHOD1(NextOne,
			[out\,retval],
			  objOut,
			  AAFComponent,
			  ppComponent,
			  The Next Component,
			Enumerates to the next element in the enumerators list. The
  // caller is responsible for properly releasing the returned pointer
  // when it is no longer needed.
  // 
  // Succeeds if all of the following are true:
  // - the ppComponent pointer is valid.
  // - there are Component objects remaining to be returned.
  // 
  // If this method fails nothing is written to *ppComponent.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppComponent is null.
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - no Components remaining to be returned.)

AD_XMETHOD3(Next,
			[in],
			  objPass,
			  aafUInt32,
			  count,
			  number of components requested,
			[out\, size_is\(count\)\, length_is\(*pNumFetched\)],
			  objOut,
			  AAFComponent,
			  ppComponents,
			  array to receive components,
			[out\,ref],
			  objPass,
			  aafUInt32 *,
			  pNumFetched,
			  number of actual Components fetched into ppComponents array,
			Enumerates the next count elements \(AAFComponent pointers\) in the
  // enumerator's list\, returning them in the given array along with
  // the actual number of enumerated elements in pNumFetched. The caller
  // is responsible for properly releasing the returned pointers.
  // 
  // Succeeds if all of the following are true:
  // - The ppMobs pointer is valid.
  // - The pNumFetched pointer is valid. If count is 1\, pNumFetched can be NULL.
  // - There are Mob objects remaining to be returned.
  // 
  // If this method fails nothing is written to *ppComponents or
  // pNumFetched.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - either ppCompoents or pNumFetched is null.)

AD_METHOD1(Skip,
		   [in],
		     aafUInt32,
			 count,
			 Number of elements to skip,
			Instructs the enumerator to skip the next count elements in the
  // enumeration so that the next call to Next will not
  // return those elements.
  // 
  // Succeeds if all of the following are true:
  // - count is less than or equal to the number of remaining objects.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  //
  // AAFRESULT_SUCCESS
  //   - succeeded.
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - count exceeded number of remaining objects.)

AD_METHOD0(Reset,
		   Instructs the enumerator to position itself at the beginning of the list of elements.
  //
  // There is no guarantee that the same set of elements will be enumerated on 
  // each pass through the list\, nor will the elements necessarily be enumerated in 
  // the same order. The exact behavior depends on the collection being enumerated.
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //)

AD_XMETHOD1(Clone,
			[out\,retval],
			  objOut,
			  EnumAAFComponents,
			  ppEnum,
			  new enumeration,
			Creates another component enumerator with the same state as the current
  // enumerator to iterate over the same list. This method makes it
  // possible to record a point in the enumeration sequence in order
  // to return to that point at a later time.
  //
  // Note: The caller must release this new enumerator separately from
  // the first enumerator.
  // 
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEnum is null.)

AD_CLASS_END
