#c/*************************************************\
#c*													*
#c* Advanced Authoring Format						*
#c*													*
#c* Copyright (c) 1998-1999 Avid Technology, Inc.	*
#c*													*
#c\*************************************************/
#startm .this-module 0
AAFTypeDefExtEnum\
#endm
#c
#startm .parent-module 0
AAFTypeDef\
#endm
#c
#import ./AAFTypeDef.exp
AD_HEAD
AD_IDL(//
// This interface is used to define field-extendible enumerated types
// used in AAF persistent objects.  Enumerated types are assumed to be
// based on AUIDs.
AD_STD_COMMENT_IFC_HEADER)
AD_FORWARD_DECLARATION(AAFPropertyValue)
AD_CLASS_UUID(a5456f02, 0ef2, 11d3, 84, 2e, 00, 60, 08, 32, ac, b8)

AD_DEFAULT_UUID(a5456f01, 0ef2, 11d3, 84, 2e, 00, 60, 08, 32, ac, b8)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD2(Initialize,
			[in\, ref],
			objPass,
			aafUID_constref,
			id,
			auid to be used to identify this type,

			[in],
			objPass,
			aafCharacter_constptr,
			pTypeName,
			friendly name of this type definition,

     Initializes this type def to be identified by the given guid.  No
  // element values are initially specified; they must be supplied
  // later using the AppendElement method.
  //
  // This method must be called after allocation\, and before
  // any other method can be called.
  //
  // Succeeds if:
  // - Initialize\(\) has not yet been called on this object.
  // - pID is a valid pointer.
  // - pTypeName is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_ALREADY_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pTypeName\)
  //
  // AAFRESULT_DUPLICATE
  //   - duplicate name or value is found.)


AD_XMETHOD1(CountElements,
			[out],
			objPass,
			aafUInt32 *,
			pCount,
			count of elements within this enumeration,

			Returns number of enumeration elements contained.
  //
  // Succeeds if:
  // - Initialize\(\) has already been called on this object.
  // - pCount is a valid pointer.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pCount\))


AD_XMETHOD2(GetElementValue,
			[in],
			objPass,
			aafUInt32,
			index,
			index of element to retrieve,

			[out],
			objPass,
			aafUID_t *,
			pOutValue,
			requested value,

     Gets the indexed element in this enumerated type.  The
  // value is written into the client-allocated *pOutValue.  Index
  // must be less than the value returned by CountElements\(\).
  //
  // Succeeds if:
  // - pOutValue is a valid pointer.
  // - index is less than CountElements\(\).
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pOutValue\)
  //
  // AAFRESULT_BADINDEX
  //   - index is not less than CountElements\(\).)


AD_XMETHOD3(GetNameFromValue,
			[in],
			objIn,
			AAFPropertyValue,
			pValue,
			value of element to get,

			[out\, size_is\(bufSize\)\, string],
			objPass,
			aafCharacter *,
			pName,
			buffer into which the element name is written,

			[in],
			objPass,
			aafUInt32,
			bufSize,
			The size of the pName buffer\, in bytes,

     Writes the human-legible tag associated with the given value in
  // this enumerated type.  The name is written\, with a trailing null
  // character\, into the pName buffer.  The buffer is allocated by
  // the caller.  The size of the buffer is given by bufSize.
  // 
  // Caller may call GetNameBufLenFromValue\(\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pValue pointer is valid.
  // - the pName pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // - the integer value is associated with an element of this
  //   enumerated type.
  // 
  // If this method fails nothing will be written to
  // *pName.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pValue or pName\)
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.
  //
  // AAFRESULT_BAD_PARAM
  //   - the given value is not associated with an element of
  //     this type.)


AD_XMETHOD2(GetNameBufLenFromValue,
			[in],
			objIn,
			AAFPropertyValue,
			pValue,
			value of element to get,

			[out],
			objPass,
			aafUInt32 *,
			pLen,
			required buffer length\, in bytes,

     Returns the length of buffer required for the GetNameFromValue\(\)
  // method\, in bytes.  The value is placed into the location
  // specified by pLen. The value will include space required for the
  // trailing null character.
  //
  // Succeeds if all of the following are true:
  // - the pValue pointer is valid.
  // - the pLen pointer is valid.
  // - the value is associated with an element of this enumerated
  //   type.
  //
  // If this method fails nothing will be written to *pLen.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(either pValue or pLen\)
  //
  // AAFRESULT_BAD_PARAM
  //   - the given value is not associated with an element of this
  //     type.)


AD_XMETHOD3(GetNameFromAUID,
			[in\, ref],
			objPass,
			aafUID_constref,
			value,
			value of element to get,

			[out\, size_is\(bufSize\)\, string],
			objPass,
			aafCharacter *,
			pName,
			buffer into which the element name is written,

			[in],
			objPass,
			aafUInt32,
			bufSize,
			The size of the pName buffer\, in bytes,

     Writes the human-legible tag associated with the given value in
  // this enumerated type.  The name is written\, with a trailing null
  // character\, into the pName buffer.  The buffer is allocated by
  // the caller.  The size of the buffer is given by bufSize.
  // 
  // Caller may call GetNameBufLenFromAUID\(\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pName pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // - the integer value is associated with an element of this
  //   enumerated type.
  // 
  // If this method fails nothing will be written to
  // *pName.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pName\)
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.
  //
  // AAFRESULT_BAD_PARAM
  //   - the given value is not associated with an element of
  //     this type.)


AD_XMETHOD2(GetNameBufLenFromAUID,
			[in\, ref],
			objPass,
			aafUID_constref,
			value,
			value of element to get,

			[out],
			objPass,
			aafUInt32 *,
			pLen,
			required buffer length\, in bytes,

     Returns the length of buffer required for the GetNameFromInteger\(\)
  // method\, in bytes.  The value is placed into the location
  // specified by pLen. The value will include space required for the
  // trailing null character.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  // - the value is associated with an element of this enumerated
  //   type.
  //
  // If this method fails nothing will be written to *pLen.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pLen\)
  //
  // AAFRESULT_BAD_PARAM
  //   - the given value is not associated with an element of this
  //     type.)


AD_XMETHOD2(GetAUIDValue,
			[in],
			objIn,
			AAFPropertyValue,
			pPropValIn,
			property value to read,

			[out],
			objPass,
			aafUID_t *,
			pValueOut,
			value of the enum represented by the given input property value,

     Gets the value from the given property value and writes it as an
  // AUID into *pValueOut.
  //
  // Succeeds if:
  // - The pPropValIn pointer is valid.
  // - The pValueOut pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(Either pPropValIn or ppPropValOut\))


AD_XMETHOD2(SetAUIDValue,
			[in],
			objIn,
			AAFPropertyValue,
			pPropValToSet,
			property value to set,

			[in\, ref],
			objPass,
			aafUID_constref,
			valueIn,
			new value of the enum represented by the given property value,

     Sets the given property to the value given in valueIn.
  //
  // Succeeds if:
  // - The pPropValToSet pointer is valid.
  // - valueIn is a correct value for this enumerated type.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pPropValToSet\)
  //
  // AAFRESULT_BAD_PARAM
  //   - valueIn is not a correct value for this enumerated type.
  //   - pPropValIn's type doesn't match GetElementType\(\))


AD_XMETHOD2(AppendElement,
			[in\, ref],
			objPass,
			aafUID_constref,
			value,
			value of appended element,

			[in],
			objPass,
			aafCharacter_constptr,
			pName,
			name of appended element,

     Appends a new element to this extendible enumeration.  The
  // element will have the given name and value.  It is not legal to
  // have elements with duplicate names or values.
  // 
  // Succeeds if:
  // - the pName pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NO_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pName\)
  //
  // AAFRESULT_DUPLICATE
  //   - duplicate name or value is found.)


AD_OVERRIDE(.method-GetTypeCategory)
AD_XCLASS_END(Concrete, StoredObject)
