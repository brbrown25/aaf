#startm .this-module 0
AAFTextLocator\
#endm
#c
#startm .parent-module 0
AAFLocator\
#endm
#c
#c #import ./AAFLocator.exp
/******************************************\
*                                          *
* Advanced Authoring Format                *
*                                          *
* Copyright (c) 1998 Avid Technology, Inc. *
* Copyright (c) 1998 Microsoft Corporation *
*                                          *
\******************************************/
AD_HEAD
AD_IDL(//
// The IAAFTextLocator interface is implemented by objects which
// provide information to help find a file containing essence data
// in a descriptive way for files that are held off-line.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//
// AAFRESULT_NOT_INITIALIZED
//   - This object has not yet had Initialize\(\) called on it through
//     this object's primary interface.
//)

AD_CLASS_UUID(e684d767, b935, 11d2, bf, 9d, 00, 10, 4b, c9, 15, 6d)

AD_DEFAULT_UUID(e684d768, b935, 11d2, bf, 9d, 00, 10, 4b, c9, 15, 6d)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_METHOD0(Initialize,
		   Initializes a newly allocated\, empty
  // IAAFNetworkLocator-supporting object.  This method must be called
  // after allocation\, and before any other method can be called.
  //
  // Succeeds if:
  // - Initialize\(\) has not yet been called on this object.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_ALREADY_INITIALIZED
  //   - Initialize\(\) has already been called on this object.)

AD_XMETHOD2(GetName,
			[out\, size_is\(bufSize\)\, string],
			  objPass,
			  aafCharacter *,
			  pNameBuf,
			  buffer into which Name is written,
			[in],
			  objPass,
			  aafInt32,
			  bufSize,
			  The size of the pNameBuf buffer,
			Writes the Name\, with a trailing null character\,
  // into the pNameBuf buffer.  The buffer is allocated by the
  // caller.  The size of the buffer is given by bufSize.  If the
  // property name has not yet been set\, a zero-length string will be
  // written \(that is\, only the trailing null character\).
  // 
  // Caller may call GetNameBufLen\(\) to determine the required
  // buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pNameBuf pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to *pNameBuf.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pNameBuf arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.)


AD_XMETHOD1(GetNameBufLen,
			[out],
			objPass,
			aafInt32 *,
			pLen,
			required buffer length,
			Returns the length of buffer required for the GetName\(\)
  // method.  The value is placed into the location specified by pLen.
  // The value will include space required for the trailing null
  // character.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)


AD_XMETHOD1(SetName,
			[in\, string],
			objPass,
			aafCharacter *,
			pNameBuf,
			the new Name,
			Set the Name property to the value specified in pNameBuf.  A
  // copy is made of the data so the caller retains ownership of the
  // *pNameBuf buffer and is responsible for de-allocating it.
  // 
  // Succeeds if all of the following are true:
  // - the pNameBuf pointer is valid.
  // 
  // If this method fails the Name property will not be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pNameBuf arg is NULL.)

AD_XCLASS_END(Concrete, StoredObject)
