#startm .this-module 0
EnumAAFTaggedValues\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
/***********************************************\
*												*
* Advanced Authoring Format						*
*												*
* Copyright (c) 1998-1999 Avid Technology, Inc. *
* Copyright (c) 1998-1999 Microsoft Corporation *
*												*
\***********************************************/


AD_FORWARD_DECLARATION(AAFTaggedValue)

AD_CLASS_UUID(5f7916f0, 0f87, 11d3, 8a, 3e, 00, 50, 04, 0e, f7, d2)

AD_DEFAULT_UUID(5f7916f1, 0f87, 11d3, 8a, 3e, 00, 50, 04, 0e, f7, d2)
AD_XCLASS_BEGIN(Concrete, Transient)

AD_XMETHOD1(NextOne,
			[out\,retval],
			objOut,
			AAFTaggedValue,
			ppTaggedValue,
			The Next Tagged Value,
			Enumerates to the next element in the enumerators list. The caller is responsible for 
  // properly releasing the returned pointer when it is no longer needed.
  // @comm This is a just simplified version of the Next method. )

AD_X2METHOD3(Next,
			[in], objPass, aafUInt32, count, number of Tagged Values requested, xxx,
			[out\, size_is\(count\)\, length_is\(*pFetched\)],
			objOutArray, AAFTaggedValue, ppTaggedValues, array to receive container definitions, count,
			[out\,ref], objPass, aafUInt32 *, pFetched,
			number of actual Tagged Values fetched into ppTaggedValues array,xxx,
			Enumerates the next count elements \(AAFTaggedValue pointers\) in 
  // the enumerator's list\, returning them in the given array along with the actual 
  // number of enumerated elements in pcFetched. The caller is responsible for 
  // properly releasing the returned pointers.)

AD_METHOD1(Skip,
		   [in], aafUInt32, count, Number of elements to skip,
		   Instructs the enumerator to skip the next count elements in the enumeration so that 
  // the next call to EnumAAFTaggedValues::Next will not return 
  // those elements.)

AD_METHOD0(Reset,
Instructs the enumerator to position itself at the beginning of the list of elements. 
  // @comm There is no guarantee that the same set of elements will be enumerated on 
  // each pass through the list\, nor will the elements necessarily be enumerated in 
  // the same order. The exact behavior depends on the collection being enumerated.)

AD_XMETHOD1(Clone,
			[out\,retval],
			objOut,
			EnumAAFTaggedValues,
			ppEnum,
			new enumeration,
			Creates another Tagged Value enumerator with the same state as the current 
  // enumerator to iterate over the same list. This method makes it possible to 
  // record a point in the enumeration sequence in order to return to that point 
  // at a later time.
  // @comm The caller must release this new enumerator separately from the first enumerator.)

AD_XCLASS_END(Concrete, Transient)
