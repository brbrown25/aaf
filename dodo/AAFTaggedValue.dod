#c *********************************************************************
#c
#c $Id: AAFTaggedValue.dod,v 1.14 2004/02/27 14:26:18 stuart_hc Exp $ $Name:  $
#c
#c The contents of this file are subject to the AAF SDK Public
#c Source License Agreement (the "License"); You may not use this file
#c except in compliance with the License.  The License is available in
#c AAFSDKPSL.TXT, or you may obtain a copy of the License from the AAF
#c Association or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.
#c
#c The Original Code of this file is Copyright 1998-2004, Licensor of the
#c AAF Association.
#c
#c The Initial Developer of the Original Code of this file and the
#c Licensor of the AAF Association is Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFTaggedValue\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
#c
#c #import ./AAFObject.exp
AD_HEAD
AD_IDL(//
// The IAAFTaggedValue interface is implemented by objects that
// specify an User defined tag and value.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)
AD_FORWARD_DECLARATION(AAFTypeDef)
AD_CLASS_UUID(e684d761, b935, 11d2, bf, 9d, 00, 10, 4b, c9, 15, 6d)

AD_DEFAULT_UUID(e684d762, b935, 11d2, bf, 9d, 00, 10, 4b, c9, 15, 6d)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD4(Initialize,

			[in\, string],
			objPass,
			aafCharacter_constptr,
			pName,
			User defined name \(tag\) of this tagged value object,

			[in],
			objIn,
			AAFTypeDef,
			pTypeDef,
			Type Definition of the following value data,

			[in], 
			objPass,
			aafUInt32, 
			valueSize, 
			Size of preallocated buffer,

			[in\, size_is\(valueSize\)], 
			objPass,
			aafDataBuffer_t, 
			pValue, 
			buffer containing value,

     Initializes a new tagged value object to be identified with the
  // given the given type\, and with the given human-legible name.
  //
  // This method must be called after allocation\, and before
  // any other method can be called.
  //
  // Succeeds if:
  // - Initialize\(\) has not yet been called on this object.
  // - pName is a valid pointer.
  // - pTypeDef is a valid pointer and registered
  // - pValue is a valid pointer
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_ALREADY_INIT
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pName or pTypeDef or pValue\)
  // )


AD_STD_METHOD_STRING_GET_AND_SIZE(Name,
     the Name string property.)


AD_XMETHOD1(GetTypeDefinition,
            [out],
            objOut,
            AAFTypeDef,
            ppTypeDef,
            Type definition object,

		   Returns the type definition for this invocation.
  // 
  // Succeeds if all of the following are true:
  // - the ppTypeDef pointer is valid.
  // 
  // If this method fails nothing will be written to *ppTypeDef.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  //
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_PROP_NOT_PRESENT
  //   - This property does not exist in the file.
  //
  // AAFRESULT_NULL_PARAM
  //   - ppTypeDef arg is NULL.)


AD_METHOD3(GetValue,

			[in],
            aafUInt32,
            valueSize,
            Size of preallocated buffer,

			[out\\\, size_is\\\(valueSize\\\)\\\, length_is\\\(*bytesRead\\\)],
            aafDataBuffer_t,
            pValue,
            Preallocated buffer to hold value,

			[out],
            aafUInt32 *,
            bytesRead,
            Number of actual bytes read,

     Writes the value into the pValue buffer.  The buffer is allocated
  // by the caller\\\, and the size of the buffer is given by
  // valueSize.
  // 
  // Caller may call GetValueBufLen\\\(\\\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pValue pointer is valid.
  // - valueSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to *pValue.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pValue arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - valueSize indicates the buffer is too small to hold the value.)


AD_XMETHOD1(GetValueBufLen,
			[out],
			objPass,
			aafUInt32 *,
			pLen,
			Pointer to an variable used to return the length,

			Returns the length of buffer required for the GetValue\(\) method.
  // The value is placed into the location specified by pLen.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)

AD_XMETHOD2(SetValue,
			[in], 
			objPass,
			aafUInt32, 
			valueSize, 
			Size of preallocated buffer,

			[in\, size_is\(valueSize\)], 
			objPass,
			aafDataBuffer_t, 
			pValue, 
			buffer containing value,

			The data value is set from a buffer of size valueSize and type.
  //
  // Succeeds if all of the following are true:
  // - pTypeDef is valid and registered with the object's dictionary.
  // - the pValue pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - ppTypeDef is null.)

AD_XCLASS_END(Concrete, StoredObject)
