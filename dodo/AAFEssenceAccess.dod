#c/*************************************************\
#c*													*
#c* Advanced Authoring Format						*
#c*													*
#c* Copyright (c) 1998-1999 Avid Technology, Inc.	*
#c*													*
#c\*************************************************/
#startm .this-module 0
AAFEssenceAccess\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
#c #import ./AAFObject.exp
#import ./AAFEssenceRawAccess.exp
#import ./AAFEssenceMultiAccess.exp
AD_HEAD
/************************************************\
*											    *
* Advanced Authoring Format					    *
*										        *
* Copyright (c) 1998-1999 Avid Technology, Inc. *
*										        *
\************************************************/

AD_IDL(//
// AAFEssenceAccess is an interace which provides streaming access over multiple channels of
// essence data.  This interface deals with essence data which is in an uncompressed form\,
// and handles compression or decompression of the data if required.  You may need to QueryInterface
// for an AAFEssenceAccess interface in order to do non-read write operations such as seek.
//
// For access to data in raw form\, call QueryInterface\(\)
// on this interface which gives access to raw I\/O methods.
//
// You should call the CreateMultiEssence or OpenMultiEssence calls on AAFMasterMob in order to get an
// interface pointer to AAFEssenceAccess\, as there is no public create or open method in the interface.
//
// A number of errors can be returned from most method calls\,  These are:
//		AAFRESULT_NOMEMORY -- The system ran out of memory processing the method
//		AAFRESULT_NULL_PARAM -- A NULL parameter was passed in which was required.
)

AD_FORWARD_DECLARATION(AAFSourceMob)
AD_FORWARD_DECLARATION(AAFSourceClip)
AD_FORWARD_DECLARATION(AAFEssenceFormat)
AD_FORWARD_DECLARATION(AAFLocator)

AD_CLASS_UUID(aed97eb1, 2bc8, 11D2, bf, aa, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(aed97eb0, 2bc8, 11D2, bf, aa, 00, 60, 97, 11, 62, 12)
AD_COM_EXT2_CLASS_BEGIN(public IAAFEssenceRawAccess,public IAAFEssenceMultiAccess)


AD_XMETHOD1(SetEssenceCodecFlavour,
	[in],
	objPass,
	aafUID_t,
	flavour,
	The particular flavour,
	Sets which flavour of the codec ID is to be used. )
	//@comm An example of a flavour would be a number of standard starting JPEG tables.

/****/
AD_METHOD3(WriteSamples,
	[in],
	aafUInt32,
	nSamples,
	write this many samples,
	[in\\\,size_is\\\(buflen\\\)],
	aafDataBuffer_t,
	buffer,
	from a buffer,
	[in],
	aafUInt32,
	buflen,
	of this size,
	Writes data to a single-channel essence stream.)
	// A single video frame is ONE sample.
	// Buflen must be large enough to hold the total sample size.
	//@comm Possible Errors:
	// Standard errors (see top of file).
	// AAFRESULT_SINGLE_CHANNEL_OP -- Tried to write to an interleaved stream.
	// AAFRESULT_BADDATAADDRESS -- The buffer must not be a NULL pointer.

/****/
AD_METHOD3(WriteFractionalSample,
	[in],
	aafUInt32,
	nBytes,
	Write this many bytes,
	[in\\\, size_is\\\(nBytes\\\)],
	aafDataBuffer_t,
	buffer,
	from a buffer,
	[out\\\,ref],
	aafUInt32 *,
	bytesWritten,
	Returns the number of bytes actualy written,
	Writes partual samples of essence to a stream.)
	//@comm Writes fractional samples of essence to the stream. When enough bytes
	// have been written to constitute one sample, then the number of samples will
	// be incremented by one. This function is useful in low-memory situations.  
	//@comm Possible Errors:
	// Standard errors (see top of file).
	// AAFRESULT_STREAM_FULL -- The essence can not be written because of a fault such as a disk full error in the
	// underlying operating system.)
	
/****/
AD_XMETHOD2(GetLargestSampleSize,
	[in],
	objPass,
	aafUID_t,
	dataDef,
	for this essence type,
	[out],
	objPass,
	aafLength_t*,
	maxSize,
	the largest sample size,
	Returns the size in bytes of the largest sample for a given essence type.)
	//@comm For uncompressed data, or the output of the software codec,
	// the sample size will propably be a constant.
	//@comm The essence type parameter exists to support codecs with multiple
	// interleaved essence types.
	// Add illegal media kind error.


/****/
AD_XMETHOD3(GetSampleFrameSize,
	[in],
	objPass,
	aafUID_t,
	dataDef,
	and this essence type,
	[in],
	objPass,
	aafPosition_t,
	frameNum,
	for this [1-based] sample frame number,
	[out],
	objPass,
	aafLength_t*,
	frameSize,
	How big is the sample frame?,
	Returns the size in bytes of the given sample for a given essence type.)
	//@comm For uncompressed data, or the output of the software codec,
	// the sample size will propably be a constant.
	//@comm The essence type parameter exists to support codecs with multiple
	// interleaved essence types.
	//@comm Possible Errors:
	// 	Standard errors (see top of file).
	// 	AAFRESULT_NULL_PARAM -- A return parameter was NULL.
	// AAFRESULT_BADSAMPLEOFFSET -- The supplied sample offset is out of range

/****/
AD_XMETHOD1(SetTransformParameters,
	[in],
	objIn,
	AAFEssenceFormat,
	op,
	A set of transforms to apply to the essence if required,
	Sets a series of format objects which will be used to describe the in-memory format.)
	//@comm This is the format expected on writes and produced on reads.
	//@comm On writes, the data will be written in this format, except
	// where a software codec may be used.
	// On reads, the data will be translated to this format.
	//@comm The order of the parameters does matter, as transformations will be applied in
	// that order to get from the on-disk format to the in-memory format.
	 
/****/
AD_XMETHOD2(GetSampleCount,
	[in],
	objPass,
	aafUID_t,
	dataDef,
	For this essence dataDef,
	[out],
	objPass,
	aafLength_t *,
	result,
	find out how many samples are present,
	Returns the number of samples of the given essence type on the given essence stream.)
	//@comm A video sample is one frame.
	//Invalid essence type

/****/
AD_METHOD5(ReadSamples,
	[in],
	aafUInt32,
	nSamples,
	Read this many samples,
	[in],
	aafUInt32,
	buflen,
	into a buffer of this size,
	[out\\\, size_is\\\(buflen\\\)\\\,length_is\\\(*bytesRead\\\)],
	aafDataBuffer_t,
	buffer,
	The transfer buffer,
	[out\\\,ref],
	aafUInt32*,
	samplesRead,
	The number of samples actually read,
	[out\\\,ref],
	aafUInt32*,
	bytesRead,
	The number of bytes actually read,
	Read a given number of samples from an opened essence stream.)
	//@comm This call will only return a single channel of essence from an interleaved
	// stream.
	//@comm A video sample is a frame.
	// Buflen is in bytes, and should be large enough to hold the samples
	// after the requested transforms have been applied.
	//@comm Possible Errors:
	// 	Standard errors \\\(see top of file\\\).
	// 	AAFRESULT_END_OF_DATA -- Hit the end of the essence \\\(like EOF\\\) while reading.
	// 	AAFRESULT_SMALLBUF -- Buffer too small for samples.


/****/
AD_METHOD3(ReadFractionalSample,
	[in],
	aafUInt32,
	nBytes,
	Read this many bytes,
	[out\\\, size_is\\\(nBytes\\\)\\\,length_is\\\(*bytesRead\\\)],
	aafDataBuffer_t,
	buffer,
	transfer into this buffer,
	[out\\\,ref],
	aafUInt32*,
	bytesRead,
	The number of bytes actually transferred,
	Reads fractional samples from a file.)
	//@comm This function allows reading
	// video frames in pieces, for low-memory situations.
	//@comm The buffer must be large enough to hold the specified number of bytes.
	//@comm Possible Errors:
	// 	Standard errors \\\(see top of file\\\).
	// 	AAFRESULT_END_OF_ESSENCE -- Hit the end of the essence \\\(like EOF\\\) while reading.
	// 	AAFRESULT_SMALLBUF -- Buffer too small for samples.


/****/
AD_METHOD1(Seek,
	[in],
	aafPosition_t,
	sampleFrameNum,
	A 0-based offset in units of the sample rate to seek to.,
	The seek function for essence.)
	//@comm Useful only on reading, you can't seek aound while writing essence.
	//@comm An audio frame is one sample across all channels.
	// 	AAFRESULT_BADSAMPLEOFFSET -- Hit the end of the essence \\\(like EOF\\\) while reading.


/****/
AD_XMETHOD2(GetFileFormat,
	[in],
	objIn,
	AAFEssenceFormat,
	opsTemplate,
	An AAFEssenceFormat with parameter codes set but no values,
	[out],
	objOut,
	AAFEssenceFormat,
	opsResult,
	Another AAFEssenceFormat with values set,
	Given an AAFEssenceFormat\, read the essence parameters inside and set the values from the file format.)

/****/
AD_XMETHOD1(GetFileFormatParameterList,
	[out],
	objOut,
	AAFEssenceFormat,
	ops,
	An ampty AAFEssenceFormat object,
	Returns an AAFEssenceFormat containing a list of all parameters supported by the current codec.)

/****/
AD_XMETHOD1(GetEmptyFileFormat,
	[out],
	objOut,
	AAFEssenceFormat,
	ops,
	An ampty AAFEssenceFormat object,
	Returns an empty AAFEssenceFormat object.  This is the factory method for AAFEssenceFormat.)

/****/
AD_XMETHOD1(PutFileFormat,
	[in],
	objIn,
	AAFEssenceFormat,
	ops,
	An AAFEssenceFormat with one or more parameter/value pairs,
	Given an AAFEssenceFormat\, read the essence parameters inside and change the file format.)

/****/
AD_METHOD2(GetCodecName,
	[in],
	aafUInt32,
	namelen,
	The size of the name buffer to be filled,
	[out\\\,size_is\\\(namelen\\\)],
	aafCharacter *,
	name,
	The buffer to fill,
	Returns the full name of the given codec expanded for human consumption.)
	//@comm No other call uses this name, so it may be fully descriptive, esp. of limitations.
	//@comm The name will be truncated to fit within "buflen" bytes.
	//@comm Possible Errors:<nl>
	// 	Standard errors (see top of file).<nl>
	//	AAFRESULT_CODEC_INVALID - The given codec ID is not loaded.
	// AAFRESULT_SMALLBUF - The buffer is not large enough to hold the data

/****/
AD_METHOD1(GetCodecID,
	[out],
	aafCodecID_t*,
	codecID,
	Returns the current codec ID,
	Returns the codec ID being used to handle the specified essence.)
	//@comm This will be required in order to send private data to the codec.
	//@comm The name will be truncated to fit within "buflen" bytes.

/****/
AD_METHOD0(CompleteWrite,
	Handle any format related writing at the end and adjust mob lengths.)
	//@comm Must be called before releasing a write essence access.
	// Standard errors (see top of file).
	// AAFRESULT_STREAM_FULL
	//   - The essence can not be written because of a fault such as a disk full error in the
	// underlying operating system.

AD_COM_METH(.method-AddSampleIndexEntry)
AD_COM_METH(.method-ReadRawData)
AD_COM_METH(.method-WriteRawData)
AD_COM_METH(.method-WriteMultiSamples)
AD_COM_METH(.method-ReadMultiSamples)

AD_COM_EXT2_CLASS_END(AAFEssenceRawAccess,AAFEssenceMultiAccess)
