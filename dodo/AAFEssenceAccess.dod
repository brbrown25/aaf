#startm .this-module 0
AAFEssenceAccess\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
#c #import ./AAFObject.exp
AD_HEAD
/************************************************\
*											    *
* Advanced Authoring Format					    *
*										        *
* Copyright (c) 1998-1999 Avid Technology, Inc. *
* Copyright (c) 1998-1999 Microsoft Corporation *
*										        *
\************************************************/

// AAFEssenceAccess is an interace which provides streaming access over essence data.  This
// interfaces deals with essence data which is in an uncompressed form, and handles compression
// or decompression of the data if required.  For access to data in raw form, call the
// GetEssenceSampleStream method on this interface, which gives access to the underlying stream
// used by the essence codecs and AAFEssenceAccess.
//
// You should call the CreateEssence or OpenEssence calls on AAFMasterMob in order to get an
// interface pointer to AAFEssenceAccess, as there is no public create or open method in the interface.
//
// A number of errors can be returned from most method calls.  These are:
//		AAFRESULT_NOMEMORY -- The system ran out of memory processing the method
//		AAFRESULT_NULL_PARAM -- A NULL parameter was passed in which was required.

AD_FORWARD_DECLARATION(AAFSourceMob)
AD_FORWARD_DECLARATION(AAFSourceClip)
AD_FORWARD_DECLARATION(AAFEssenceFormat)
AD_FORWARD_DECLARATION(AAFLocator)

AD_CLASS_UUID(aed97eb1, 2bc8, 11D2, bf, aa, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(aed97eb0, 2bc8, 11D2, bf, aa, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Concrete, Transient)

AD_XMETHOD1(SetEssenceCodecVariety,
[in],objPass, aafUID_t,variety,and this sub-variety,
Sets which variety of the codec ID is to be used. )
	//@comm An example of a variety would be a number of standard starting JPEG tables.

/****/
AD_METHOD3(WriteSamples,
[in],aafUInt32,nSamples,write this many samples,
[in\\\,size_is\\\(buflen\\\)],aafDataBuffer_t,buffer,to a buffer,
[in],aafUInt32,buflen,of this size,
Writes data to a single-channel essence stream.)
	//@comm Takes a essence handle, so the essence must have been opened or created.
	// A single video frame is ONE sample.
	// Buflen must be large enough to hold the total sample size.
	//@comm Possible Errors:
	// Standard errors (see top of file).
	// AAFRESULT_SINGLE_CHANNEL_OP -- Tried to write to an interleaved stream.
	// AAFRESULT_BADDATAADDRESS -- The buffer must not be a NULL pointer.

/****/
AD_METHOD2(WriteMultiSamples,
[in],aafUInt16,arrayElemCount,Do this many transfers,
[out\\\,size_is\\\(arrayElemCount\\\)],aafmMultiXfer_t *,xferArray,referencing this array,
Writes multiple channels worth of sample data to an interleaved data stream in the natural order for the CODEC.)
	//@comm arrayElemCount is the number of elementss in the array of transfer operations.
	// xferArray points to an array of transfer parameters.  All fields
	// in this array except for bytesXferred must be set up before
	// doing the transfer.  Some of the fields in the xferArray structure are status results
	// like bytesXferred and samplesXferred.

/****/
AD_METHOD3(WriteFractionalSample,
[in], aafUInt32, nBytes, Write this many bytes,
[in\\\, size_is\\\(nBytes\\\)],aafDataBuffer_t,buffer,from a buffer,
[out\\\,ref],aafUInt32 *,bytesWritten,Returns the number of bytes actualy written,
Writes partual samples of essence to a stream.)
	//@comm Writes fractional samples of essence to the stream. When enough bytes
	// have been written to constitute one sample, then the number of samples will
	// be incremented by one. This function is useful in low-memory situations.  
	//@comm The buffer must be large enough to hold the number of bytes specified. 
	//@comm Possible Errors:
	// Standard errors (see top of file).
	// AAFRESULT_BADRWLINES -- This function only works for video essence.
	
/****/
AD_XMETHOD2(GetLargestSampleSize,
[in],objPass, aafUID_t,mediaKind,and this essence type,
[out],objPass, aafUInt32*,maxSize,the largest sample size,
Returns the size in bytes of the largest sample for a given essence type.)
	//@comm For uncompressed data, or the output of the software codec,
	// the sample size will propably be a constant.
	//@comm The essence type parameter exists to support codecs with multiple
	// interleaved essence types.

/****/
AD_XMETHOD3(GetSampleFrameSize,
[in],objPass, aafUID_t,mediaKind,and this essence type,
[in],objPass, aafPosition_t,frameNum,for this [1-based] sample frame number,
[out],objPass, aafLength_t*,frameSize,How big is the sample frame?,
Returns the size in bytes of the given sample for a given essence type.)
	//@comm For uncompressed data, or the output of the software codec,
	// the sample size will propably be a constant.
	//@comm The essence type parameter exists to support codecs with multiple
	// interleaved essence types.
	//@comm Possible Errors:
	// 	Standard errors (see top of file).
	// 	AAFRESULT_NULL_PARAM -- A return parameter was NULL.

/****/
AD_XMETHOD1(SetTransformParameters,
[in],objIn,AAFEssenceFormat,op,A set of transforms to apply to the essence if required,
Sets a series of format objects which will be used to describe the in-memory format.)
	//@comm This is the format expected on writes and produced on reads.
	//@comm On writes, the data will be written in this format, except
	// where a software codec may be used.
	// On reads, the data will be translated to this format.
	//@comm The order of the parameters does matter, as transformations will be applied in
	// that order to get from the on-disk format to the in-memory format.
	 
/****/
AD_XMETHOD2(GetSampleCount,
[in],objPass, aafUID_t,mediaKind,For this essence type,
[out],objPass,aafLength_t *,result,find out how many samples are present,
Returns the number of samples of the given essence type on the given essence stream.)
	//@comm A video sample is one frame.

/****/
AD_METHOD5(ReadSamples,
[in],aafUInt32,nSamples,Read this many samples,
[in],aafUInt32,buflen,into a buffer of this size,
[out\\\, size_is\\\(buflen\\\)\\\,length_is\\\(*bytesRead\\\)],aafDataBuffer_t,buffer,The transfer buffer,
[out\\\,ref],aafUInt32*,samplesRead,The number of samples actually read,
[out\\\,ref],aafUInt32*,bytesRead,The number of bytes actually read,
Read a given number of samples from an opened essence stream.)
	//@comm This call will only return a single channel of essence from an interleaved
	// stream.
	//@comm A video sample is a frame.
	// Buflen is in bytes, and should be large enough to hold the samples
	// after the requested transforms have been applied.
	//@comm Possible Errors:
	// 	Standard errors (see top of file).
	// 	AAFRESULT_END_OF_ESSENCE -- Hit the end of the essence (like EOF) while reading.
/****/
AD_METHOD2(ReadMultiSamples,
[in],aafUInt16,elemCount,Do this many transfers,
[out\\\, size_is\\\(elemCount\\\)],aafmMultiXfer_t *,xferArray,referencing this array,
Reads one or more channels from an interleaved data stream)
	//@comm arrayElemCount is the size of the array or transfer operations.
	// xferArray points to an array of transfer parameters.  All fields
	// in this array except for bytesXferred must be set up before
	// doing the transfer.  Some of the fields in the xferArray structure are status results
	// like bytesXferred and samplesXferred.
	//@comm Possible Errors:
	// 	Standard errors (see top of file).
	// 	AAFRESULT_END_OF_ESSENCE -- Hit the end of the essence (like EOF) while reading.
	
/****/
AD_METHOD4(ReadFractionalSample,
[in],aafUInt32,nBytes,Read this many bytes,
[in],aafUInt32,bufLen,into a buffer of this size,
[out\\\, size_is\\\(bufLen\\\)\\\,length_is\\\(*bytesRead\\\)],aafDataBuffer_t,buffer,transfer into this buffer,
[out\\\,ref],aafUInt32*,bytesRead,The number of bytes actuall transferred,
Reads fractional samples from a file.)
	//@comm This function allows reading
	// video frames in pieces, for low-memory situations.  When enough lines
	// have been read to constitute a frame, then the number of samples read
	// be incremented by one.
	//@comm The buffer must be large enough to hold the specified number of bytes.
	//@comm Possible Errors:
	// 	Standard errors (see top of file).
	// 	AAFRESULT_END_OF_ESSENCE -- Hit the end of the essence (like EOF) while reading.

/****/
AD_METHOD1(SeektoEditFrame,
[in],aafPosition_t,sampleFrameNum,A 0-based offset in units of the slot edit rate to seek to.,
The seek function for essence.)
	//@comm Useful only on reading, you can't seek aound while writing essence.
	//@comm An audio frame is one sample across all channels.

/****/
AD_XMETHOD2(GetFileFormat,
[in],objIn,AAFEssenceFormat,opsTemplate,An AAFEssenceFormat with parameter codes set but no values,
[out],objOut,AAFEssenceFormat,opsResult,Another AAFEssenceFormat with values set,
Given an AAFEssenceFormat\, read the essence parameters inside and set the values from the file format.)

/****/
AD_XMETHOD1(GetFileFormatParameterList,
[out],objOut,AAFEssenceFormat,ops,An ampty AAFEssenceFormat object,
Returns an AAFEssenceFormat containing a list of all parameters supported by the current codec.)

/****/
AD_XMETHOD1(GetEmptyFileFormat,
[out],objOut,AAFEssenceFormat,ops,An ampty AAFEssenceFormat object,
Returns an empty AAFEssenceFormat object.  This is the factory method for AAFEssenceFormat.)

/****/
AD_XMETHOD1(PutFileFormat,
[in],objIn,AAFEssenceFormat,ops,An AAFEssenceFormat with one or more parameter/value pairs,
Given an AAFEssenceFormat\, read the essence parameters inside and change the file format.)




/****/
AD_METHOD2(GetCodecName,
[in],aafUInt32,namelen,The size of the name buffer to be filled,
[out\\\,size_is\\\(namelen\\\)],wchar_t *,name,The buffer to fill,
Returns the full name of the given codec expanded for human consumption.)
	//@comm No other call uses this name, so it may be fully descriptive, esp. of limitations.
	//@comm The name will be truncated to fit within "buflen" bytes.
	//@comm Possible Errors:<nl>
	// 	Standard errors (see top of file).<nl>
	//	AAFRESULT_CODEC_INVALID - The given codec ID is not loaded.

/****/
AD_METHOD1(GetCodecID,
[out],aafCodecID_t*,codecID,Returns the current codec ID,
Returns the codec ID being used to handle the specified essence.)
	//@comm This will be required in order to send private data to the codec.
	//@comm The name will be truncated to fit within "buflen" bytes.

/****/
AD_METHOD1(AddFrameIndexEntry,
[in],aafPosition_t,frameOffset,add a frame offset to it's frame index,
Adds a frame index entry for essence which was added precompressed.)
	//@comm This function should NOT be called when essence is passed to
	//the reference implementation in an uncompressed format.
	//@comm Possible Errors:<nl>
	//	Standard errors (see top of file).<nl>
	//	AAFRESULT_INVALID_OP_CODEC -- This kind of essence doesn't have a frame index<nl>
	//	AAFRESULT_MEDIA_OPENMODE -- The essence is open for read-only.

/****/
AD_METHOD1(SetStreamCacheSize,
[in],aafUInt32,cacheSize,make the cache this many bytes long,
Set the size of the cache buffer used for essence transfers.)

/****/
AD_METHOD1(SetBlockingSize,
[in],aafUInt32,numBytes,Preallocate this many bytes,
Sets the size of chunks allocated on disk during writes [only].)
	//@comm Allocating the space in this fashion ensures that the data will be
	// contiguous on disk (for at least numBytes bytes) even if other
	// disk operations allocate space on the disk.  If the data written
	// exceeds numBytes, then another disk block of numBytes size will be
	// allocated.
	//@comm Takes a essence handle, so the essence must have been opened or created.
	// The space is allocated in terms of bytes.

/****/
AD_METHOD3(WriteRawData,
[in],aafUInt32,nSamples,write this many samples,
[in\\\, size_is\\\(nSamples * sampleSize\\\)],aafDataBuffer_t,buffer,to a buffer,
[in],aafUInt32, sampleSize,of this size,
Writes pre-interleaved data to a essence stream.)
	//@comm A single video frame is ONE sample.
	//@comm Buflen must be large enough to hold
	// nSamples * the maximum sample size.
	//@comm Possible Errors:
	// Standard errors (see top of file).
	// OM_ERR_BADDATAADDRESS -- The buffer must not be a NULL pointer.
	
/****/
AD_METHOD5(ReadRawData,
[in],aafUInt32,nSamples,write this many samples,
[in],aafUInt32,buflen,to a buffer of this size,
[out\\\, size_is\\\(buflen\\\)\\\, length_is\\\(*bytesRead\\\)],aafDataBuffer_t,buffer,here is the buffer,
[out\\\,ref],aafUInt32 *,samplesRead,,
[out\\\,ref],aafUInt32 *,bytesRead,,
Read pre-interleaved data from a essence stream.)
	//@comm A single video frame is ONE sample.
	//@comm Buflen must be large enough to hold nSamples * the maximum sample size.
	//@comm Possible Errors:
	// Standard errors (see top of file).
	// OM_ERR_BADDATAADDRESS -- The buffer must not be a NULL pointer.

/****/
AD_METHOD0(CompleteWrite,
Handle any format related writing at the end and adjust mob lengths.)
	//@comm Must be called before releasing a write essence access.
	// Standard errors (see top of file).

AD_XCLASS_END(Concrete, Transient)
