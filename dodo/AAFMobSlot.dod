#startm .this-module 0
AAFMobSlot\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
#c
#c #import ./AAFObject.exp
AD_HEAD
AD_IDL(//
// The IAAFMobSlot interface is implemented by objects which represent
// a Segment of essence in a Mob.  IAAFMobSlot-implementing objects
// contan a Segment\, which can be a timeline\, static\, or event Segment.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//
// AAFRESULT_NOT_INITIALIZED
//   - This object has not yet had Initialize\(\) called on it through
//     this object's primary interface.  Note that IAAFMobSlot is a
//     primary interface for an abstract class\, so it is not
//     appropriate for the Initialize\(\) method to exist in this
//     interface.  The Initialize\(\) method is available through the
//     concrete object's primary interface.
//
// Types required by this module:
//
// aafBool
// aafRational_t
// AAFSegment
// aafPosition_t
// aafSlotID_t
// aafUInt32
// AAFDataDef
//)
AD_FORWARD_DECLARATION(AAFSegment)
AD_FORWARD_DECLARATION(AAFDataDef)
AD_CLASS_UUID(B1A21377, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A21376, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)
AD_XCLASS_BEGIN(Abstract, StoredObject)
AD_XMETHOD1(GetSegment,
			[out\,retval],
			objOut,
			AAFSegment,
			ppResult,
			Segment property value,

			This method will get the segment for this mob slot and place an
  // interface for it into the **ppResult argument.  If a segment
  // exists\, the result will be AddRef\(\)ed.  If not\, the result will
  // be NULL.
  //
  // Succeeds if all of the following are true:
  // - the pResult pointer is valid.
  // 
  // If this method fails nothing will be written to *pResult.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pResult arg is NULL.)


AD_XMETHOD2(GetName,
			[in\,string],
			objPass,
			wchar_t *,
			pName,
			buffer provided by client to hold the Mob Slot Name,

			[in],
			objPass,
			aafInt32,
			bufSize,
			length of the buffer provided to hold the name,

			Writes the mob slot name property\, with a trailing null
  // character\, into the pName buffer.  The buffer is
  // allocated by the caller.  The size of the buffer is given by
  // bufSize.  If the property name has not yet been set\, a
  // zero-length string will be written \(that is\, only the trailing
  // null character\).
  // 
  // Caller may call GetNameBufLen\(\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pName pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to
  // *pName.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pName arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.)


AD_XMETHOD1(GetNameBufLen,
			[in],
			objPass,
			aafInt32 *,
			pLen,
			length of the buffer provided to hold the name,

			Returns the length of buffer required for the
  // GetName\(\) method.  The value is placed into the
  // location specified by pLen. The value will include space required
  // for the trailing null character.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)


AD_XMETHOD1(GetPhysicalNum,
			[out\,retval],
			objPass,
			aafUInt32 *,
			pResult,
			The physical slot number property value,

			Returns information about the physical output channel associated
  // with the  Slot.
  //
  // This function returns the physical slot number of the specified
  // slot. The physical slot number identifies the physical slot
  // associated with the media.  For File Source Mobs that describe
  // stereo audio media\, the left channel should have a PhysicalSlot
  // of 1 and the right channel should have a Physical-Slot of 2.
  //
  // The function returns an error if the object specified in the slot
  // parameter is not a slot.
  //
  // Succeeds if all of the following are true:
  // - the pDatadef pointer is valid.
  // - the object in the slot parameter is a slot.
  // 
  // If this method fails nothing will be written to *pResult.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pDatadef arg is NULL.
  //
  // AAFRESULT_SLOT_NOT_FOUND
  //   - object specified is not a slot.)


AD_XMETHOD1(GetDataDef,
			[out\,retval],
			objPass,
			aafUID_t *,
			pResult,
			Data Definition AUID,

			This method will return the AUID of the Data Definition object
  // associated with the segment in this Mob Slot.  Common
  // DataDefinition UIDs are DDEF_Video\, DDEF_Audio\, DDEF_Timecode\,
  // and DDEF_Edgecode.
  //
  // Succeeds if all of the following are true:
  // - the pResult pointer is valid.
  // 
  // If this method fails nothing will be written to *pResult.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pResult arg is NULL.)


AD_XMETHOD1(GetSlotID,
			[out\,retval],
			objPass,
			aafSlotID_t *,
			pResult,
			Slot id of the Mob Slot,

			This method will return the slot id of this mob slot.
  //
  // Succeeds if all of the following are true:
  // - the pResult pointer is valid.
  // 
  // If this method fails nothing will be written to *pResult.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pResult arg is NULL.)


AD_XMETHOD1(SetSegment,
			[in],
			objIn,
			AAFSegment,
			pSegment,
			Segment property value,

			This method will set the segment for this mob slot.  If a segment
  // already exists for this mob slot\, it will be discarded.
  // 
  // Always succeeds.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(SetName,
			[in\, string],
			objPass,
			wchar_t *,
			pName,
			Mob Slot Name,

			Set the mob slot name property to the value specified in
  // pName.  A copy is made of the data so the caller retains
  // ownership of the *pName buffer and is responsible for
  // de-allocating it. 
  // 
  // Succeeds if all of the following are true:
  // - the pName pointer is valid.
  // 
  // If this method fails the name property will not be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pName arg is NULL.)


AD_XMETHOD1(SetPhysicalNum,
			[in],
			objPass,
			aafUInt32,
			number,
			The physical slot number property value,

  // This function sets the physical slot number of the specified
  // slot.  The physical slot number identifies the physical slot
  // associated with the media.  For File Source Mobs that describe
  // stereo audio media\, the left channel should have a PhysicalSlot
  // of 1 and the right channel should have a Physical-Slot of 2.
  //
  // The function returns an error if the Mob Slot passed in is not a
  // slot.
  // 
  // Succeeds if all of the following are true:
  // - the Mob Slot passed in is a slot.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\
  //
  // AAFRESULT_SLOT_NOT_FOUND
  //   - object specified is not a slot.)


AD_XMETHOD1(SetSlotID,
			[in],
			objPass,
			aafSlotID_t,
			value,
			Slot id of the Mob Slot,

			This method will set the slot id of this mob slot.
  // 
  // Always succeeds.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\))
AD_XCLASS_END(Abstract, StoredObject)
