#startm .this-module 0
AAFTapeDescriptor\
#endm
#c
#startm .parent-module 0
AAFEssenceDescriptor\
#endm
#c
#c #import ./AAFEssenceDescriptor.exp
AD_HEAD
AD_INCLUDE(AAFTypes)
AD_IDL(//
// The IAAFTapeDescriptor interface is implemented by objects which
// describe audio tape or videotape media.  A TapeDescriptor object
// shall be the EssenceDescription of a  physical Source Mob.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)
AD_CLASS_UUID(e58a856a, 2a3e, 11D2, bf, a4, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(e58a8569, 2a3e, 11D2, bf, a4, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_METHOD0(Initialize,
		   Initializes a newly allocated\, empty
  // IAAFTapeDescriptor-supporting object.  This method must be called
  // after allocation\, and before any other method can be called.
  //
  // Succeeds if:
  // - Initialize\(\) has not yet been called on this object.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_ALREADY_INITIALIZED
  //   - Initialize\(\) has already been called on this object.)


AD_XMETHOD1(SetTapeManufacturer,
			[in\,string],
			objPass,
			wchar_t *,
			pName,
			Manufacturers name,

			Sets the name of the company which manufactured the tape to the
  // value specified in pName.  A copy is made of the data so the
  // caller retains ownership of the *pName buffer and is responsible
  // for de-allocating it.
  // 
  // This method succeeds if all of the following are true:
  // - the pName pointer is valid.
  // 
  // If this method fails the Product Name property will not be
  // changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pName arg is NULL.)


AD_XMETHOD2(GetTapeManufacturer,
			[out\, size_is\(bufSize\)\, string],
			objPass,
			wchar_t *,
			pName,
			buffer into which the string is written,

			[in],
			objPass,
			aafInt32,
			bufSize,
			The size of the pName buffer,

			Writes the name of the company which manufactured the tape\, with
  // a trailing null character\, into the pName buffer.  The buffer is
  // allocated by the caller.  The size of the buffer is given by
  // bufSize.  If the property name has not yet been set\, a
  // zero-length string will be written \(that is\, only the trailing
  // null character\).
  // 
  // Caller may call GetTapeManBufLen\(\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pName pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to
  // *pName.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pName arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.)


AD_XMETHOD1(GetTapeManBufLen,
			[out],
			objPass,
			aafInt32 *,
			pLen,
			Size of buffer for Manufacturers Name string,

			Returns the length of buffer required for the
  // GetTapeManufacturer\(\) method.  The value is placed into the
  // location specified by pLen. The value will include space required
  // for the trailing null character.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)


AD_XMETHOD1(SetTapeModel,
			[in\,string],
			objPass,
			wchar_t *,
			pName,
			Tape Manufacturers Brand name,

			Sets the brand or model of the tape to the value specified in
  // pName.  A copy is made of the data so the caller retains
  // ownership of the *pName buffer and is responsible for
  // de-allocating it.
  // 
  // Succeeds if all of the following are true:
  // - the pName pointer is valid.
  // 
  // If this method fails the Product Name property will not be
  // changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pName arg is NULL.)


AD_XMETHOD2(GetTapeModel,
			[out\, size_is\(bufSize\)\, string],
			objPass,
			wchar_t *,
			pName,
			buffer into which the string is written,

			[in],
			objPass,
			aafInt32,
			bufSize,
			The size of the pName buffer,

			Writes the brand or model of the tape\, with a trailing null
  // character\, into the pName buffer.  The buffer is allocated by
  // the caller.  The size of the buffer is given by bufSize.  If the
  // property name has not yet been set\, a zero-length string will be
  // written \(that is\, only the trailing null character\).
  // 
  // Caller may call GetTapeModelBufLen\(\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pName pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to
  // *pName.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pName arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.)


AD_XMETHOD1(GetTapeModelBufLen,
			[out],
			objPass,
			aafInt32 *,
			pLen,
			Size of buffer for Model string,

			Returns the length of buffer required for the GetTapeModel\(\)
  // method.  The value is placed into the location specified by
  // pLen. The value will include space required for the trailing null
  // character.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)


AD_XMETHOD1(SetTapeFormFactor,
			[in],
			objPass,
			aafTapeCaseType_t,
			formFactor,
		    ex: kVHSVideoTape\, kDATCartridge ,

			Sets the form factor [case size] of the tape.
  // 
  // This method succeeds if all of the following are true:
  // - formFactor represents a valid format.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_BAD_TYPE
  //	- formFactor is invalid.)


AD_XMETHOD1(GetTapeFormFactor,
			[out],
			objPass,
			aafTapeCaseType_t *,
			formFactor,
		    ex: kVHSVideoTape\, kDATCartridge,
			Gets the form factor [case size] of the tape.
  // 
  // This method succeeds if all of the following are true:
  // - the pFormFactor pointer is valid.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pFormFactor arg is NULL.)


AD_XMETHOD1(SetSignalType,
			[in],
			objPass,
			aafVideoSignalType_t,
			videoSignal,
		    ex: kNTSCSignal,

			Sets the signal standard recorded on the tape.
  // 
  // This method succeeds if all of the following are true:
  //	videoSignal represents a valid video signal type.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_BAD_TYPE
  //	- videoSignal is invalid.)


AD_XMETHOD1(GetSignalType,
			[out],
			objPass,
			aafVideoSignalType_t *,
			pVideoSignal,
		    ex: kNTSCSignal,

			Gets the signal standard recorded on the tape.
  // 
  // This method succeeds if all of the following are true:
  // - the pVideoSignal pointer is valid.
  //
  // If this method fails nothing will be written to *pVideoSignal.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pVideoSignal arg is NULL.)


AD_XMETHOD1(SetTapeFormat,
			[in],
			objPass,
			aafTapeFormatType_t,
			tapeFormat,
		    ex: kBetacamFormat\, kBetacamSPFormat,

			Sets the recording method of the tape.
  // 
  // This method succeeds if all of the following are true:
  // - tapeFormat represents a valid tape format type.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_BAD_TYPE
  //	- tapeFormat is invalid.)


AD_XMETHOD1(GetTapeFormat,
			[out],
			objPass,
			aafTapeFormatType_t *,
			pTapeFormat,
		    ex: kBetacamFormat\, kBetacamSPFormat,

			Gets the recording method of the tape.
  //
  // Succeeds if all of the following are true:
  // - the pTapeFormat pointer is valid.
  // 
  // This method succeeds if all of the following are true:
  // - the pTapeFormat pointer is valid.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pTapeFormat arg is NULL.)


AD_XMETHOD1(SetTapeLength,
			[in],
			objPass,
			aafLength_t,
			tapeLength,
			The length of the tape in minutes.,
			Sets the length of the tape.
  // 
  // This method succeeds if all of the following are true:
  // - tapeLength is a positive number.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_BAD_LENGTH
  //	- tapeLength is negative.)


AD_XMETHOD1(GetTapeLength,
			[out],
			objPass,
			aafLength_t *,
			pTapeLength,
			The length of the tape in minutes.,

			Gets the length of the tape.
  //
  // This method succeeds if all of the following are true:
  // - the pTapeLength pointer is valid.
  // 
  // If this method fails nothing will be written to *pTapeLength.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pTapeLength arg is NULL.)
AD_XCLASS_END(Concrete, StoredObject)
