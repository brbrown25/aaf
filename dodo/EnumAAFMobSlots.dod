#startm .this-module 0
EnumAAFMobSlots\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(//
// This interface is for the enumerator which is generated by IAAFMob
// and is used for enumerating over IAAFMobSlots attached to the mob.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)
AD_FORWARD_DECLARATION(AAFMobSlot)
AD_CLASS_UUID(B1A21389, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A21388, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)
AD_XCLASS_BEGIN(Concrete, Transient)
AD_XMETHOD1(NextOne,
			[out\,retval],
			objOut,
			AAFMobSlot,
			ppMobSlot,
			The Next MobSlot,
			Enumerates to the next element in the enumerators list. The
  // caller is responsible for properly releasing the returned pointer
  // when it is no longer needed.
  // 
  // Succeeds if all of the following are true:
  // - the ppMobSlot pointer is valid.
  // - there are Mob Slot objects remaining to be returned.
  // 
  // If this method fails nothing is written to *ppMobSlot.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppMobSlot is null.
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - Hit the end of the list of slots being enumerated over.)


AD_XMETHOD3(Next,

			[in],
			objPass,
			aafUInt32,
			count,
			number of mob slots requested,

			[out\, size_is\(count\)\, length_is\(*pNumFetched\)],
			objOut,
			AAFMobSlot,
			ppMobSlots,
			array to receive mob slots,

			[out\,ref],
			objPass,
			aafUInt32 *,
			pNumFetched,
			number of actual MobSlots fetched into ppMobSlots array,

			Enumerates the next count elements \(AAFMobSlot pointers\) in 
  // the enumerator's list\, returning them in the given array along
  // with the actual number of enumerated elements in pNumFetched. The
  // caller is responsible for properly releasing the returned pointers.
  // 
  // Succeeds if all of the following are true:
  // - the ppMobSlots pointer is valid.
  // - the pNumFetched pointer is valid.
  // - there are Mob Slot objects remaining to be returned.
  // 
  // If this method fails nothing is written to *ppMobSlots or
  // pNumFetched.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - either ppMob or pNumFetched is null.
  //
  // E_INVALIDARG
  //   - Hit the end of the list of slots being enumerated over.)


AD_METHOD1(Skip,
		   [in],
		   aafUInt32,
		   count,
		   Number of elements to skip,
		   Instructs the enumerator to skip the next count elements in the
  // enumeration so that the next call to EnumAAFMobSlots::Next will
  // not return those elements.
  // 
  // Succeeds if all of the following are true:
  // - count is less than or equal to the number of remaining objects.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - count exceeded number of remaining objects.)


AD_METHOD0(Reset,
		   Instructs the enumerator to position itself at the beginning of
  // the list of elements.
  // 
  // Always succeeds.
  // 
  // This method will return the following code:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(Clone,
			[out\,retval],
			objOut,
			EnumAAFMobSlots,
			ppEnum,
			new enumeration,
			Creates another mob slot enumerator with the same state as the
  // current enumerator to iterate over the same list. This method
  // makes it possible to record a point in the enumeration sequence
  // in order to return to that point at a later time.
  // 
  // Note: The caller must release this new enumerator separately from
  // the first enumerator.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEnum is null.)
AD_XCLASS_END(Concrete, Transient)
