#startm .this-module 0
EnumAAFMobSlots\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
/******************************************\
*                                          *
* Advanced Authoring Format                *
*                                          *
* Copyright (c) 1998 Avid Technology, Inc. *
* Copyright (c) 1998 Microsoft Corporation *
*                                          *
\******************************************/

 
/***********************************************\
*	Stub only.   Implementation not yet added	*
\***********************************************/


AD_IDL(//
// This interface is for the enumerator which is generated by IAAFMob
// and is used for enumerating over IAAFMobSlots attached to the mob.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)

AD_FORWARD_DECLARATION(AAFMobSlot)


AD_CLASS_UUID(B1A21389, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A21388, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)
AD_CLASS_BEGIN

AD_XMETHOD1(NextOne,
			[out\,retval],
			objOut,
			AAFMobSlot,
			ppMobSlot,
			The Next MobSlot,
			Enumerates to the next element in the enumerators list. The caller is responsible for 
  // properly releasing the returned pointer when it is no longer needed.
  // @comm This is a just simplified version of the Next method.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - pFetched sould be NULL for a count of one\, and non-NULL otherwise.
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - Hit the end of the list of slots being enumerated over.)

AD_XMETHOD3(Next,
			[in], objPass, aafUInt32, count, number of mob slots requested,
			[out\, size_is\(count\)\, length_is\(*pFetched\)],
			objOut, AAFMobSlot, ppMobSlots, array to receive mob slots,
			[out\,ref], objPass, aafUInt32 *, pFetched,
			number of actual MobSlots fetched into ppMobSlots array,
			Enumerates the next count elements \(AAFMobSlot pointers\) in 
  // the enumerator's list\, returning them in the given array along with the actual 
  // number of enumerated elements in pcFetched. The caller is responsible for 
  // properly releasing the returned pointers.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // E_INVALIDARG
  //   - Hit the end of the list of slots being enumerated over.
  //)

AD_METHOD0(Reset,
Instructs the enumerator to position itself at the beginning of the list of elements. 
  // @comm There is no guarantee that the same set of elements will be enumerated on 
  // each pass through the list\, nor will the elements necessarily be enumerated in 
  // the same order. The exact behavior depends on the collection being enumerated.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //)

AD_METHOD1(Skip,
		   [in], aafUInt32, count, Number of elements to skip,
		   Instructs the enumerator to skip the next count elements in the enumeration so that 
  // the next call to EnumAAFMobSlots::Next will not return those elements.
  // 
  // This method will return the following codes.
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // E_FAIL
  //   - Skipped past the end of the list of slots.
  //)



AD_XMETHOD1(Clone,
			[out\,retval],
			objOut,
			EnumAAFMobSlots,
			ppEnum,
			new enumeration,
			Creates another mob slot enumerator with the same state as the current 
  // enumerator to iterate over the same list. This method makes it possible to 
  // record a point in the enumeration sequence in order to return to that point 
  // at a later time.
  // @comm The caller must release this new enumerator separately from the first enumerator.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // E_FAIL
  //   - Failed to allocate.
  //)

AD_CLASS_END
