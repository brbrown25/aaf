#c *********************************************************************
#c
#c $Id: AAFEssenceDescriptor2.dod,v 1.3 2009/06/01 11:46:50 stuart_hc Exp $ $Name:  $
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2009, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFEssenceDescriptor2\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
#c
#c #import ./AAFObject.exp
AD_HEAD
AD_IDL(///
/// The IAAFEssenceDescriptor2 interface is implemented by objects which
/// describe the format of the content data associated with a File
/// Source mob or of the media associated with a Physical Source mob.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///
/// AAFRESULT_NOT_INITIALIZED
///   - This object has not yet had Initialize\(\) called on it through
///     this object's primary interface.  Note that
///     IAAFEssenceDescriptor2 is a primary interface for an abstract
///     class\, so it is not appropriate for the Initialize\(\) method
///     to exist in this interface.  The Initialize\(\) method is
///     available through the concrete object's primary interface.
///)
AD_FORWARD_DECLARATION(AAFLocator)
AD_FORWARD_DECLARATION(EnumAAFLocators)
AD_CLASS_UUID(3ec92569, 730d, 45d7, 80, 5f, d8, 62, 9a, a1, 09, 10)

AD_DEFAULT_UUID(3ec92568, 730d, 45d7, 80, 5f, d8, 62, 9a, a1, 09, 10)
AD_XCLASS_BEGIN(Abstract, StoredObject)
AD_XMETHOD1(CountLocators,
			[out],
			objPass,
			aafUInt32 *,
			pResult,
			Returns the number of locators,

			Return the number of locators attached to this essence
  /// descriptor.  The number of locators may be zero if the essence is
  /// in the current file.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pCount pointer is valid.
  /// 
  /// If this method fails nothing is written to *pCount.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pCount is null.)


AD_XMETHOD1(AppendLocator,
			[in],
			objIn,
			AAFLocator,
			pLocator,
			Locator to append,

			Append another locator to this essence descriptor.  Use this
  /// function to add a locator to be scanned last when searching for
  /// the essence \(a secondary location for the essence\).
  /// 
  /// Succeeds if all of the following are true:
  /// - the pLocator pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLocator is null.)


AD_XMETHOD1(PrependLocator,
			[in],
			objIn,
			AAFLocator,
			pLocator,
			Locator to append,

			Prepend another locator to this essence descriptor.  Use this
  /// function to add a locator to be scanned first when searching for
  /// the essence \(a new primary location for the essence\).
  /// 
  /// Succeeds if all of the following are true:
  /// - the pLocator pointer is valid.
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLocator is null.)


AD_XMETHOD2(InsertLocatorAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index at which locator is to be inserted,

			[in],
			objIn,
			AAFLocator,
			pLocator,
			Locator to append,

     Inserts the given locator at the given index.  Locators already
  /// existing at the given and higher indices will be moved to the
  /// next higher index to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pLocator pointer is valid.
  /// - index is less than or equal to the value returned by
  ///   CountLocators\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLocator is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than the value returned by
  ///     CountLocators\(\).)


AD_XMETHOD2(GetLocatorAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index of locator to retrieve,

			[out\, retval],
			objOut,
			AAFLocator,
			ppLocator,
			returned locator,

     Retrieves the locator at the given index.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pLocator pointer is valid.
  /// - index is less than the value returned by CountLocators\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pLocator is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountLocators\(\).)


AD_XMETHOD1(RemoveLocatorAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index of locator to remove,

     Removes the locator at the given index.  Locators already
  /// existing at indices higher than the given index will be moved to
  /// the next lower index to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - index is less than the value returned by CountLocators\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountLocators\(\).)


AD_XMETHOD1(GetLocators,
			[out],
			objOut,
			EnumAAFLocators,
			ppEnum,
			An enumerator to the locators on this essence descriptor,

			Returns an enumerator to the locators.  The number of locators
  /// may be zero if the essence is in the current file.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.)


AD_XMETHOD1(CountSubDescriptors,
			[out],
			objPass,
			aafUInt32 *,
			pResult,
			Returns the number of SubDescriptors,

			Return the number of SubDescriptors attached to this essence
  /// descriptor.  The number of SubDescriptors may be zero if the essence is
  /// in the current file.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pCount pointer is valid.
  /// 
  /// If this method fails nothing is written to *pCount.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pCount is null.)


AD_XMETHOD1(AppendSubDescriptor,
			[in],
			objIn,
			AAFSubDescriptor,
			pSubDescriptors,
			SubDescriptor to append,

			Append another SubDescriptor to this essence descriptor.  Use this
  /// function to add a SubDescriptor to be scanned last when searching for
  /// the essence \(a secondary location for the essence\).
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSubDescriptor pointer is valid.
  /// - the pSubDescriptor pointer indicates an object which is not already
  ///   owned by any object
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSubDescriptor is null.
  ///
  /// AAFRESULT_OBJECT_ALREADY_ATTACHED
  ///   - the object pointed to by pSubDescriptor is already owned by this or
  ///     another object)


AD_XMETHOD1(PrependSubDescriptor,
			[in],
			objIn,
			AAFSubDescriptor,
			pSubDescriptor,
			SubDescriptor to append,

			Prepend another SubDescriptor to this essence descriptor.  Use this
  /// function to add a SubDescriptor to be scanned first when searching for
  /// the essence \(a new primary location for the essence\).
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSubDescriptor pointer is valid.
  /// - the pSubDescriptor pointer indicates an object which is not already
  ///   owned by any object
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSubDescriptor is null.
  ///
  /// AAFRESULT_OBJECT_ALREADY_ATTACHED
  ///   - the object pointed to by pSubDescriptor is already owned by this or
  ///     another object)


AD_XMETHOD2(InsertSubDescriptorAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index at which SubDescriptor is to be inserted,

			[in],
			objIn,
			AAFSubDescriptor,
			pSubDescriptor,
			SubDescriptor to append,

     Inserts the given SubDescriptor at the given index.  SubDescriptors already
  /// existing at the given and higher indices will be moved to the
  /// next higher index to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSubDescriptor pointer is valid.
  /// - the pSubDescriptor pointer indicates an object which is not already
  ///   owned by any object
  /// - index is less than or equal to the value returned by
  ///   CountSubDescriptors\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSubDescriptor is null.
  ///
  /// AAFRESULT_OBJECT_ALREADY_ATTACHED
  ///   - the object pointed to by pSubDescriptor is already owned by this or
  ///     another object
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than the value returned by
  ///     CountSubDescriptors\(\).)


AD_XMETHOD2(GetSubDescriptorAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index of SubDescriptor to retrieve,

			[out\, retval],
			objOut,
			AAFSubDescriptor,
			ppSubDescriptor,
			returned SubDescriptor,

     Retrieves the SubDescriptor at the given index.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pSubDescriptor pointer is valid.
  /// - index is less than the value returned by CountSubDescriptors\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pSubDescriptor is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountSubDescriptors\(\).)


AD_XMETHOD1(RemoveSubDescriptorAt,

			[in],
			objPass,
			aafUInt32,
			index,
			index of SubDescriptor to remove,

     Removes the SubDescriptor at the given index.  SubDescriptors already
  /// existing at indices higher than the given index will be moved to
  /// the next lower index to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - index is less than the value returned by CountSubDescriptors\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountSubDescriptors\(\).)


AD_XMETHOD1(GetSubDescriptors,
			[out],
			objOut,
			EnumAAFSubDescriptors,
			ppEnum,
			An enumerator to the SubDescriptors on this essence descriptor,

			Returns an enumerator to the SubDescriptors.  The number of SubDescriptors
  /// may be zero if the essence is in the current file.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.)
AD_XCLASS_END(Abstract, StoredObject)
