#startm .this-module 0
EnumAAFPropertyValues\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(//
// This interface is used to enumerate over the AAFPropertyValues
// contained in a collection.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//
/***********************************************\
*	Stub only.   Implementation not yet added	*
\***********************************************/)
AD_FORWARD_DECLARATION(AAFPropertyValue)
AD_CLASS_UUID(809c8ca9, 9884, 11d2, 84, 1f, 00, 60, 08, 32, ac, b8)

AD_DEFAULT_UUID(809c8caa, 9884, 11d2, 84, 1f, 00, 60, 08, 32, ac, b8)
AD_CLASS_BEGIN
AD_XMETHOD1(NextOne,
			[out\,retval],
			objOut,
			AAFPropertyValue,
			ppPropertyValue,
			The Next Property Value,
			Enumerates to the next element in the enumerators list. The
  // caller is responsible for properly releasing the returned pointer
  // when it is no longer needed.
  // 
  // Succeeds if all of the following are true:
  // - the ppPropertyValue pointer is valid.
  // - there are Property Values remaining to be returned.
  // 
  // If this method fails nothing is written to *ppPropertyValue.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppPropertyValue is null.
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - no Components remaining to be returned.)


AD_XMETHOD3(Next,
			[in],
			objPass,
			aafUInt32,
			count,
			number of objects requested,

			[out\, size_is\(count\)\, length_is\(*pFetched\)],
			objOut,
			AAFPropertyValue,
			ppPropertyValues,
			array to receive Property Values,

			[out\,ref],
			objPass,
			aafUInt32 *,
			pFetched,
			number of actual Property Values fetched into ppPropertyValues
	// array,

			Enumerates the next count elements \(AAFPropertyValue pointers\)
  // in the enumerator's list\, returning them in the given array
  // along with the actual number of enumerated elements in
  // pNumFetched. The caller is responsible for properly releasing the
  // returned pointers.
  // 
  // Succeeds if all of the following are true:
  // - The ppMobs pointer is valid.
  // - The pNumFetched pointer is valid. If count is 1\, pNumFetched
  //   can be NULL. 
  // - There are Property Value objects remaining to be returned.
  // 
  // If this method fails nothing is written to *ppPropertyValues or
  // pNumFetched.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - either ppCompoents or pNumFetched is null.)


AD_XMETHOD1(Skip,
			[in],
			objPass,
			aafUInt32,
			count,
			Number of elements to skip,
			Instructs the enumerator to skip the next count elements in the
  // enumeration so that the next call to Next will not
  // return those elements.
  // 
  // Succeeds if all of the following are true:
  // - count is less than or equal to the number of remaining objects.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  //
  // AAFRESULT_SUCCESS
  //   - succeeded.
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - count exceeded number of remaining objects.)


AD_METHOD0(Reset,
		   Instructs the enumerator to position itself at the beginning of
  // the list of elements.
  //
  // Always succeeds.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  //
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(Clone,
			[out\,retval],
			objOut,
			EnumAAFPropertyValues,
			ppEnum,
			new enumeration,
			Creates another Property Value enumerator with the same state as
  // the current enumerator to iterate over the same list. This method
  // makes it possible to record a point in the enumeration sequence
  // in order to return to that point at a later time.
  //
  // Note: The caller must release this new enumerator separately from
  // the first enumerator.
  // 
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEnum is null.)
AD_CLASS_END
