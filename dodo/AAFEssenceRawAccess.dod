#c *********************************************************************
#c
#c $Id: AAFEssenceRawAccess.dod,v 1.8 2004/02/27 14:26:17 stuart_hc Exp $ $Name:  $
#c
#c The contents of this file are subject to the AAF SDK Public
#c Source License Agreement (the "License"); You may not use this file
#c except in compliance with the License.  The License is available in
#c AAFSDKPSL.TXT, or you may obtain a copy of the License from the AAF
#c Association or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.
#c
#c The Original Code of this file is Copyright 1998-2004, Licensor of the
#c AAF Association.
#c
#c The Initial Developer of the Original Code of this file and the
#c Licensor of the AAF Association is Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFEssenceRawAccess\
#endm
#c
AD_HEAD

AD_IDL(//
// AAFEssenceRawAccess is an interace which provides streaming access
// over raw essence data.
//
// You should call the CreateRawEssence or OpenRawEssence calls on
// AAFMasterMob in order to get an interface pointer to
// AAFEssenceAccess\, as there is no public create or open method in
// the interface.
//
// Objects implementing this interface also implement AAFEssenceAccess
// for operations other than read and write.
//
// A number of errors can be returned from most method calls.  These
// are:
//   AAFRESULT_NOMEMORY   -- The system ran out of memory processing
//                           the method
//   AAFRESULT_NULL_PARAM -- A NULL parameter was passed in which was
//                           required.)
AD_FORWARD_DECLARATION(AAFSourceMob)
AD_FORWARD_DECLARATION(AAFSourceClip)
AD_FORWARD_DECLARATION(AAFEssenceFormat)
AD_FORWARD_DECLARATION(AAFLocator)
AD_CLASS_UUID(D815E2B1, 2425, 11d3, 80, AD, 00, 60, 08, 14, 3E, 6F)

AD_DEFAULT_UUID(D815E2B2, 2425, 11d3, 80, AD, 00, 60, 08, 14, 3E, 6F)
AD_XCLASS_BEGIN(Abstract, Transient)
AD_METHOD1(AddSampleIndexEntry,
	[in],
	aafPosition_t,
	frameOffset,
	add a frame offset to its frame index,
	Adds the byte offset to the end of the sample index table \\\(if
  // any\\\). 
  //
  // For formats with fixed sample sizes \\\(without a sample offset
  // table\\\)\\\, this method will return AAFRESULT_SUCCESS.
  //
  // This function should NOT be called when essence is passed to the
  // reference implementation in an uncompressed format.
  //
  // Possible Errors:
  //   AAFRESULT_INVALID_OP_CODEC -- This kind of essence doesn't have
  //                                 a frame index
  //   AAFRESULT_MEDIA_OPENMODE   -- The essence is open for
  //                                 read-only.)


AD_METHOD3(WriteRawData,
	[in],
	aafUInt32,
	nSamples,
	write this many samples,
	[in\\\, size_is\\\(nSamples * sampleSize\\\)],
	aafDataBuffer_t,
	buffer,
	to a buffer,
	[in],
	aafUInt32,
	sampleSize,
	of this size,
	Writes pre-interleaved data to a essence stream.
  //
  // A single video frame is ONE sample.
  //
  // Buflen must be large enough to hold nSamples * the maximum sample
  // size.
  //
  // Possible Errors:
  //   AAFRESULT_BADDATAADDRESS -- The buffer must not be a NULL
  //                               pointer.)
	

AD_METHOD5(ReadRawData,
	[in],
	aafUInt32,
	nSamples,
	write this many samples,
	[in],
	aafUInt32,
	buflen,
	to a buffer of this size,
	[out\\\, size_is\\\(buflen\\\)\\\, length_is\\\(*bytesRead\\\)],
	aafDataBuffer_t,
	buffer,
	here is the buffer,
	[out\\\,ref],
	aafUInt32 *,
	samplesRead,
	,
	[out\\\,ref],
	aafUInt32 *,
	bytesRead,
	,
	Read pre-interleaved data from a essence stream.
  //
  // A single video frame is ONE sample.
  //
  // Buflen must be large enough to hold nSamples * the maximum sample
  // size.
  //
  // Possible Errors:
  //   AAFRESULT_BADDATAADDRESS -- The buffer must not be a NULL
  //                               pointer.)
AD_XCLASS_END(Abstract, Transient)
