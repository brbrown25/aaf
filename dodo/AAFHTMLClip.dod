#c/*************************************************\
#c*													*
#c* Advanced Authoring Format						*
#c*													*
#c* Copyright (c) 1998-1999 Avid Technology, Inc.	*
#c*													*
#c\**************************************************/
#startm .this-module 0
AAFHTMLClip\
#endm
#c
#startm .parent-module 0
AAFTextClip\
#endm
#c
AD_HEAD

AD_IDL(//
// An HTMLClip is a reference to HTML text essence.
//
// Typically an HTMLClip is in a StaticMobSlot and defines a section
// of HTML text that is associated with the essence data in a parallel
// TimelineMobSlot. The duration\, accessed through IAAFComponent\, defines
// the extent of the association with the parallel Mob Slot.
//)

AD_CLASS_UUID(e684d783, b935, 11d2, bf, 9d, 00, 10, 4b, c9, 15, 6d)

AD_DEFAULT_UUID(e684d784, b935, 11d2, bf, 9d, 00, 10, 4b, c9, 15, 6d)
AD_XCLASS_BEGIN(Concrete, StoredObject)

AD_XMETHOD2(GetBeginAnchor,
	[in\,string],
	objPass,
	aafCharacter *,
	pName,
	Begin Anchor Name,

	[in],
	objPass,
	aafInt32,
	bufSize,
	length of the buffer to hold Begin Anchor Name,

	Writes the begin anchor name\, with a trailing null character\, into the
  // pName buffer.  The buffer is allocated by the caller.  The size
  // of the buffer is given by bufSize.  If the property name has not
  // yet been set\, a zero-length string will be written \(that is\,
  // only the trailing null character\).
  // 
  // Caller may call GetBeginAnchorBufLen\(\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pname pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to *pName.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pname arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.)

AD_XMETHOD1(GetBeginAnchorBufLen,
	[out],
	objPass,
	aafUInt32 *,
	pLen,
	Length in bytes,
	Returns the length of buffer required for the GetBeginAnchor\(\) method.
  // The value is placed into the location specified by pLen. The value
  // will include space required for the trailing null character.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)

AD_XMETHOD1(SetBeginAnchor,
	[in\, string],
	objPass,
	aafCharacter *,
	pName,
	Specifies the HTML tag that defines the start of the text,

	This method sets the Begin Anchor property on a HTML clip to the value
  // specified in pName.  A copy is made of the data so the caller
  // retains ownership of the *pName buffer and is responsible for
  // de-allocating it. 
  // 
  // Succeeds if all of the following are true:
  // - the pName pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pName arg is NULL.)

AD_XMETHOD2(GetEndAnchor,
	[in\,string],
	objPass,
	aafCharacter *,
	pName,
	End Anchor Name,

	[in],
	objPass,
	aafInt32,
	bufSize,
	length of the buffer to hold End Anchor Name,

	Writes the End anchor name\, with a trailing null character\, into the
  // pName buffer.  The buffer is allocated by the caller.  The size
  // of the buffer is given by bufSize.  If the property name has not
  // yet been set\, a zero-length string will be written \(that is\,
  // only the trailing null character\).
  // 
  // Caller may call GetEndAnchorBufLen\(\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pname pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to *pName.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pname arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.)

AD_XMETHOD1(GetEndAnchorBufLen,
	[out],
	objPass,
	aafUInt32 *,
	pLen,
	Length in bytes,
	Returns the length of buffer required for the GetEndAnchor\(\) method.
  // The value is placed into the location specified by pLen. The value
  // will include space required for the trailing null character.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)

AD_XMETHOD1(SetEndAnchor,
	[in\, string],
	objPass,
	aafCharacter *,
	pName,
	Specifies the HTML tag that defines the end of the text,

	This method sets the End Anchor property on a HTML clip to the value
  // specified in pName.  A copy is made of the data so the caller
  // retains ownership of the *pName buffer and is responsible for
  // de-allocating it. 
  // 
  // Succeeds if all of the following are true:
  // - the pName pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pName arg is NULL.)

AD_XCLASS_END(Concrete, StoredObject)
