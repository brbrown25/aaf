#c/*************************************************\
#c*													*
#c* Advanced Authoring Format						*
#c*													*
#c* Copyright (c) 1998-1999 Avid Technology, Inc.	*
#c*													*
#c\*************************************************/
#startm .this-module 0
AAFMob\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
#c
#c #import ./AAFObject.exp
AD_HEAD
AD_IDL(//
// The IAAFMob interface is implemented by objects that specify a
// Metadata Object\, which can describe a composition\, essence\, or
// physical media.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//
// AAFRESULT_NOT_INITIALIZED
//   - This object has not yet had Initialize\(\) called on it through
//     this object's primary interface.  Note that IAAFMob is a
//     primary interface for an abstract class\, so it is not
//     appropriate for the Initialize\(\) method to exist in this
//     interface.  The Initialize\(\) method is available through the
//     concrete object's primary interface.
//)
AD_FORWARD_DECLARATION(AAFSegment)
AD_FORWARD_DECLARATION(AAFMobSlot)
AD_FORWARD_DECLARATION(AAFTimelineMobSlot)
AD_FORWARD_DECLARATION(AAFFile)
AD_FORWARD_DECLARATION(EnumAAFMobSlots)
AD_FORWARD_DECLARATION(EnumAAFTaggedValues)
AD_CLASS_UUID(B1A21375, 1A7D, 11d2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A21374, 1A7D, 11d2, BF, 78, 00, 10, 4B, C9, 15, 6D)
AD_XCLASS_BEGIN(Abstract, StoredObject)
AD_XMETHOD1(GetMobID,
			[out],
			objPass,
			aafUID_t *,
			pMobID,
			The unique media object id,

			This method returns the unique Mob ID associated with this mob.
  //
  // Succeeds if all of the following are true:
  // - the pMobID pointer is valid.
  // 
  // If this method fails nothing will be written to *pMobID.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pMobID arg is NULL.)


AD_XMETHOD1(SetMobID,
			[in\, ref],
			objPass,
			aafUID_constref,
			mobID,
			New Mob ID,

  // When a mob is initially created\, the Reference Implementation
  // internally creates a mobID for the new mob.  This method should
  // be used to change the mob's identity to an explicit mobID.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD2(GetName,
			[in\,string],
			objPass,
			aafCharacter *,
			pName,
			Mob Name,

			[in],
			objPass,
			aafInt32,
			bufSize,
			length of the buffer to hold Mob Name,

			Writes the mob name\, with a trailing null character\, into the
  // pName buffer.  The buffer is allocated by the caller.  The size
  // of the buffer is given by bufSize.  If the property name has not
  // yet been set\, a zero-length string will be written \(that is\,
  // only the trailing null character\).
  // 
  // Caller may call GetNameBufLen\(\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pname pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to *pname.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pname arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.)


AD_XMETHOD1(GetNameBufLen,
			[out],
			objPass,
			aafInt32 *,
			pLen,
			Mob Name,

			Returns the length of buffer required for the GetName\(\) and
  // GetMobInfo\(\) methods.  The value is placed into the location
  // specified by pLen. The value will include space required for the
  // trailing null character.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)


AD_XMETHOD1(SetName,
			[in\, string],
			objPass,
			aafCharacter *,
			pName,
			Mob Name,

			This method sets the name property on a mob to the value
  // specified in pName.  A copy is made of the data so the caller
  // retains ownership of the *pName buffer and is responsible for
  // de-allocating it. 
  // 
  // Succeeds if all of the following are true:
  // - the pName pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pName arg is NULL.)


AD_XMETHOD1(GetNumSlots,
			[out],
			objPass,
			aafNumSlots_t *,
			pNumSlots,
			Number of slots,

			This method returns the number of slots contained by this mob.
  //
  // Succeeds if all of the following are true:
  // - the pNumSlots pointer is valid.
  // 
  // If this method fails nothing will be written to *pNumSlots.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pNumSlots arg is NULL.)


AD_XMETHOD1(AppendSlot,
			[in],
			objIn,
			AAFMobSlot,
			pSlot,
			Newly created slot,

			Appends the given mob slot to the mob.
  // 
  // NOTE! Stub only.   Implementation not yet added.
  //
  // Succeeds if all of the following are true:
  // - the pSlot pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pSlot is null.)


AD_XMETHOD1(EnumAAFAllMobSlots,
			[out],
			objOut,
			EnumAAFMobSlots,
			ppEnum,
			Mob Slot Enumeration,

			return an enumeration for all mob slots.  The returned
  // enumerator is AddRef\(\)ed before it is returned.
  // 
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  // 
  // If this method fails nothing will be written to *ppEnum.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEnum is null.)


AD_XMETHOD1(GetModTime,
			[out],
			objPass,
			aafTimeStamp_t *,
			pLastModified,
			Modified Time,

			This method will return the modification time for this mob.
  //
  // Succeeds if all of the following are true:
  // - the pLastModified pointer is valid.
  // 
  // If this method fails nothing will be written to *pLastModified.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLastModified arg is NULL.)


AD_XMETHOD1(SetModTime,
			[in],
			objPass,
			aafTimeStamp_t *,
			pModTime,
			New Modification Time,

			This method sets the modification time on a mob.  The
  // modification time is initially set to the time that the mob
  // was created.  The Reference Implementation does not maintain the
  // modification time every time that a mob has been updated.
  // Therefore\, this method should be called explicitly to change the
  // modification time.
  // 
  // Succeeds if all of the following are true:
  // - the pLastModified pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLastModified arg is NULL.)


AD_XMETHOD1(GetCreateTime,
			[out],
			objPass,
			aafTimeStamp_t *,
			pCreationTime,
			Creation Time,

			This method will return the creation time for this mob.
  //
  // Succeeds if all of the following are true:
  // - the pCreationTime pointer is valid.
  // 
  // If this method fails nothing will be written to *pCreationTime.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pCreationTime arg is NULL.)


AD_XMETHOD2(AppendComment,
			[in\,string],
			objPass,
			aafCharacter *,
			pCategory,
			Comment heading,

			[in\,string],
			objPass,
			aafCharacter *,
			pComment,
			Comment value,

			Creates a user-defined comment and appends it to the specified
  // Mob.  A Mob comment is implemented as a AAFTaggedValue object of type 
  // WCharString.
  // 
  // Succeeds if all of the following are true:
  // - the pCategory pointer is valid.
  // - the pComment pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - either pCategory or pComment args is NULL.)


AD_XMETHOD1(GetNumComments,
			[out],
			objPass,
			aafUInt32 *,
			pNumComments,
			Number  of Mob Comments,

			return total number of comments attached to this mob.
  //
  // Succeeds if all of the following are true:
  // - the pNumComments pointer is valid.
  // 
  // If this method fails nothing will be written to *pNumComments.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pNumComments arg is NULL.)


AD_XMETHOD1(EnumAAFAllMobComments,
			[out],
			objOut,
			EnumAAFTaggedValues,
			ppEnum,
			Mob Comments,

			return the enumeration for all mob comments.  The returned
  // enumerator is AddRef\(\)ed before it is returned.  Mob comments are 
  // implemented as AAFTaggedValue of type WCharString.   The enumerator
  // is implemented as a EnumAAAFTaggedValues.
  // 
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  // 
  // If this method fails nothing will be written to *ppEnum.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEnum is null.)

AD_XMETHOD4(AppendNewSlot,
			[in],
			objIn,
			AAFSegment,
			pSegment,
			Segment to append as slot component,

			[in],
			objPass,
			aafSlotID_t,
			slotID,
			new slot ID,

			[in\, string],
			objPass,
			aafCharacter *,
			pSlotName,
			new slot name,

			[out],
			objOut,
			AAFMobSlot,
			ppNewSlot,
			Newly created slot,

			This method creates a new mob slot with the given property values
  // and appends it to the input mob.
  // 
  // The returned mob slot is AddRef\(\)ed before it is returned.
  //
  // Succeeds if all of the following are true:
  // - the pSegment pointer is valid.
  // - the pSlotName pointer is valid.
  // - the ppNewSlot pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - any of pSegment\, pSlotName\, or ppNewSlot arguments is null.)


AD_XMETHOD6(AppendNewTimelineSlot,
			[in],
			objPass,
			aafRational_t,
			editRate,
			Edit rate property value,

			[in],
			objIn,
			AAFSegment,
			pSegment,
			Segment to append as slot component,

			[in],
			objPass,
			aafSlotID_t,
			slotID,
			new slot ID,

			[in\, string],
			objPass,
			aafCharacter *,
			pSlotName,
			new slot name,

			[in],
			objPass,
			aafPosition_t,
			origin,
			The slot origin,

			[out],
			objOut,
			AAFTimelineMobSlot,
			ppNewSlot,
			Newly created slot,

			This method creates a new timeline mob slot with the given
  // property values and appends it to the input mob.
  // 
  // The returned mob slot is AddRef\(\)ed before it is returned.
  //
  // Succeeds if all of the following are true:
  // - the pSegment pointer is valid.
  // - the pSlotName pointer is valid.
  // - the ppNewSlot pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - any of pSegment\, pSlotName\, or ppNewSlot arguments is null.)


AD_XMETHOD4(GetMobInfo,
			[out],
			objPass,
			aafTimeStamp_t *,
			pLastModified,
			Modified Time,

			[out],
			objPass,
			aafTimeStamp_t *,
			pCreationTime,
			Creation Time,

			[out\, size_is\(bufSize\)\, string],
			objPass,
			aafCharacter *,
			pName,
			Mob Name,

			[in],
			objPass,
			aafInt32,
			bufSize,
			size of the supplied buffer.,

			This method will get all mob property information is a single call.
  //
  // Caller may call GetNameBufLen\(\) to determine the required pName
  // buffer size.
  // 
  // NOTE! Stub only.   Implementation not yet added.
  //
  // Succeeds if all of the following are true:
  // - the pLastModified pointer is valid.
  // - the pCreationTime pointer is valid.
  // - the pName pointer is valid.
  // 
  // If this method fails nothing will be written to *pLastModified\,
  // *pCreationTime\, or *pName.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - any of pLastModified\, pCreationTime\, or pName arguments is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.)

AD_XMETHOD3(OffsetToMobTimecode,
			[in],
			objIn,
			AAFSegment,
			pTcSeg,
			Timecode Segment,

			[in],
			objPass,
			aafPosition_t *,
			pOffset,
			Offset into segment in edit units for that segment's mob slot,

			[out],
			objPass,
			aafTimecode_t *,
			pResult,
			The resulting timecode,

			This method will determine the timecode at the given offset into
  // the given timecode segment\, and will return it in *pResult.  If
  // pTcSeg is NULL\, will search for the slot containing a timecode
  // segment and will use that instead.
  //
  // NOTE! Stub only.   Implementation not yet added.
  //
  // Succeeds if all of the following are true:
  // - the pTcSeg pointer is valid.
  // - the pOffset pointer is valid.
  // - the pResult pointer is valid.
  // - Timecode track exists.
  // 
  // If this method fails nothing will be written to *pResult.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - either pOffset or pResult argument is NULL.
  //
  // AAFRESULT_TIMECODE_NOT_FOUND
  //   - timecode track wasn't found.)


AD_XMETHOD2(FindSlotBySlotID,
			[in],
			objPass,
			aafSlotID_t,
			slotID,
			The requested slot id,

			[out],
			objOut,
			AAFMobSlot,
			ppDestSlot,
			The requested slot,

			The method will find the mob slot for the given slot id.
  //
  // The returned mob slot is AddRef\(\)ed before it is returned.
  //
  // Succeeds if all of the following are true:
  // - the ppDestSlot pointer is valid.
  // - the given slot ID is found.
  // 
  // If this method fails nothing will be written to *ppDestSlot.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppDestSlot arg is NULL.)


AD_XMETHOD2(ChangeRef,
			[in\, ref],
			objPass,
			aafUID_constref,
			oldMobID,
			Old Mob ID reference in source clip,

			[in\, ref],
			objPass,
			aafUID_constref,
			newMobID,
			New Mob ID reference in source clip,

			Finds all Source Clips in the specified Mob that refer to the
  // specified old Mob\, and changes the references to point to the
  // new Mob.
  //
  // This function traverses through the entire structure of the input
  // Mob looking for Source Clips\, and changes the sourceID property
  // on all Source Clips with oldMobID to newMobID.
  //
  // NOTE! Stub only.   Implementation not yet added.
  //
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD4(CloneExternal,
			[in],
			objPass,
			aafDepend_t,
			resolveDependencies,
			Whether to clone dependent mobs,

			[in],
			objPass,
			aafIncMedia_t,
			includeMedia,
			Whether to include media data,

			[in],
			objIn,
			AAFFile,
			pDestFile,
			Destination AAF File,

			[out],
			objOut,
			AAFMob,
			ppDestMob,
			Destination Mob,

			Clones the specified Source Mob\, and optionally all dependent
  // Mobs\, to an external file\, keeping the same MobID.  A pointer
  // to the newly created destination mob is returned in *ppDestMob.
  // 
  // This function clones the specified Source Mob in the source file
  // into a destination Mob\, with the same MobID\, in the destination
  // file.  If resolveDependencies is kFollowDepend\, the function
  // also clones all Mobs referenced by the specified Source Mob.  If
  // includeMedia is kIncludeMedia\, the function also copies the
  // media data associated with the Source Mob\, returns the
  // destination Mob\, and clones all private data.
  //
  // If the media data is not in the file\, the function does not
  // attempt to find it in another file and clone it.  Both AAF files
  // must be open before you call this function and both must have the
  // same AAF Version number.
  //
  // The returned mob is AddRef\(\)ed before it is returned.
  //
  // NOTE! Stub only.   Implementation not yet added.
  //
  // Succeeds if all of the following are true:
  // - the pDestFile pointer is valid.
  // - the ppDestMob pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - either pDestFile or ppDestMob arguments is NULL.)


AD_XMETHOD2(Copy,
			[in\,string],
			objPass,
			aafCharacter *,
			pDestMobName,
			Optional Input. The name to be assigned to the new copy of the
	// Mob.  The destMobName argument is optional. Specify a NULL
	// value if no destination Mob name is desired.,

			[out],
			objOut,
			AAFMob,
			ppDestMob,
			Destination Mob,

			This function copies the specified Mob into a destination Mob in
  // the same AAF file. The new Mob is returned through the destMob
  // parameter. The function gives the destination Mob a new MobID and
  // the name specified in the destMobName parameter. The function
  // also copies all private data.
  // 
  // The returned mob is AddRef\(\)ed before it is returned.
  //
  // NOTE! Stub only.   Implementation not yet added.
  //
  // Succeeds if all of the following are true:
  // - the pDestMobName pointer is valid.
  // - the ppDestMob pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - either pDestMobName or pDestMob arguments is NULL.)
AD_XCLASS_END(Abstract, StoredObject)
