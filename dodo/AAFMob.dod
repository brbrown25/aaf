#startm .this-module 0
AAFMob\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
#c
#import ./AAFUnitTest.exp
#import ./AAFObject.exp
AD_HEAD
/******************************************\
*                                          *
* Advanced Authoring Format                *
*                                          *
* Copyright (c) 1998 Avid Technology, Inc. *
* Copyright (c) 1998 Microsoft Corporation *
*                                          *
\******************************************/



AD_FORWARD_DECLARATION(AAFSegment)
AD_FORWARD_DECLARATION(AAFMobSlot)
AD_FORWARD_DECLARATION(AAFFile)
AD_FORWARD_DECLARATION(EnumAAFMobSlots)
AD_FORWARD_DECLARATION(EnumAAFMobComments)


AD_CLASS_UUID(B1A21375, 1A7D, 11d2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A21374, 1A7D, 11d2, BF, 78, 00, 10, 4B, C9, 15, 6D)
AD_CLASS_BEGIN

AD_METHOD1(IsAPrimaryMob,
[retval][out], aafBool *, retval, Set to true if this is a primary mob,
This method will return true if this mob is a primary mob. If an error occurs
  // the retval will be false.)

AD_METHOD1(GetMobID,
[out], aafUID_t *, pMobID, The unique media object id,
This method returns the unique Mob ID associated with this mob.)

AD_METHOD1(GetName,
[in\,out], aafString_t *, name, Mob Name,
This method will copy the mob name into the given aafString_t.)

AD_METHOD1(GetEditRate,
[out\,retval], aafRational_t *, editRate, Edit rate property value,
This method will get the edit rate for this mob.)

AD_METHOD1(GetModTime,
[out], aafTimeStamp_t *, lastModified, Modified Time,
This method will return the modification time for this mob.)

AD_METHOD1(GetCreateTime,
[out], aafTimeStamp_t *, creationTime, Creation Time,
This method will return the creation time for this mob.)

AD_METHOD3(GetMobInfo,
[in\,out], aafString_t *, name, Mob Name,
[out], aafTimeStamp_t *, lastModified, Modified Time,
[out], aafTimeStamp_t *, creationTime, Creation Time,
This method will all mob property information is a single call.)

AD_METHOD1(GetNumTracks,
[out], aafNumTracks_t *, numTracks, Number of tracks,
This method returns the number of tracks contained by this mob.)

AD_METHOD1(GetNumSlots,
[out], aafNumSlots_t *, numSlots, Number of slots,
This method returns the number of slots contained by this mob.)

// trr: does this method belong in the public AAF interfaces or is it part of an older omf api?
AD_METHOD1(GetNumComments,
[out], aafString_t	*, numComments, Number of comments,
Iterates through the specified Mob to retrieve the next user\-defined comment.)

AD_METHOD3(SetNewProps,
[in], aafBool, isMasterMob, Whether or not this is a Master Mob,
[in\,ref], aafString_t *, name, Mob Name \(optional\),
[in], aafBool, isPrimary, Whether or not this is a primary mob,
This method is called to create the new properties on a mob.)

AD_METHOD1(SetModTime,
[in\, ref], aafTimeStamp_t *, modTime, New Modification Time,
This method sets the modification time on a mob.  The
  // modification time is initially set to the time that the mob
  // was created.  The Toolkit does not maintain the modification
  // time every time that a mob has been updated.  Therefore\, this
  // method should be called explicitly to change the modification
  // time.)

AD_METHOD1(SetPrimary,
[in], aafBool, isPrimary, Whether or not the mob is a primary mob,
This method is used to either add a mob to the HEAD Primary Mob
  // index or to take it out of the index.)

AD_METHOD1(SetIdentity,
[in\, ref], aafUID_t *, mobID, New Mob ID,
When a mob is initially created\, the Toolkit internally creates 
  // a mobID for the new mob.  This method should be used to change
  // the mob's identity to an explicit mobID.)

AD_METHOD1(SetName,
[in\, ref], aafString_t *, name, Mob Name,
This method sets the name property on a mob.)

AD_METHOD1(SetEditRate,
[in], aafRational_t, editRate, Edit rate property value,
This method will set the edit rate for this mob.)

// skip virtual aafErr_t Verify(char *buf, validateData_t *result);
// What doe's this do?

AD_METHOD2(IsMobKind,
[in], aafMobKind_t, mobKind, A valid mob kind.,
[out\,retval], aafBool *, result, True is matches given mobKind,
This method returns false by default. This method must be overridden by
  // each subclass to return true for the the corresponding input mobKind.)


AD_METHOD3(AppendNewSlot,
[in], aafRational_t, editRate, Edit rate property value,
[in\, ref], AAFSegment *, segment, Segment to append as slot component,
[out], AAFMobSlot **, newSlot, Newly created slot,
This method creates a new mob slot with the given property
  // values\, and appends it to the input mob.  Since the Toolkit
  // attempts to enforce bottom up creation of mobs\, the slot segment
  // must be passed in as an argument.)

AD_METHOD6(AppendNewTrack,
[in], aafRational_t, editRate, Edit rate property value,
[in\, ref], AAFSegment *, segment, Segment to append as track component,
[in], aafPosition_t, origin, Track Origin,
[in], aafTrackID_t, trackID, The Track ID,
[in], aafString_t *, trackName, Track Name \(optional\),
[out], AAFMobSlot **, newTrack, Newly created track,
This method creates a new mob slot with the given property values and appends it to the input mob.)

AD_METHOD1(GetAllMobSlots,
[out\,retval], AD_AAFTYPES\(EnumAAFMobSlots\) **, ppEnum, Mob Slot Enumeration,
return an enumeration for all mob slots.)

AD_METHOD2(AppendComment,
[in\,ref], aafString_t *, category, Comment heading,
[in\,ref], aafString_t *, comment, Comment value,
Creates a user-defined comment and appends it to the specified Mob.)

AD_METHOD1(GetNumComments,
[out\,retval], aafUInt32 *, pEnum, Number  of Mob Comments,
return total number of comments attached to this mob.)

AD_METHOD1(GetComments,
[out\,retval], AD_AAFTYPES\(EnumAAFMobComments\) **, ppEnum, Mob Comments,
return the enumeration for all mob comments..)


AD_METHOD3(OffsetToMobTimecode,
[in\,ref], AAFSegment*, tcTrackID, Current track,
[in\,ref], aafPosition_t *, offset, Offset into segment,
[out], aafTimecode_t *, result, The resulting timecode,
This method will all mob property information is a single call.)

AD_METHOD2(FindTrackByTrackID,
[in], aafTrackID_t, trackID, The requested track id,
[out], AAFMobSlot **, destTrack, The requested track,
The method will find the mob slot for the given track id.)

// trr: Does this method only work for AAFSourceMobs? If so we should probably move
// it the AAFSourceMob.dod.
AD_METHOD3(OffsetToTimecode,
[in\,ref], aafTrackID_t*, trackID, Track ID of the track in the input mob,
[in], aafPosition_t *, offset, Offset into the given track,
[out], aafTimecode_t *, result, The resulting timecode,
Given a master mob or source mob\, track ID of a track in a mob
  // and an offset into the track\, this function searches for the
  // tape mob and returns the associated timecode.)

// trr: Does this method only work for AAFSourceMobs? If so we should probably move
// it the AAFSourceMob.dod.
AD_METHOD3(TimecodeToOffset,
[in], aafTimecode_t, timecode, The timecode value,
[in], aafTrackID_t, trackID, Track ID of track in source mob,
[out], aafFrameOffset_t *, result, Resulting offset in source track,
This function takes a timecode and source mob and track as input
  // and returns the position in the track that corresponds to the
  // timecode value.  This is accomplished by searching for the tape
  // mob with the timecode and calculating the offset in the given
  // source mob.)



AD_METHOD2(Copy,
[in], aafString_t *, destMobName, Optional Input. The name to be assigned to the new copy of the Mob.
  // The destMobName argument is optional. Specify a NULL value if no desti\-
  // nation Mob name is desired.,
[out], AAFMob **, destMob, Destination Mob,
  // This function copies the specified Mob into a destination Mob in the same
  // OMF file. The new Mob is returned through the destMob parameter. The func\-
  // tion gives the destination Mob a new MobID and the name specified in the
  // destMobName parameter. The function also copies all private data.)

AD_METHOD2(ChangeRef,
[in\,ref], aafUID_t *, oldMobID, Old Mob ID reference in source clip,
[in\,ref], aafUID_t *, newMobID, New Mob ID reference in source clip,
Finds all Source Clips in the specified Mob that refer to the specified old Mob\,
  // and changes the references to point to the new Mob.
  // @commThis function traverses through the entire structure of the input Mob looking
  // for Source Clips\, and changes the sourceID property on all Source Clips with
  // oldMobID to newMobID.)

AD_METHOD6(CopyExternal,
[in], aafDepend_t, resolveDependencies, Whether to copy dependent mobs,
[in], aafIncMedia_t, includeMedia, Whether to include media data,
[in\,ref], aafString_t *, destMobName, Destination Mob Name,
[in\,ref], AAFFile *, destFile, Destination File,
[out], AAFObject **, destMedia, Destination Media Data,
[out], AAFMob **, destMob, Destination Mob,
Copies the specified Mob and optionally all dependent Mobs to an external
  // file\, creating a new MobID for the specified Mob but retaining the MobIDs for
  // the dependent Mobs.
  // @commThis function copies the specified Mob in the source file into a destination Mob
  // in the destination file with the specified destMobName. If resolveDependencies is
  // kFollowDepend\, the function also clones all Mobs referenced by the speci\-
  // fied Source Mob. The function creates a new MobID for the specified Mob\, but
  // clones all other dependent Mobs \(they retain the same MobID\).
  // If includeMedia is kIncludeMedia\, the function also copies the media data
  // associated with the specified Mob. The function returns the destination Mob
  // \(and its destination media data object\, if requested\) and copies all private data.
  // If the media data is not in the file\, the function does not attempt to find it in
  // another file and copy it.
  // Both AAF files must be open before you call this function and both must have
  // the same AAF Version number.)

AD_METHOD4(CloneExternal,
[in], aafDepend_t, resolveDependencies, Whether to clone dependent mobs,
[in], aafIncMedia_t, includeMedia, Whether to include media data,
[in\,ref], AAFFile *, destFile, Destination AAF File,
[out], AAFMob **, destMob, Destination Mob,
Clones the specified Source Mob\, and optionally all dependent Mobs\, to an
  // external file\, keeping the same MobID.
  // @commThis function clones the specified Source Mob in the source file into a destina\-
  // tion Mob\, with the same MobID\, in the destination file. If resolveDependencies is
  // kFollowDepend\, the function also clones all Mobs referenced by the speci\-
  // fied Source Mob.
  // If includeMedia is kIncludeMedia\, the function also copies the media data
  // associated with the Source Mob\, returns the destination Mob\, and clones all
  // private data.
  // If the media data is not in the file\, the function does not attempt to find it in
  // another file and clone it.
  // Both AAF files must be open before you call this function and both must have
  // the same AAF Version number.)

AD_OVERRIDE(.method-Test)

AD_OVERRIDE(.method-Delete)
  // @commDeletes the entire Mob structure \(the MOBJ object and all its contained objects\)
  // and deletes the entry from the Header.

AD_CLASS_END


////////////////////////////////////////////////////////////////////////////////
