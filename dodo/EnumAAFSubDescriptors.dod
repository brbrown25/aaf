#c *********************************************************************
#c
#c $Id: EnumAAFSubDescriptors.dod,v 1.1 2006/03/24 17:48:57 jlow Exp $ $Name:  $
#c
#c The contents of this file are subject to the AAF SDK Public
#c Source License Agreement (the "License"); You may not use this file
#c except in compliance with the License.  The License is available in
#c AAFSDKPSL.TXT, or you may obtain a copy of the License from the AAF
#c Association or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.
#c
#c The Original Code of this file is Copyright 1998-2004, Licensor of the
#c AAF Association.
#c
#c The Initial Developer of the Original Code of this file and the
#c Licensor of the AAF Association is Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
EnumAAFSubDescriptors\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(///
/// This interface is for the enumerator which is generated by
/// IAAFEssenceDescriptor and is used for enumerating over IAAFSubDescriptors
/// attached to EssenceDescriptor attached to an AAFSourceMob.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_FORWARD_DECLARATION(AAFSubDescriptor)

AD_CLASS_UUID(08406d65, 14d9, 4681, 83, 46, 8a, 34, 2c, 9b, 8b, a6)

AD_DEFAULT_UUID(5b2f57e7, 7170, 445d, b3, 8b, 6f, 02, db, 84, f4, d3)
AD_XCLASS_BEGIN(Concrete, Transient)
AD_XMETHOD1(NextOne,
			[out\,retval],
			objOut,
			AAFSubDescriptor,
			ppSubDescriptor,
			The Next SubDescriptor,
			Enumerates to the next element in the enumerators list. The
  /// caller is responsible for properly releasing the returned pointer
  /// when it is no longer needed.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppSubDescriptor pointer is valid.
  /// - there are SubDescriptor objects remaining to be returned.
  /// 
  /// If this method fails nothing is written to *ppSubDescriptor.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppSubDescriptor is null.
  ///
  /// AAFRESULT_NO_MORE_OBJECTS
  ///   - no SubDescriptors remaining to be returned.)


AD_X2METHOD3(Next,

			[in],
			objPass,
			aafUInt32,
			count,
			number of subdescriptors requested,
			xxx,
			xxx,

			[out\, size_is\(count\)\, length_is\(*pFetched\)],
			objOutArray,
			AAFSubDescriptor,
			ppSubDescriptors,
			array to receive subdescriptors,
			count,
			*pFetched,

			[out\,ref],
			objPass,
			aafUInt32 *,
			pFetched,
			number of actual SubDescriptors fetched into ppSubDescriptors array,
			xxx,
			xxx,

			Enumerates the next count elements \(AAFSubDescriptor pointers\) in 
  /// the enumerator's list\, returning them in the given array along
  /// with the actual number of enumerated elements in pcFetched. The
  /// caller is responsible for properly releasing the returned pointers.
  /// 
  /// Succeeds if all of the following are true:
  /// - The ppSubDescriptors pointer is valid.
  /// - The pNumFetched pointer is valid. If count is 1\, pNumFetched can be NULL.
  /// - There are SubDescriptor objects remaining to be returned.
  /// 
  /// If this method fails nothing is written to *ppSubDescriptors or
  /// pNumFetched.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - either ppSubDescriptors or pNumFetched is null.)


AD_METHOD1(Skip,
		   [in],
		   aafUInt32,
		   count,
		   Number of elements to skip,
		   Instructs the enumerator to skip the next count elements in the
  /// enumeration so that the next call to EnumAAFSubDescriptors::Next will
  /// not return those elements.
  /// 
  /// Succeeds if all of the following are true:
  /// - count is less than or equal to the number of remaining objects.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\\\, it will return the first one
  /// encountered in the order given below:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded.
  ///
  /// AAFRESULT_NO_MORE_OBJECTS
  ///   - count exceeded number of remaining objects.)


AD_METHOD0(Reset,
		   Instructs the enumerator to position itself at the beginning of
  /// the list of elements.
  /// 
  /// Always succeeds.
  /// 
  /// This method will return the following code:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(Clone,
			[out\,retval],
			objOut,
			EnumAAFSubDescriptors,
			ppEnum,
			new enumeration,
			Creates another subdescriptor enumerator with the same state as the
  /// current enumerator to iterate over the same list. This method
  /// makes it possible to record a point in the enumeration sequence
  /// in order to return to that point at a later time.
  /// Note: The caller must release this new enumerator separately from
  /// the first enumerator.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.)
AD_XCLASS_END(Concrete, Transient)
