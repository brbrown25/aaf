#c *********************************************************************
#c
#c $Id: EnumAAFCodecFlavours.dod,v 1.9 2004/02/27 14:26:18 stuart_hc Exp $ $Name:  $
#c
#c The contents of this file are subject to the AAF SDK Public
#c Source License Agreement (the "License"); You may not use this file
#c except in compliance with the License.  The License is available in
#c AAFSDKPSL.TXT, or you may obtain a copy of the License from the AAF
#c Association or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.
#c
#c The Original Code of this file is Copyright 1998-2004, Licensor of the
#c AAF Association.
#c
#c The Initial Developer of the Original Code of this file and the
#c Licensor of the AAF Association is Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
EnumAAFCodecFlavours\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(//
// An object which allows iteration over all of the flavour codes
// which a given codec is able to handle.
//
// Flavours are used when a single codec can support multiple formats.
// An Example would be a codec which would accept a \"resolution ID\"
// for a particular manufacturer and set up all of the parameters.
// When a new resolution ID is released\, then a new codec plugin
// would give users the ability to use the new resolutions without
// upgrading the application.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)
AD_CLASS_UUID(AB4D9F11, DD69, 11d2, 80, 9C, 00, 60, 08, 14, 3E, 6F)

AD_DEFAULT_UUID(AB4D9F12, DD69, 11d2, 80, 9C, 00, 60, 08, 14, 3E, 6F)
AD_XCLASS_BEGIN(Concrete, Transient)
AD_XMETHOD1(NextOne,
			[out\,retval],
			objPass,
			aafUID_t *,
			pAAFCodecFlavour,
			The Next flavour code,
     Enumerates to the next element in the enumerators list. The
  // caller is responsible for passing in a pointer to an aafUID_t\,
  // and retains control over the pointer.
  //
  // This is a just simplified version of the Next method. )


AD_XMETHOD3(Next,
			[in], objPass, aafUInt32, count, number of AAFPluggableDefs requested,
			[out\, size_is\(count\)\, length_is\(*pFetched\)],
			objPass, aafUID_t *, pAAFCodecFlavours, array to receive flavour codes,
			[out\,ref], objPass, aafUInt32 *, pFetched,
			number of actual flavour IDs fetched into pAAFCodecFlavours array,
     Enumerates the next count elements \(codec flavour IDs\) in
  // the enumerator's list\, returning them in the given array along
  // with the actual number of enumerated elements in pFetched. The
  // caller is responsible for passing in a pointer to an array of
  // aafUID_t\, and retains control over the pointer.)


AD_METHOD1(Skip,
		   [in], aafUInt32, count, Number of elements to skip,
     Instructs the enumerator to skip the next count elements in the
  // enumeration so that the next call to EnumAAFCodecFlavours::Next
  // will not return those elements.)


AD_METHOD0(Reset,
     Instructs the enumerator to position itself at the beginning of
  // the list of elements.
  //
  // There is no guarantee that the same set of elements will be
  // enumerated on each pass through the list\, nor will the elements
  // necessarily be enumerated in the same order. The exact behavior
  // depends on the collection being enumerated.)


AD_XMETHOD1(Clone,
			[out\,retval],
			objOut,
			EnumAAFCodecFlavours,
			ppEnum,
			new enumeration,
     Creates another EnumAAFCodecFlavours enumerator with the same
  // state as the current enumerator to iterate over the same
  // list.  This method makes it possible to record a point in the
  // enumeration sequence in order to return to that point at a later
  // time.
  // 
  // The caller must release this new enumerator separately from the
  // first enumerator.)
AD_XCLASS_END(Concrete, Transient)
