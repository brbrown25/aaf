#startm .this-module 0
AAFModule\
#endm
#c
AD_IDL(\  //***********************************************************
  //
  // Factory functions for AAF files:
  // 
  // In addition to the specific error results listed for each function\,
  // all factory functions may also return one of the following
  // values:
  // 
  // AAFRESULT_NOMEMORY
  //   - insufficient system memory is available to perform the
  //     operation.
  //)

AD_MODULE_BEGIN(AAF, API)

AD_CPP_QUOTE(\  //***********************************************************)
AD_CPP_QUOTE(\  // Factory functions for AAF files:.)
AD_CPP_QUOTE(\  //***********************************************************)

AD_XFUNCTION3(AAFFileOpenExistingRead,

			[in\, string],
			objPass,
			wchar_t *,
			pFileName,
			Null-terminated string containing name of filesystem file to be
    // opened for reading.  Filename must be in a form that would be
    // acceptable to StgOpenStorage\(\) for this platform.,

			[in],
			objPass,
			aafUInt32,
			modeFlags,
			File open mode flags.  May be any of the following ORed together.
    // All other bits must be set to zero.
    //  - kAAFFileModeUnbuffered - to indicate buffered mode.  Default
    //    is buffered.,

			[out],
			objOut,
			AAFFile,
			ppFile,
			Pointer to buffer to receive pointer to new file.,


			Creates an object associated with with an existing
  // filesystem file that contains data which is only to be read.
  // Does the following:
  // - Opens the existing named file in the filesystem for reading.
  // - Associates an object with that filesystem file.
  // - Places the object into the Open-read-only state.
  // - This AAFFile object then can be used as the root of the
  //   containment tree representing all AAF objects contained within
  //   the file.
  //
  // Succeeds if:
  // - The pFileName argument is valid.
  // - Only valid flags have been specified.
  // - A valid combination of flags has been specified.
  // - The named file exists in the filesystem.
  // - The named filesystem file is readable.
  // - The named file represents itself as a valid AAF file.  Even if
  //   this succeeds\, it is not guaranteed that the named file is in
  //   fact a valid AAF file.
  //
  // This function will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - the pFileName pointer arg is NULL.
  //
  // AAFRESULT_BAD_FLAGS
  //   - one or more illegal flags were specified.
  //
  // AAFRESULT_BAD_FLAG_COMBINATION
  //   - illegal combination of otherwise valid flags was specified.
  //
  // AAFRESULT_FILE_NOT_FOUND
  //   - The named file does not exist in the filesystem.
  //
  // AAFRESULT_NOT_READABLE
  //   - The named file cannot be read.
  //
  // AAFRESULT_NOT_AAF_FILE
  //   - The named file does not claim to be a valid AAF file.)


AD_XFUNCTION4(AAFFileOpenExistingModify,

			[in\, string],
			objPass,
			wchar_t *,
			pFileName,
			Null-terminated string containing name of filesystem file to be
    // opened for modification.  Filename must be in a form that would
    // be acceptable to StgOpenStorage\(\) for this platform.,

			[in],
			objPass,
			aafUInt32,
			modeFlags,
			File open mode flags.  May be any of the following ORed together.
    // All other bits must be set to zero.
    //  - kAAFFileModeUnbuffered - to indicate unbuffered mode.
    //    Default is buffered.
    //  - kAAFFileModeRevertable - to indicate that Revert is possible
    //    on this file \(for all changes except those to essence\).,

			[in],
			objPass,
			aafProductIdentification_t *,
			pIdent,
			Identification of the application which is modifying this file.,

			[out],
			objOut,
			AAFFile,
			ppFile,
			Pointer to buffer to receive pointer to new file.,


			Creates an object associated with with an existing
  // filesystem file that contains data which is to be read and
  // written.  Associates the given identification with it.
  // Does the following:
  // - Opens the existing named file in the filesystem for reading and
  //   writing.
  // - Associates an object with that filesystem file.
  // - Places the object into the Open-read-write  state.
  // - This AAFFile object then can be used as the root of the
  //   containment tree representing all AAF objects contained within
  //   the file.
  //
  // Succeeds if:
  // - This object is currently Closed.
  // - The pFileName argument is valid.
  // - The pIdent argument is valid.
  // - Only valid flags have been specified.
  // - A valid combination of flags has been specified.
  // - The named file exists in the filesystem.
  // - The named filesystem file is readable.
  // - The named filesystem file is writable.
  // - The named file represents itself as a valid AAF file.  Even if
  //   this succeeds\, it is not guaranteed that the named file is in
  //   fact a valid AAF file.
  //
  // This function will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - either pFileName or pIdent pointer argument is NULL.
  //
  // AAFRESULT_BAD_FLAGS
  //   - one or more illegal flags were specified.
  //
  // AAFRESULT_BAD_FLAG_COMBINATION
  //   - illegal combination of otherwise valid flags was specified.
  //
  // AAFRESULT_FILE_NOT_FOUND
  //   - The named file does not exist in the filesystem.
  //
  // AAFRESULT_NOT_READABLE
  //   - The named file cannot be read.
  //
  // AAFRESULT_NOT_WRITEABLE
  //   - The named file cannot be written.
  //
  // AAFRESULT_NOTAAFFILE
  //   - The named file is not a valid AAF file.)


AD_XFUNCTION4(AAFFileOpenNewModify,

			[in\, string],
			objPass,
			wchar_t *,
			pFileName,
			Null-terminated string containing name of filesystem file to be
    // opened for modification.  Filename must be in a form that would
    // be acceptable to StgOpenStorage\(\) for this platform.,

			[in],
			objPass,
			aafUInt32,
			modeFlags,
			File open mode flags.  May be any of the following ORed together.
    // All other bits must be set to zero.
    //  - kAAFFileModeUnbuffered - to indicate unbuffered mode.
    //    Default is buffered.
    //  - kAAFFileModeRevertable - to indicate that Revert is possible
    //    on this file \(for all changes except those to essence\).,

			[in],
			objPass,
			aafProductIdentification_t *,
			pIdent,
			Identification of the application which is creating this file.,

			[out],
			objOut,
			AAFFile,
			ppFile,
			Pointer to buffer to receive pointer to new file.,


			Creates an object associated with with a new
  // filesystem file that contains data which is to be read and
  // written.  Associates the given identification with it.
  // Does the following:
  // - Creates a new file in the filesystem with the given name.
  // - Opens the filesystem file for reading and writing.
  // - Associates this object with that filesystem file.
  // - Places this object into the Open state.
  // - This AAFFile object then can be used as the root of the
  //   containment tree representing all AAF objects contained within
  //   the file.
  //
  // Succeeds if:
  // - The pFileName argument is valid.
  // - The pIdent argument is valid.
  // - Only valid flags have been specified.
  // - A valid combination of flags has been specified.
  // - The named file does not exists in the filesystem.
  // - There is sufficient space in the filesystem to create the file.
  //
  // This function will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - either pFileName or pIdent pointer argument is NULL.
  //
  // AAFRESULT_BAD_FLAGS
  //   - one or more illegal flags were specified.
  //
  // AAFRESULT_BAD_FLAG_COMBINATION
  //   - illegal combination of otherwise valid flags was specified.
  //
  // AAFRESULT_FILE_EXISTS
  //   - The named file already exists in the filesystem.
  //
  // AAFRESULT_INSUFFICIENT_SPACE
  //   - There is insufficient space in the filesystem to create this
  //     file.)


AD_XFUNCTION2(AAFFileOpenTransient,
			[in],
			objPass,
			aafProductIdentification_t *,
			pIdent,
			Identification which is to be associated with this file.,

			[out],
			objOut,
			AAFFile,
			ppFile,
			Pointer to buffer to receive pointer to new file.,


			Creates an object associated with with a transient file\,
  // meaning that it is not associated with any filesystem file but
  // may still be used to contain AAF objects as if it was associated
  // with a filesystem file.  Associates the given identification with
  // this file.
  //
  // Transient files are never considered Revertable.
  //
  // NOTE! Stub only.   Implementation not yet added.
  //
  // Succeeds if:
  // - This object has already been Initialize\(\)d.
  // - The pIdent argument is valid.
  // - This object is currently closed.
  //
  // This function will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_ALREADY_OPEN
  //   - This object is already open.
  //
  // AAFRESULT_NULL_PARAM
  //   - the pIdent pointer argument is NULL.)
AD_MODULE_END
