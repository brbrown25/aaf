#c/*************************************************\
#c*													*
#c* Advanced Authoring Format						*
#c*													*
#c* Copyright (c) 1998-1999 Avid Technology, Inc.	*
#c*													*
#c\*************************************************/
#startm .this-module 0
EnumAAFMobs\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(//
// This interface is for the enumerator which is generated by
// IAAFHeader and is used for enumerating over IAAFMobs attached to
// the content storage attached to the header.  The call to generate
// this enumerator takes a mob kind [see below]\, and enumerates over
// a subset of the mobs attached to the content storage.  This is
// because importing programs often import starting with the source
// mobs\, and ending with the composition mobs\, so that no dangling
// references must be maintained in their internal representation.
// The possible values for mobKind are:
//  kCompMob   -- Iterate over AAFCompositionMob.
//  kMasterMob -- iterate over AAFMasterMob.
//  kFileMob   -- Iterate over AAFSourceMob with attached
//                AAFFileDescriptor. 
//  kTapeMob   -- Iterate over AAFSourceMob with attached
//                AAFTapeDescriptor.
//  kFilmMob   -- Iterate over AAFSourceMob with attached
//                AAFFilmDescriptor.
//  kAllMob    -- Iterate over all IAAMob.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)
AD_FORWARD_DECLARATION(AAFMob)
AD_CLASS_UUID(B1A21387, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A21386, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)
AD_XCLASS_BEGIN(Concrete, Transient)
AD_XMETHOD1(NextOne,
			[out\, retval],
			objOut,
			AAFMob,
			ppMob,
			The Next Mob,
			Enumerates to the next element in the enumerators list. The
  // caller is responsible for properly releasing the returned pointer
  // when it is no longer needed.
  // 
  // Succeeds if all of the following are true:
  // - the ppMob pointer is valid.
  // - there are Mob objects remaining to be returned.
  // 
  // If this method fails nothing is written to *ppMob.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppMob is null.
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - no Mobs remaining to be returned.)


AD_X2METHOD3(Next,
			[in],
			  objPass,
			  aafUInt32,
			  count,
			  number of mobs requested,
			  xxx,
			[out\, size_is\(count\)\, length_is\(*pNumFetched\)],
			  objOutArray,
			  AAFMob,
			  ppMobs,
			  array to receive mobs,
			  count,
			[out],
			  objPass,
			  aafUInt32 *,
			  pNumFetched,
			  number of actual Mobs fetched into ppMobs array,
			  xxx,
			  Enumerates the next count elements \(AAFMob pointers\) in the
  // enumerator's list\, returning them in the given array along with
  // the actual number of enumerated elements in pNumFetched. The caller
  // is responsible for properly releasing the returned pointers.
  // 
  // Succeeds if all of the following are true:
  // - the ppMobs pointer is valid.
  // - the pNumFetched pointer is valid.
  // - there are Mob objects remaining to be returned.
  // 
  // If this method fails nothing is written to *ppMobs or
  // pNumFetched.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - either ppMob or pNumFetched is null.)


AD_XMETHOD1(Skip,
			[in],
			objPass,
			aafUInt32,
			count,
			Number of elements to skip,
			Instructs the enumerator to skip the next count elements in the
  // enumeration so that the next call to EnumAAFMobs::Next will not
  // return those elements.
  // 
  // Succeeds if all of the following are true:
  // - count is less than or equal to the number of remaining objects.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - count exceeded number of remaining objects.)


AD_METHOD0(Reset,
		   Instructs the enumerator to position itself at the beginning of
  // the list of elements.
  // 
  // Always succeeds.
  // 
  // This method will return the following code:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(Clone,
			[out\, retval],
			objOut,
			EnumAAFMobs,
			ppEnum,
			new enumeration,
			Creates another mob enumerator with the same state as the current
  // enumerator to iterate over the same list. This method makes it
  // possible to record a point in the enumeration sequence in order
  // to return to that point at a later time.
  //
  // Note: The caller must release this new enumerator separately from
  // the first enumerator.
  // 
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEnum is null.)
AD_XCLASS_END(Concrete, Transient)
