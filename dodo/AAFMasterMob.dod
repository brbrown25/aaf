#startm .this-module 0
AAFMasterMob\
#endm
#c
#startm .parent-module 0
AAFMob\
#endm
#c
#import ./AAFObject.exp
#import ./AAFMob.exp
#import ./AAFMobPrivate.exp
#import ./AAFSearchSource.exp
AD_HEAD
AD_IDL(//
// The IAAFMasterMob interface is implemented by objects which provide
// access to the File Source Mobs and EssenceData objects.  The Master
// Mob object is used to provide a level of indirection for accessing
// Source Mobs from Composition Mobs.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//
// AAFRESULT_NOT_INITIALIZED
//   - This object has not yet had Initialize\(\) called on it through
//     this object's primary interface.
//)
AD_FORWARD_DECLARATION(AAFSourceClip)
AD_FORWARD_DECLARATION(AAFSourceMob)
AD_FORWARD_DECLARATION(AAFComponent)
AD_FORWARD_DECLARATION(AAFDataDef)
AD_FORWARD_DECLARATION(AAFFindSourceInfo)
AD_CLASS_UUID(b1a21373, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)

AD_DEFAULT_UUID(b1a21372, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
AD_CLASS_BEGIN
AD_XMETHOD5(AddMasterSlot,
			[in],
			  objPass,
			  aafUID_t *,
			  pDataDef,
    // Data kind of new slot.  Requires a data kind valid for a media
	// stream. Valid data kinds are:
    // - DDEF_Video
    // - DDEF_Audio,
			[in],
			  objPass,
			  aafSlotID_t,
			  sourceSlotID,
			  Slot ID of the Source Mob slot to be added to the Master Mob,
			[in],
			  objIn,
			  AAFSourceMob,
			  pSourceMob,
			  Source Mob containing the slot to be added to the Master Mob,
			[in],
			  objPass,
			  aafSlotID_t,
			  masterSlotID,
			  SlotID assigned to the new Master Mob slot,
			[in\, string],
			  objPass,
			  wchar_t *,
			  pSlotName,
			  Name to assign to new slot in Master Mob,
			This function adds a slot to the specified Master Mob that
  // references the specified a slot in the specified Source Mob. The
  // new slot in the Master Mob contains a Source Clip that specifies
  // the Source Mob in its source reference properties.  Typically this
  // is done automatically by passing the Master Mob handle to
  // AAFMedia::Create\, but this function allows you to add it later.
  //
  // Note: If pSlotName is passed in with zero length\, then the
  // slot is not assigned a name.  Slot names are not used by the
  // SDK\, and exist only so the user can name slots.
  // 
  // Succeeds if all of the following are true:
  // \(more conditions here\)
  // 
  // If this method fails no state is changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - One or more of the following parameters are NULL pSourceMob\,
  //     pDataDef\, and pSlotName.
  //
  // AAFRESULT_INVALID_DATAKIND
  //   - The data kind of the source MOB slot to be added to the Master
  //     Mob does not match what is specfied in pDataDef.
  //
  // AAFRESULT_SLOT_NOTFOUND
  //   - The specified Source Mob slot was not found.
  //
  // AAFRESULT_SLOT_EXISTS
  //   - The specified Master slot ID already exists.)


AD_XMETHOD3(GetTapeName,
			[in],
			  objPass,
			  aafInt32,
			  masterSlotID,
			  SlotID of the Master Mob slot,
			[out\, size_is\(bufSize\)\, string],
			  objPass,
			  wchar_t *,
			  pTapeName,
			  The returned name,
			[in],
			  objPass,
			  aafInt32,
			  bufSize,
			  the size of the pTapeName buffer,
			Finds the videotape Source Mob associated with a Master Mob slot
  // and writes the name of the videotape\, which is stored in the
  // Mobs Name property\, into the pTapeName buffer.  The buffer is
  // allocated by the caller.  The size of the buffer is given by
  // bufSize.  If the property name has not yet been set\, a
  // zero-length string will be written \(that is\, only the trailing
  // null character\).
  // 
  // Caller may call GetTapeNameBufLen\(\) to determine the required
  // buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pTapeName pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to *pTapeName.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pTapeName arg is NULL.
  //
  // AAFRESULT_SLOT_NOTFOUND
  //   - The specified Master Slot was not found.
  //
  // AAFRESULT_NOT_TAPEMOB
  //   - The specified Master Slot does not contain a Tape MOB.
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.)


AD_XMETHOD2(GetTapeNameBufLen,
			[in],
			  objPass,
			  aafInt32,
			  masterSlotID,
			  SlotID of the Master Mob slot,
			[out],
			  objPass,
			  aafInt32 *,
			  pLen,
			  required buffer length,
			Returns the length of buffer required for the GetTapeName\(\)
  // method.  The value is placed into the location specified by pLen.
  // The value will include space required for the trailing null
  // character.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.
  //
  // AAFRESULT_SLOT_NOTFOUND
  //   - The specified Master Slot was not found.
  //
  // AAFRESULT_NOT_TAPEMOB
  //   - The specified Master Slot does not contain a Tape MOB.)


AD_XMETHOD2(GetNumRepresentations,
			[in],
			  objPass,
			  aafSlotID_t,
			  slotID,
			  SlotID,
			[out\, retval],
			  objPass,
			  aafNumSlots_t *,
			  pNumReps,
			  number of representations,
  // This function returns the number of media representations
  // available for the specified SlotID on a specified Master
  // Mob. This function is meant to work with
  // GetRepresentationSourceClip\, so that you can iterate through
  // all of the choices yourself.  In most cases\, you can use
  // GetCriteriaSourceClip to handle multiple
  // representations.  This function and
  // GetRepresentationSourceClip are lower-level functions.
  //
  // Succeeds if all of the following are true:
  // - the pNumReps pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pNumReps arg is NULL.
  //
  // AAFRESULT_SLOT_NOTFOUND
  //   - The specified Master Slot was not found.)


AD_XMETHOD3(GetRepresentationSourceClip,
			[in],
			  objPass,
			  aafSlotID_t,
			  slotID,
			  Slot ID,
			[in],
			  objPass,
			  aafInt32,
			  index,
			  Index of requested representation,
			[out],
			  objOut,
			  AAFSourceClip,
			  ppSourceClip,
			  Requested Source Clip,
			This method returns the indexed media representation for the specified
  // Master Mob\, SlotID\, and index.  This call is meant to work
  // with GetNumRepresentations\, so that you can iterate through all
  // of the choices yourself.  This method uses an integer index\, not
  // an iterator.  The function GetRepresentationSourceClip takes an
  // index between 1 and the number of representations [inclusive]\,
  // and returns the indexed Source Mob. You can make calls to functions
  // such as AAFMedia::GetVideoInfo and AAFMedia::IsMediaContiguous to
  // determine which media is the best fit.
  //
  // Succeeds if all of the following are true:
  // - the ppSourceClip pointer is valid.
  //
  // If this method fails nothing will be written to *ppSourceClip.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppSourceClip arg is NULL.
  //
  // AAFRESULT_SLOT_NOTFOUND
  //   - The specified Master Slot was not found.
  //
  // AAFRESULT_BADINDEX
  //   - No Source Mob at specified index.)


AD_XMETHOD3(GetCriteriaSourceClip,
			[in],
			  objPass,
			  aafSlotID_t,
			  slotID,
			  Slot ID,
			[in],
			  objPass,
			  aafMediaCriteria_t *,
			  pCriteria,
			Index of requested representation.  Note: the
	// aafMediaCriteria_t is defined as the following structure:
    // typedef struct
    // {
    //	aafCriteriaType_t type;
    //	aafCriteriaProc_t proc;
    // } aafMediaCriteria_t;
	//
    // The type field can have one of the following values:
    // typedef enum
    // {
    //	kAAFAnyRepresentation = 0\,
    //	kAAFFastestRepresentation\,
    //	kAAFBestFidelityRepresentation\,
    //	kAAFSmallestRepresentation\,
    //	kAAFUseRepresentationProc
    // } aafCriteriaType_t;,

			[out],
			  objOut,
			  AAFSourceClip,
			  ppSourceClip,
			  Requested Source Clip,
  // Returns the Source Clip on the specified slot of a Master Mob
  // that references the Source Mob that best meets the specified
  // criteria.  This function will work whether multiple media
  // representations exist or not.
  //
  // Succeeds if all of the following are true:
  // - the ppSourceClip pointer is valid.
  //
  // If this method fails nothing will be written to *ppSourceClip.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppSourceClip arg is NULL.
  //
  // AAFRESULT_SLOT_NOTFOUND
  //   - The specified Master Slot was not found.)


AD_COM_METH(.method-SearchSource)


AD_COM_METH(.method-GetMobKind)
AD_CLASS_END
