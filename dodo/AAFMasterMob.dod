#startm .this-module 0
AAFMasterMob\
#endm
#c
#startm .parent-module 0
AAFMob\
#endm
#c
#import ./AAFObject.exp
#import ./AAFMob.exp
#import ./AAFMobPrivate.exp
#import ./AAFSearchSource.exp
AD_HEAD
AD_FORWARD_DECLARATION(AAFSourceClip)
AD_FORWARD_DECLARATION(AAFSourceMob)
AD_FORWARD_DECLARATION(AAFComponent)
AD_FORWARD_DECLARATION(AAFDataDef)
AD_FORWARD_DECLARATION(AAFFindSourceInfo)
AD_CLASS_UUID(b1a21373, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)

AD_DEFAULT_UUID(b1a21372, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
AD_CLASS_BEGIN
AD_XMETHOD5(AddMasterSlot,
			[in],
			  objPass,
			  aafUID_t *,
			  pDataDef,
			  Data kind of new slot,
			[in],
			  objPass,
			  aafSlotID_t,
			  slotID,
			  SlotID of new Master Mob slot,
			[in],
			  objPass,
			  aafSlotID_t,
			  fileSlotID,
			  File Source Mob slot ID,
			[in\, string],
			  objPass,
			  aafWChar *,
			  pSlotName,
			  Name to assign to new slot in Master Mob,
			[in],
			  objIn,
			  AAFSourceMob,
			  pFileMob,
			  File Source Mob associated with new slot,
			This function adds a slot to the specified Master Mob that
  // references the specified File Source Mob. The new slot in the
  // Master Mob contains a Source Clip that specifies the File Source
  // Mob in its source reference properties. Typically this is done
  // automatically by passing the Master Mob handle to
  // AAFMedia::Create\, but this function allows you to add it later.
  //
  // Note: The mediaKind  parameter requires a data kind valid for a
  // media stream. Valid data kinds are:
  // - Picture
  // - Sound
  //
  // Note: If pSlotName is passed in with zero length\, then the
  // slot is not assigned a name.  Slot names are not used by the
  // Toolkit\, and exist only so the user can name slots.
  // 
  // Succeeds if all of the following are true:
  // \(more conditions here\)
  // 
  // If this method fails no state is changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // \(more results here\))


AD_XMETHOD3(GetTapeName,
			[in],
			  objPass,
			  aafInt32,
			  masterSlotID,
			  SlotID of the Master Mob slot,
			[out\, size_is\(bufSize\)\, string],
			  objPass,
			  aafWChar *,
			  pTapeName,
			  The returned name,
			[in],
			  objPass,
			  aafInt32,
			  bufSize,
			  the size of the pTapeName buffer,
			Finds the videotape Source Mob associated with a Master Mob slot
  // and writes the name of the videotape\, which is stored in the
  // Mobs Name property\, into the pTapeName buffer.  The buffer is
  // allocated by the caller.  The size of the buffer is given by
  // bufSize.  If the property name has not yet been set\, a
  // zero-length string will be written \(that is\, only the trailing
  // null character\).
  // 
  // Caller may call GetTapeNameBufLen\(\) to determine the required
  // buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pTapeName pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to *pTapeName.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pTapeName arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.)


AD_XMETHOD2(GetTapeNameBufLen,
			[in],
			  objPass,
			  aafInt32,
			  masterSlotID,
			  SlotID of the Master Mob slot,
			[out],
			  objPass,
			  aafInt32 *,
			  pLen,
			  required buffer length,
			Returns the length of buffer required for the GetTapeName\(\)
  // method.  The value is placed into the location specified by pLen.
  // The value will include space required for the trailing null
  // character.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)


AD_XMETHOD2(GetNumRepresentations,
			[in],
			  objPass,
			  aafSlotID_t,
			  slotID,
			  SlotID,
			[out\, retval],
			  objPass,
			  aafNumSlots_t *,
			  pNumReps,
			  number of representations,
  // This function returns the number of media representations
  // available for the specified SlotID on a specified Master
  // Mob. This function is meant to work with
  // GetRepresentationSourceClip\, so that you can iterate through
  // all of the choices yourself.  In most cases\, you can use
  // GetCriteriaSourceClip to handle multiple
  // representations. this function and
  // GetRepresentationSourceClip are lower-level functions.
  //
  // Succeeds if all of the following are true:
  // - the pNumReps pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pNumReps arg is NULL.)


AD_XMETHOD3(GetRepresentationSourceClip,
			[in],
			  objPass,
			  aafSlotID_t,
			  slotID,
			  Slot ID,
			[in],
			  objPass,
			  aafInt32,
			  index,
			  Index of requested representation,
			[out],
			  objOut,
			  AAFSourceClip,
			  ppSourceClip,
			  Requested Source Clip,
			This method returns the indexed media representation for the specified
  // Master Mob\, SlotID\, and index.  This call is meant to work
  // with GetNumRepresentations\, so that you can iterate through all
  // of the choices yourself.  This method uses an integer index\, not
  // an iterator.  The function GetRepresentationSourceClip takes an
  // index between 1 and the number of representations [inclusive]\,
  // and returns the indexed File Source Mob. You can make calls to
  // functions such as AAFMedia::GetVideoInfo and AAFMedia::IsMediaContiguous to
  // determine which media is the best fit.
  //
  // Succeeds if all of the following are true:
  // - the ppSourceClip pointer is valid.
  //
  // If this method fails nothing will be written to *ppSourceClip.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppSourceClip arg is NULL.)


AD_XMETHOD3(GetCriteriaSourceClip,
			[in],
			  objPass,
			  aafSlotID_t,
			  slotID,
			  Slot ID,
			[in],
			  objPass,
			  aafMediaCriteria_t *,
			  pCriteria,
			  Index of requested representation,
			[out],
			  objOut,
			  AAFSourceClip,
			  ppSourceClip,
			  Requested Source Clip,
  // Returns the Source Clip on the specified slot of a Master Mob
  // that references the File Source Mob that best meets the specified
  // criteria.  This function will work whether multiple media
  // representations exist or not.
  //
  // Note:
  // The aafMediaCriteria_t is defined as the following structure:
  // typedef struct
  // {
  //	aafCriteriaType_t type;
  //	aafCriteriaProc_t proc;
  // } aafMediaCriteria_t;
  // 
  // Note:
  // The type field can have one of the following values: |
  // typedef enum
  // {
  //	kAAFAnyRepresentation = 0\,
  //	kAAFFastestRepresentation\,
  //	kAAFBestFidelityRepresentation\,
  //	kAAFSmallestRepresentation\,
  //	kAAFUseRepresentationProc
  // } aafCriteriaType_t;
  //
  // Succeeds if all of the following are true:
  // - the ppSourceClip pointer is valid.
  //
  // If this method fails nothing will be written to *ppSourceClip.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppSourceClip arg is NULL.)


AD_COM_METH(.method-SearchSource)


AD_COM_METH(.method-GetMobKind)
AD_CLASS_END
