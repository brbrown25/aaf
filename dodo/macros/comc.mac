#c /******************************************\
#c *                                          *
#c * Advanced Authoring Format                *
#c *                                          *
#c * Copyright (c) 1998 Avid Technology, Inc. *
#c * Copyright (c) 1998 Microsoft Corporation *
#c *                                          *
#c \******************************************/



#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
#c
#c AutoDodo macro file for use in generating COM API implementation
#c C++ files.
#c
#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


#ccccccccccccccccccccccccccc
#c
#c Includes another file.
#c
#c Argument: Base filename
#c
#c Note: it is not necessary to expand it here, since it was already
#c included in this module's header file.
#c
#startm AD_INCLUDE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Goes at the head of the file.
#c
#c Arguments: none
#c
#startm AD_HEAD 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_BEGIN 00
#ifndef _C.this-module_h_
#include "C.this-module.h"
#endif

#ifndef _Impl.this-module_h_
#include "Impl.this-module.h"
#endif

#include <assert.h>


C.this-module::C.this-module (IUnknown * pControllingUnknown, AAFBool doInit)
  : C.parent-module (pControllingUnknown, AAFFalse)
{
  if (doInit)
    {
      Impl.this-module * newRep
      newRep = new Impl.this-module;
      assert (newRep);
      InitRep (newRep);
      newRep->InitComParent (this);
    }
}


C.this-module::~C.this-module ()
{
//  Impl.this-module * rep;
//  rep = GetRepObject ();
//  assert (rep);
//  delete rep;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition with no parent class
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_BEGIN 00
#ifndef _C.this-module_h_
#include "C.this-module.h"
#endif

#ifndef _Impl.this-module_h_
#include "Impl.this-module.h"
#endif

#include <assert.h>


C.this-module::C.this-module (IUnknown * pControllingUnknown, AAFBool doInit)
  : CAAFUnknown(pControllingUnknown)
{}


C.this-module::~C.this-module ()
{
  // The base class destructor of Impl.this-module must be declared as virtual.
  if (_rep)
    delete _rep;  
}


void C.this-module::InitRep (Impl.this-module * newRep)
{
  assert (newRep);
  _rep = newRep;
  newRep->InitComParent (this);
}


Impl.this-module * C.this-module::GetRepObject ()
{
  assert (_rep);
  return _rep;
}
#endm

#ccccccccccccccccccccccccccc
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c 
#c
#c GUID
#c Argument01: hex long  0-3[leading 0's w/o leading 0x]
#c Argument02: hex short 4-5[leading 0's w/o leading 0x]
#c Argument03: hex short 6-7[leading 0's w/o leading 0x]
#c Argument04: hex byte   8 [leading 0's w/o leading 0x]
#c Argument05: hex byte   9 [leading 0's w/o leading 0x]
#c Argument06: hex byte  10 [leading 0's w/o leading 0x]
#c Argument07: hex byte  11 [leading 0's w/o leading 0x]
#c Argument08: hex byte  12 [leading 0's w/o leading 0x]
#c Argument09: hex byte  13 [leading 0's w/o leading 0x]
#c Argument10: hex byte  14 [leading 0's w/o leading 0x]
#c Argument11: hex byte  15 [leading 0's w/o leading 0x]
#c
#c Example:
#c AD_TYPES_BEGIN(b1a21372, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
#c
#c TomR:980716: Added
#c
#startm AD_TYPES_BEGIN 11
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a types definition
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c
#c Arguments: none
#c
#startm AD_TYPES_END 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes no arguments.
#c
#c Argument1: method name
#c Argument2: method description
#c
#startm AD_METHOD0 02
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 ()
{
  C.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<C.this-module*> (pO);
  assert (pO)
  return pO->%01();
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: method description
#c
#startm AD_METHOD1 06
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 (%03 %04)
{
  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (pO)
  return pO->%01 (%04);
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes two arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: method description
#c
#startm AD_METHOD2 10
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 (%03 %04,%07 %08)
{
  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (pO)
  return pO->%01 (%04,%08);
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes three arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: method description
#c
#startm AD_METHOD3 14
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 (%03 %04,%07 %08,%10 %11)
{
  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (pO)
  return pO->%01 (%04,%08,%11);
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes four arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: method description
#c
#startm AD_METHOD4 18
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 (%03 %04,%07 %08,%10 %11,%15 %16)
{
  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (pO)
  return pO->%01 (%04,%08,%11,%16);
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes five arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: method description
#c
#startm AD_METHOD5 22
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 (%03 %04,%07 %08,%10 %11,%15 %16,%19 %20)
{
  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (pO)
  return pO->%01 (%04,%08,%11,%16,%20);
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes six arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: method description
#c
#startm AD_METHOD6 26
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 (%03 %04,%07 %08,%10 %11,%15 %16,%19 %20,%23 %24)
{
  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (pO)
  return pO->%01 (%04,%08,%11,%16,%20,%24);
}
#endm

#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes seven arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: argument modifiers (e.g. [in])
#c Argument27: argument type
#c Argument28: argument name
#c Argument29: argument comment
#c Argument30: method description
#c
#startm AD_METHOD7 30
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 (%03 %04,%07 %08,%10 %11,%15 %16,%19 %20,%23 %24,%27 %28)
{
  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (pO)
  return pO->%01 (%04,%08,%11,%16,%20,%24,%28);
}
#endm

#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eight arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: argument modifiers (e.g. [in])
#c Argument27: argument type
#c Argument28: argument name
#c Argument29: argument comment
#c Argument30: argument modifiers (e.g. [in])
#c Argument31: argument type
#c Argument32: argument name
#c Argument33: argument comment
#c Argument34: method description
#c
#startm AD_METHOD8 34
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 (%03 %04,%07 %08,%10 %11,%15 %16,%19 %20,%23 %24,%27 %28,%31 %32)
{
  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (pO)
  return pO->%01 (%04,%08,%11,%16,%20,%24,%28,%32);
}
#endm

#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes nine arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: argument modifiers (e.g. [in])
#c Argument27: argument type
#c Argument28: argument name
#c Argument29: argument comment
#c Argument30: argument modifiers (e.g. [in])
#c Argument31: argument type
#c Argument32: argument name
#c Argument33: argument comment
#c Argument34: argument modifiers (e.g. [in])
#c Argument35: argument type
#c Argument36: argument name
#c Argument37: argument comment
#c Argument38: method description
#c
#startm AD_METHOD9 38
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 (%03 %04,%07 %08,%10 %11,%15 %16,%19 %20,%23 %24,%27 %28,%31 %32,%35 %36)
{
  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (pO)
  return pO->%01 (%04,%08,%11,%16,%20,%24,%28,%32,%36);
}
#endm

#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes ten arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: argument modifiers (e.g. [in])
#c Argument27: argument type
#c Argument28: argument name
#c Argument29: argument comment
#c Argument30: argument modifiers (e.g. [in])
#c Argument31: argument type
#c Argument32: argument name
#c Argument33: argument comment
#c Argument34: argument modifiers (e.g. [in])
#c Argument35: argument type
#c Argument36: argument name
#c Argument37: argument comment
#c Argument38: argument modifiers (e.g. [in])
#c Argument39: argument type
#c Argument40: argument name
#c Argument41: argument comment
#c Argument42: method description
#c
#startm AD_METHOD_10 42
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 (%03 %04,%07 %08,%10 %11,%15 %16,%19 %20,%23 %24,%27 %28,%31 %32,%35 %36,%39 %40)
{
  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (pO)
  return pO->%01 (%04,%08,%11,%16,%20,%24,%28,%32,%36,%40);
}
#endm

#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eleven arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: argument modifiers (e.g. [in])
#c Argument27: argument type
#c Argument28: argument name
#c Argument29: argument comment
#c Argument30: argument modifiers (e.g. [in])
#c Argument31: argument type
#c Argument32: argument name
#c Argument33: argument comment
#c Argument34: argument modifiers (e.g. [in])
#c Argument35: argument type
#c Argument36: argument name
#c Argument37: argument comment
#c Argument38: argument modifiers (e.g. [in])
#c Argument39: argument type
#c Argument40: argument name
#c Argument41: argument comment
#c Argument42: argument modifiers (e.g. [in])
#c Argument43: argument type
#c Argument44: argument name
#c Argument45: argument comment
#c Argument46: method description
#c
#startm AD_METHOD_11 46
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 (%03 %04,%07 %08,%10 %11,%15 %16,%19 %20,%23 %24,%27 %28,%31 %32,%35 %36,%39 %40,%43 %44)
{
  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (pO)
  return pO->%01 (%04,%08,%11,%16,%20,%24,%28,%32,%36,%40,%44);
}
#endm

#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_END 00
//
// 
// 
AAFRESULT C.this-module::InternalQueryInterface
(
	REFIID riid,
	void **ppvObj)
{
	HRESULT hr = S_OK;

	if (NULL == ppvObj)
		return E_INVALIDARG;

    // We only support the IClassFactory interface 
    if (riid == IID_I.this-module) 
    { 
        *ppvObj = (I.this-module *)this; 
        ((IUnknown *)*ppvObj)->AddRef();
		return S_OK;
    }

	// Always delegate back to base implementation.
	return C.parent-module::InternalQueryInterface(riid, ppvObj);
}

//
// Return private implementation pointer for delegation.
// NOTE: This is NOT the pointer to the COM object's implementation
// object!
//
void * AAFRESULT STDMETHODCALLTYPE
    C.this-module::GetImplRep)()
{
	return _rep; // GetRepObject();
}

//
// Define the contrete object support implementation.
// 
AAF_DEFINE_FACTORY(.this-module)

#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for AAFObject
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_END 00
//
// 
// 
AAFRESULT C.this-module::InternalQueryInterface
(
	REFIID riid,
	void **ppvObj)
{
	HRESULT hr = S_OK;

	if (NULL == ppvObj)
		return E_INVALIDARG;

    // We only support the IClassFactory interface 
    if (riid == IID_I.this-module) 
    { 
        *ppvObj = (I.this-module *)this; 
        ((IUnknown *)*ppvObj)->AddRef();
		return S_OK;
    }
	// All base classes must support unit test.
	else if (riid == IID_IAAFUnitTest) 
    { 
        *ppvObj = (IAAFUnitTest *)this; 
        ((IUnknown *)*ppvObj)->AddRef();
		return S_OK;
    }

	// Always delegate back to base implementation.
	return CAAFUnknown::InternalQueryInterface(riid, ppvObj);
}

//
// Return private implementation pointer for delegation.
// NOTE: This is NOT the pointer to the COM object's implementation
// object!
//
void * AAFRESULT STDMETHODCALLTYPE
    C.this-module::GetImplRep)()
{
	return _rep; // GetRepObject();
}

//
// Define the contrete object support implementation.
// 
AAF_DEFINE_FACTORY(.this-module)

#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies an overridden method
#c
#c Argument: method declaration
#c
#startm AD_OVERRIDE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes one argument.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument modifiers (e.g. [in])
#c Argument2: argument type
#c Argument3: argument name
#c Argument4: argument comment
#c Argument5: constructor description
#c
#startm AD_CONSTRUCTOR1 05
C.this-module::C.this-module (%02 %03)
{
  Impl.this-module * ptr;
  ptr = new Impl.this-module (%03);
  assert (ptr);
  InitRep (ptr);
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes two arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument1 modifiers (e.g. [in])
#c Argument2: argument1 type
#c Argument3: argument1 name
#c Argument4: argument1 comment
#c Argument5: argument2 modifiers (e.g. [in])
#c Argument6: argument2 type
#c Argument7: argument2 name
#c Argument8: argument2 comment
#c Argument9: constructor description
#c
#startm AD_CONSTRUCTOR2 09
C.this-module::C.this-module (%02 %03, %06 %07)
{
  Impl.this-module * ptr;
  ptr = new Impl.this-module (%03, %07);
  assert (ptr);
  InitRep (ptr);
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes three arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument1 modifiers (e.g. [in])
#c Argument2: argument1 type
#c Argument3: argument1 name
#c Argument4: argument1 comment
#c Argument5: argument2 modifiers (e.g. [in])
#c Argument6: argument2 type
#c Argument7: argument2 name
#c Argument8: argument2 comment
#c Argument9: argument3 modifiers (e.g. [in])
#c Argument10: argument3 type
#c Argument11: argument3 name
#c Argument12: argument3 comment
#c Argument13: constructor description
#c
#startm AD_CONSTRUCTOR3 13
C.this-module::C.this-module (%02 %03,
                              %06 %07,
                              %10 %11)
{
  Impl.this-module * ptr;
  ptr = new Impl.this-module (%03, %07, %11);
  assert (ptr);
  InitRep (ptr);
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes four arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument1 modifiers (e.g. [in])
#c Argument2: argument1 type
#c Argument3: argument1 name
#c Argument4: argument1 comment
#c Argument5: argument2 modifiers (e.g. [in])
#c Argument6: argument2 type
#c Argument7: argument2 name
#c Argument8: argument2 comment
#c Argument9: argument3 modifiers (e.g. [in])
#c Argument10: argument3 type
#c Argument11: argument3 name
#c Argument12: argument3 comment
#c Argument13: argument4 modifiers (e.g. [in])
#c Argument14: argument4 type
#c Argument15: argument4 name
#c Argument16: argument4 comment
#c Argument17: constructor description
#c
#startm AD_CONSTRUCTOR4 17
C.this-module::C.this-module (%02 %03,
                              %06 %07,
                              %10 %11,
                              %14 %15)
{
  Impl.this-module * ptr;
  ptr = new Impl.this-module (%03, %07, %11, %15);
  assert (ptr);
  InitRep (ptr);
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument, which is
#c a pointer to an AAF object which is to be returned to the caller.
#c This is different from the normal METHOD macro because the
#c _rep will probably have the object in a different form.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: method description
#c
#c NOTE!!! This macro takes as type, the object itself, not the
#c pointer to it.  The indirection will be added by the macro
#c expansion.
#c
#startm AD_GETOBJ_METHOD1 06
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 (I%03 ** %04)
{
  ImplAAFObject * pThisO;
  Impl%03  * repObj;
  I%03 * retObj;
  AAFRESULT stat;

  pThisO = GetRepObject ();
  assert (pThisO);

  stat = pThisO->%01 (&repObj);
  if (FAILED (stat))
    {
      return stat;
    }
  assert (repObj);
  retObj = repObj->GetCOMParent();
  assert (retObj);
  assert (%04);
  *%04 = retObj;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument, which is
#c a pointer to an AAF object which is to be passed in from the caller.
#c This is different from the normal METHOD macro because the
#c _rep will probably have the object in a different form.
#c
#c NOTE!!! This macro takes as type, the object itself, not the
#c pointer to it.  The indirection will be added by the macro
#c expansion.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: method description
#c
#startm AD_SETOBJ_METHOD1 06
AAFRESULT STDMETHODCALLTYPE
    C.this-module::%01 (I%03 * %04)
{
  ImplAAFObject* pArgO;
  ImplAAFObject* pThisO;
  Impl%03 * repObj;
  AAFRESULT stat;

  pThisO = GetRepObject ();
  assert (pThisO);

  assert (%04);
  pArgO = %04->GetRepObject ();
  assert (pArgO);
  repObj = static_cast<Impl%03*> (pArgO);
  assert (repObj);
  stat = pThisO->%01 (repObj);
  return stat;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: text to be quoted.
#c 
#c Ignore the input
#c
#c TomR:added 980714
#c
#startm AD_CPP_QUOTE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c ingnore the input
#c
#startm AD_AAFTYPES 01
I%01\
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c Ignore input
#c
#startm AD_DECLARE_FORWARD_AAFTYPES 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Generate a forward declaration of a class.
#c
#c Argument: class name
#c
#startm AD_FORWARD_DECLARATION 01
#ifndef _I%01_h_
#include "I%01.h"
#endif
#endm

#ccccccccccccccccccccccccccc
#c
#c Defining the interface UUID.
#c NOTE: Should be placed immediately before AD_CLASS_BEGIN
#c
#c GUID
#c Argument01: hex long  0-3[leading 0's w/o leading 0x]
#c Argument02: hex short 4-5[leading 0's w/o leading 0x]
#c Argument03: hex short 6-7[leading 0's w/o leading 0x]
#c Argument04: hex byte   8 [leading 0's w/o leading 0x]
#c Argument05: hex byte   9 [leading 0's w/o leading 0x]
#c Argument06: hex byte  10 [leading 0's w/o leading 0x]
#c Argument07: hex byte  11 [leading 0's w/o leading 0x]
#c Argument08: hex byte  12 [leading 0's w/o leading 0x]
#c Argument09: hex byte  13 [leading 0's w/o leading 0x]
#c Argument10: hex byte  14 [leading 0's w/o leading 0x]
#c Argument11: hex byte  15 [leading 0's w/o leading 0x]
#c
#c Example:
#c AD_DEFAULT_UUID(b1a21372, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
#c
#c TomR:980713: Added
#c
#startm AD_DEFAULT_UUID 11
// Default Interface for .this-module 
// {%01-%02-%03-%04%05-%06%07%08%09%10%11}
IID IID_I.this-module = { 0x%01, 0x%02, 0x%03, { 0x%04, 0x%05, 0x%06, 0x%07, 0x%08, 0x%09, 0x%10, 0x%11 } );
#endm


#ccccccccccccccccccccccccccc
#c
#c Defining the Class "Factory" UUID.
#c NOTE: should be placed before AD_DEFAULT_UUID or after
#c AD_CLASS_END
#c
#c GUID
#c Argument01: hex long  0-3[leading 0's w/o leading 0x]
#c Argument02: hex short 4-5[leading 0's w/o leading 0x]
#c Argument03: hex short 6-7[leading 0's w/o leading 0x]
#c Argument04: hex byte   8 [leading 0's w/o leading 0x]
#c Argument05: hex byte   9 [leading 0's w/o leading 0x]
#c Argument06: hex byte  10 [leading 0's w/o leading 0x]
#c Argument07: hex byte  11 [leading 0's w/o leading 0x]
#c Argument08: hex byte  12 [leading 0's w/o leading 0x]
#c Argument09: hex byte  13 [leading 0's w/o leading 0x]
#c Argument10: hex byte  14 [leading 0's w/o leading 0x]
#c Argument11: hex byte  15 [leading 0's w/o leading 0x]
#c
#c Example:
#c AD_CLASS_UUID(b1a21373, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
#c
#c TomR:980713: Added
#c
#startm AD_CLASS_UUID 11
// CLSID for .this-module 
// {%01-%02-%03-%04%05-%06%07%08%09%10%11}
CLSID CLSID_.this-module = { 0x%01, 0x%02, 0x%03, { 0x%04, 0x%05, 0x%06, 0x%07, 0x%08, 0x%09, 0x%10, 0x%11 } );
#endm



