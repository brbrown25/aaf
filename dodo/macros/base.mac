#c *********************************************************************
#c
#c $Id: base.mac,v 1.16.2.2 2004/03/18 13:57:32 stuart_hc Exp $ $Name:  $
#c
#c The contents of this file are subject to the AAF SDK Public
#c Source License Agreement (the "License"); You may not use this file
#c except in compliance with the License.  The License is available in
#c AAFSDKPSL.TXT, or you may obtain a copy of the License from the AAF
#c Association or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.
#c
#c The Original Code of this file is Copyright 1998-2004, Licensor of the
#c AAF Association.
#c
#c The Initial Developer of the Original Code of this file and the
#c Licensor of the AAF Association is Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************

#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
#c
#c AutoDodo macro file with common macros
#c
#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one non-object
#c argument.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    02              03          04          05
#c
#c Macro Arg 06: method description
#c
#startm AD_METHOD1 06
AD_XMETHOD1(%01, %02, objPass, %03, %04, %05, %06)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes two non-object
#c arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    02              03          04          05
#c metharg 2    06              07          08          09
#c
#c Macro Arg 10: method description
#c
#startm AD_METHOD2 10
AD_XMETHOD2(%01,
            %02, objPass, %03, %04, %05,
            %06, objPass, %07, %08, %09,
            %10)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes three non-object
#c arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    02              03          04          05
#c metharg 2    06              07          08          09
#c metharg 3    10              11          12          13
#c
#c Macro Arg 14: method description
#c
#startm AD_METHOD3 14
AD_XMETHOD3(%01,
    %02, objPass, %03, %04, %05,
    %06, objPass, %07, %08, %09,
    %10, objPass, %11, %12, %13,
    %14)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes four non-object
#c arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    02              03          04          05
#c metharg 2    06              07          08          09
#c metharg 3    10              11          12          13
#c metharg 4    14              15          16          17
#c
#c Macro Arg 18: method description
#c
#startm AD_METHOD4 18
AD_XMETHOD4(%01,
    %02, objPass, %03, %04, %05,
    %06, objPass, %07, %08, %09,
    %10, objPass, %11, %12, %13,
    %14, objPass, %15, %16, %17,
    %18)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes five non-object
#c arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    02              03          04          05
#c metharg 2    06              07          08          09
#c metharg 3    10              11          12          13
#c metharg 4    14              15          16          17
#c metharg 5    18              19          20          21
#c
#c Macro Arg 22: method description
#c
#startm AD_METHOD5 22
AD_XMETHOD5(%01,
    %02, objPass, %03, %04, %05,
    %06, objPass, %07, %08, %09,
    %10, objPass, %11, %12, %13,
    %14, objPass, %15, %16, %17,
    %18, objPass, %19, %20, %21,
    %22)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes six non-object
#c arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    02              03          04          05
#c metharg 2    06              07          08          09
#c metharg 3    10              11          12          13
#c metharg 4    14              15          16          17
#c metharg 5    18              19          20          21
#c metharg 6    22              23          24          25
#c
#c Macro Arg 26: method description
#c
#startm AD_METHOD6 26
AD_XMETHOD6(%01,
    %02, objPass, %03, %04, %05,
    %06, objPass, %07, %08, %09,
    %10, objPass, %11, %12, %13,
    %14, objPass, %15, %16, %17,
    %18, objPass, %19, %20, %21,
    %22, objPass, %23, %24, %25,
    %26)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes seven non-object
#c arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    02              03          04          05
#c metharg 2    06              07          08          09
#c metharg 3    10              11          12          13
#c metharg 4    14              15          16          17
#c metharg 5    18              19          20          21
#c metharg 6    22              23          24          25
#c metharg 7    26              27          28          29
#c
#c Macro Arg 30: method description
#c
#startm AD_METHOD7 30
AD_XMETHOD7(%01,
    %02, objPass, %03, %04, %05,
    %06, objPass, %07, %08, %09,
    %10, objPass, %11, %12, %13,
    %14, objPass, %15, %16, %17,
    %18, objPass, %19, %20, %21,
    %22, objPass, %23, %24, %25,
    %26, objPass, %27, %28, %29,
    %30)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eight non-object
#c arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    02              03          04          05
#c metharg 2    06              07          08          09
#c metharg 3    10              11          12          13
#c metharg 4    14              15          16          17
#c metharg 5    18              19          20          21
#c metharg 6    22              23          24          25
#c metharg 7    26              27          28          29
#c metharg 8    30              31          32          33
#c
#c Macro Arg 34: method description
#c
#startm AD_METHOD8 34
AD_XMETHOD8(%01,
    %02, objPass, %03, %04, %05,
    %06, objPass, %07, %08, %09,
    %10, objPass, %11, %12, %13,
    %14, objPass, %15, %16, %17,
    %18, objPass, %19, %20, %21,
    %22, objPass, %23, %24, %25,
    %26, objPass, %27, %28, %29,
    %30, objPass, %31, %32, %33,
    %34)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes nine non-object
#c arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    02              03          04          05
#c metharg 2    06              07          08          09
#c metharg 3    10              11          12          13
#c metharg 4    14              15          16          17
#c metharg 5    18              19          20          21
#c metharg 6    22              23          24          25
#c metharg 7    26              27          28          29
#c metharg 8    30              31          32          33
#c metharg 9    34              35          36          37
#c
#c Macro Arg 38: method description
#c
#startm AD_METHOD9 38
AD_XMETHOD9(%01,
    %02, objPass, %03, %04, %05,
    %06, objPass, %07, %08, %09,
    %10, objPass, %11, %12, %13,
    %14, objPass, %15, %16, %17,
    %18, objPass, %19, %20, %21,
    %22, objPass, %23, %24, %25,
    %26, objPass, %27, %28, %29,
    %30, objPass, %31, %32, %33,
    %34, objPass, %35, %36, %37,
    %38)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes ten non-object
#c arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    02              03          04          05
#c metharg 2    06              07          08          09
#c metharg 3    10              11          12          13
#c metharg 4    14              15          16          17
#c metharg 5    18              19          20          21
#c metharg 6    22              23          24          25
#c metharg 7    26              27          28          29
#c metharg 8    30              31          32          33
#c metharg 9    34              35          36          37
#c metharg 10   38              39          40          41
#c
#c Macro Arg 42: method description
#c
#startm AD_METHOD_10 42
AD_XMETHOD_10(%01,
    %02, objPass, %03, %04, %05,
    %06, objPass, %07, %08, %09,
    %10, objPass, %11, %12, %13,
    %14, objPass, %15, %16, %17,
    %18, objPass, %19, %20, %21,
    %22, objPass, %23, %24, %25,
    %26, objPass, %27, %28, %29,
    %30, objPass, %31, %32, %33,
    %34, objPass, %35, %36, %37,
    %38, objPass, %39, %40, %41,
    %42)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eleven non-object
#c arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    02              03          04          05
#c metharg 2    06              07          08          09
#c metharg 3    10              11          12          13
#c metharg 4    14              15          16          17
#c metharg 5    18              19          20          21
#c metharg 6    22              23          24          25
#c metharg 7    26              27          28          29
#c metharg 8    30              31          32          33
#c metharg 9    34              35          36          37
#c metharg 10   38              39          40          41
#c metharg 11   42              43          44          45
#c
#c Macro Arg 46: method description
#c
#startm AD_METHOD_11 46
AD_XMETHOD_11(%01,
    %02, objPass, %03, %04, %05,
    %06, objPass, %07, %08, %09,
    %10, objPass, %11, %12, %13,
    %14, objPass, %15, %16, %17,
    %18, objPass, %19, %20, %21,
    %22, objPass, %23, %24, %25,
    %26, objPass, %27, %28, %29,
    %30, objPass, %31, %32, %33,
    %34, objPass, %35, %36, %37,
    %38, objPass, %39, %40, %41,
    %42, objPass, %43, %44, %45,
    %46)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes one non-object
#c argument.  Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    01              02          03          04
#c
#c Macro Arg 05: method description
#c
#startm AD_CONSTRUCTOR1 05
AD_XCONSTRUCTOR1(%01, objPass, %02, %03, %04,
                 %05)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes two non-object
#c arguments.  Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    01              02          03          04
#c metharg 2    05              06          07          08
#c
#c Macro Arg 09: method description
#c
#startm AD_CONSTRUCTOR2 09
AD_XCONSTRUCTOR2(%01, objPass, %02, %03, %04,
                 %05, objPass, %06, %07, %08,
                 %09)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes three non-object
#c arguments.  Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    01              02          03          04
#c metharg 2    05              06          07          08
#c metharg 3    09              10          11          12
#c
#c Macro Arg 13: method description
#c
#startm AD_CONSTRUCTOR3 13
AD_XCONSTRUCTOR3(%01, objPass, %02, %03, %04,
                 %05, objPass, %06, %07, %08,
                 %09, objPass, %10, %11, %12,
                 %13)\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes four non-object
#c arguments.  Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c
#c meth arg #   arg modifiers   arg type    arg name    arg comment
#c ----------   -------------   --------    --------    -----------
#c metharg 1    01              02          03          04
#c metharg 2    05              06          07          08
#c metharg 3    09              10          11          12
#c metharg 3    13              14          15          16
#c
#c Macro Arg 17: method description
#c
#startm AD_CONSTRUCTOR4 17
AD_XCONSTRUCTOR4(%01, objPass, %02, %03, %04,
                 %05, objPass, %06, %07, %08,
                 %09, objPass, %10, %11, %12,
                 %13, objPass, %14, %15, %16,
                 %17)\
#endm


#ccccccccccccccccccccccccccc
#c
#c The following macros assist in passing arguments to methods of the
#c contained implementation class:
#c
#c The objIn macros are for use with pointers to objects that are
#c passed into the method.  The Type argument is the base type, with
#c no indirection specified.  For example, if you're passing in
#c AObject*, AObject should be specified for the Type argument.#c
#c
#c The objOut macros are for use with pointers to pointers to objects
#c that are passed out of the method.  The Type argument is the base
#c type, with no indirection specified.  For example, if you're
#c passing in AObject**, AObject should be specified for the Type
#c argument.
#c
#c The objPass macros are for use with any kind of data which is
#c passed exactly into or out of the method.
#c


#startm .objIn-indirection 00
*\
#endm


#startm .objInArray-indirection 00
**\
#endm


#startm .objInArrayCustom-indirection 00
**\
#endm


#startm .objPass-indirection 00
\
#endm


#startm .objOut-indirection 00
**\
#endm


#startm .objOutArray-indirection 00
**\
#endm


#startm .objOutArrayCustom-indirection 00
**\
#endm


#startm .enumIn-adornment 00
\
#endm

#startm .enumIn-indirection 00
\
#endm

#startm .unkIn-indirection 00
*\
#endm

#startm .unkOut-indirection 00
**\
#endm

#ccccccccccccccccccccccccccccccccccc
#c
#c Standard macro to declare a method to get a string value from an
#c interface, and another method to return the size of buffer
#c required.
#c
#c arg1: one-word description of string which is to be gotten
#c arg2: unique comment for this particular string.
#c
#c Any clients of this macro must use triple escape characters to
#c escape commas and close-parens, e.g. "\\\,".
#c
#startm AD_STD_METHOD_STRING_GET_AND_SIZE 02
AD_XMETHOD2(Get%01,
			[out\\, string\\, size_is\\(bufSize\\)],
			objPass,
			aafCharacter *,
			p%01,
			buffer into which %01 is to be written,

			[in],
			objPass,
			aafUInt32,
			bufSize,
			size of *p%01 buffer in bytes,

     Gets %02
  // 
  // Writes the %01 property\\, with a trailing null
  // character\\, into the p%01 buffer.  The
  // buffer is allocated by the caller.  The size of the buffer is
  // given by bufSize.  If the %01 property has not yet
  // been set\\, a zero-length string will be written \\(that is\\,
  // only the trailing null character\\). 
  // 
  // Caller may call Get%01BufLen\\(\\) to determine the
  // required buffer size.
  // 
  // If this method fails nothing will be written to
  // *p%01.
  // 
  // Succeeds if:
  // - The p%01 pointer is valid.
  // - bufSize indicates that the buffer is large enough to hold
  //   %01.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\\(p%01\\)
  //
  // AAFRESULT_SMALL_BUF
  //   - bufSize indicates that the allocated buffer is not large
  //     enough to hold %01.)


AD_XMETHOD1(Get%01BufLen,
			[out],
			objPass,
			aafUInt32 *,
			pBufSize,
			size of required buffer\\, in bytes,

     Returns size of buffer \\(in bytes\\) required for Get%01\\(\\).
  // 
  // Succeeds if:
  // - The pBufSize pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\\(pBufSize\\))\
#endm


#startm AD_STD_METHOD_STRING_SET 02
AD_XMETHOD1(Set%01,
			[in\\, string],
			objPass,
			aafCharacter_constptr,
			p%01,
			buffer from which %01 is to be read,

     Sets %02
  //
  // Set the %01 property to the value specified in
  // p%01.  A copy is made of the data so the caller
  // retains ownership of the *p%01 buffer and is
  // responsible for de-allocating it.  There is no pre-set limit to
  // the length of the name\\, other than available system memory or
  // disk space.
  // 
  // Succeeds if all of the following are true:
  // - the p%01 pointer is valid.
  // 
  // If this method fails the %01 property will not be
  // changed.
  // 
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\\(p%01\\))\
#endm


#ccccccccccccccccccccccccccccccccccc
#c
#c Standard macro to declare three methods to:
#c - set a string value in an interface
#c - get a string value from an interface
#c - return the size of buffer required for the 'get' method.
#c
#c arg1: one-word description of string which is to be gotten
#c arg2: unique comment for this particular string.
#c
#c Any clients of this macro must use 7x (!) escape characters to
#c escape commas and close-parens, e.g. "\\\\\\\,".
#c
#startm AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE 02
AD_STD_METHOD_STRING_SET(%01, %02)


AD_STD_METHOD_STRING_GET_AND_SIZE(%01, %02)\
#endm


#ccccccccccccccccccccccccccccccccccc
#c
#c Standard macro to declare methods for use in an Enumeration class.
#c
#c arg1: Singular version of type of object which is to be enumerated,
#c       minus leading "AAF"
#c arg2: Plural version of type of object which is to be enumerated,
#c       minus leading "AAF" 
#c arg3: multiple-word description of item.
#c
#c Any clients of this macro must use triple escape characters to
#c escape commas and close-parens, e.g. "\\\,".
#c
#startm AD_STD_METHOD_ENUMERATOR 03
AD_XMETHOD1(NextOne,

			[out\\,retval],
			objOut,
			AAF%01,
			pp%02,
			The Next %03,
     Enumerates to the next element in the enumerators list. The
  // caller is responsible for properly releasing the returned pointer
  // when it is no longer needed.
  // 
  // Succeeds if all of the following are true:
  // - the pp%02 pointer is valid.
  // - there are %03 objects remaining to be returned.
  // 
  // If this method fails nothing is written to *pp%02.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\\(pp%02\\)
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - no %03 objects remaining to be returned.)


AD_X2METHOD3(Next,

			 [in],
			 objPass,
			 aafUInt32,
			 count,
			 number of %02 requested,
			 xxx,
			 xxx,

			 [out\\, size_is\\(count\\)\\, length_is\\(*pNumFetched\\)],
			 objOutArray,
			 AAF%01,
			 pp%02,
			 array to receive elements,
			 count,
			 *pNumFetched,

			 [out\\,ref],
			 objPass,
			 aafUInt32 *,
			 pNumFetched,
			 number of actual %03 objects fetched into pp%02 array,
			 xxx,
			 xxx,

     Enumerates the next count elements \\(AAF%01 pointers\\) in the
  // enumerator's list\\, returning them in the given array along with
  // the actual number of enumerated elements in pNumFetched. The caller
  // is responsible for properly releasing the returned pointers.
  // 
  // Succeeds if all of the following are true:
  // - The pp%02 pointer is valid.
  // - The pNumFetched pointer is valid. If count is 1\\, pNumFetched
  //   can be NULL.
  // - There are %03 objects remaining to be returned.
  // 
  // If this method fails nothing is written to *pp%02 or
  // pNumFetched.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\\(Either pp%02 or pNumFetched\\))


AD_XMETHOD1(Skip,




			[in],
			objPass,
			aafUInt32,
			count,
			Number of elements to skip,
     Instructs the enumerator to skip the next count elements in the
  // enumeration so that the next call to Next will not return those
  // elements.
  // 
  // Succeeds if all of the following are true:
  // - count is less than or equal to the number of remaining objects.
  AD_STD_COMMENT_METH_ERR_HEADER
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - count exceeded number of remaining objects.)


AD_METHOD0(Reset,
     Instructs the enumerator to position itself at the beginning of
  // the list of elements.
  AD_STD_COMMENT_METH_ERR_HEADER)


AD_XMETHOD1(Clone,
			[out\\,retval],
			objOut,
			EnumAAF%02,
			ppEnum,
			new enumeration,
     Creates another enumerator with the same state as the current
  // enumerator to iterate over the same list. This method makes it
  // possible to record a point in the enumeration sequence in order
  // to return to that point at a later time.
  //
  // Note: The caller must release this new enumerator separately from
  // the first enumerator.
  // 
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\\(ppEnum\\))\
#endm


#ccccccccccccccccccccccccccc
#c
#c Shared copyright message for all generated source files.
#c (Id and Name will be corrected by cvs upon commit of generated file).
#c
#ccccccccccccccccccccccccccc
#c
#startm .copyright-message 00
//=---------------------------------------------------------------------=
//
// This file was GENERATED for the AAF SDK
//
// $Id: base.mac,v 1.16.2.2 2004/03/18 13:57:32 stuart_hc Exp $ $Name:  $
//
// The contents of this file are subject to the AAF SDK Public
// Source License Agreement (the "License"); You may not use this file
// except in compliance with the License.  The License is available in
// AAFSDKPSL.TXT, or you may obtain a copy of the License from the AAF
// Association or its successor.
//
// Software distributed under the License is distributed on an "AS IS"
// basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
// the License for the specific language governing rights and limitations
// under the License.
//
// The Original Code of this file is Copyright 1998-2004, Licensor of the
// AAF Association.
//
// The Initial Developer of the Original Code of this file and the
// Licensor of the AAF Association is Avid Technology.
// All rights reserved.
//
//=---------------------------------------------------------------------=

#endm

#ccccccccccccccccccccccccccc
#c
#c Shared copyright message for all generated idl files.
#c (Id and Name will be corrected by cvs upon commit of generated file).
#ccccccccccccccccccccccccccc
#c
#startm .idl-copyright-message 00
cpp_quote("//=---------------------------------------------------------------------=")
cpp_quote("//")
cpp_quote("// This file was GENERATED for the AAF SDK")
cpp_quote("//")
cpp_quote("// $Id: base.mac,v 1.16.2.2 2004/03/18 13:57:32 stuart_hc Exp $ $Name:  $")
cpp_quote("//")
cpp_quote("// The contents of this file are subject to the AAF SDK Public")
cpp_quote("// Source License Agreement (the \\"License\\"); You may not use this file")
cpp_quote("// except in compliance with the License.  The License is available in")
cpp_quote("// AAFSDKPSL.TXT, or you may obtain a copy of the License from the AAF")
cpp_quote("// Association or its successor.")
cpp_quote("//")
cpp_quote("// Software distributed under the License is distributed on an \\"AS IS\\"")
cpp_quote("// basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See")
cpp_quote("// the License for the specific language governing rights and limitations")
cpp_quote("// under the License.")
cpp_quote("//")
cpp_quote("// The Original Code of this file is Copyright 1998-2004, Licensor of the")
cpp_quote("// AAF Association.")
cpp_quote("//")
cpp_quote("// The Initial Developer of the Original Code of this file and the")
cpp_quote("// Licensor of the AAF Association is Avid Technology.")
cpp_quote("// All rights reserved.")
cpp_quote("//")
cpp_quote("//=---------------------------------------------------------------------=")

#endm
