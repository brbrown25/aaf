#c /******************************************\
#c *                                          *
#c * Advanced Authoring Format                *
#c *                                          *
#c * Copyright (c) 1998 Avid Technology, Inc. *
#c * Copyright (c) 1998 Microsoft Corporation *
#c *                                          *
#c \******************************************/



#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
#c
#c AutoDodo macro file for use in generating C++ API header files.
#c
#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


#import macros/base.mac


#ccccccccccccccccccccccccccc
#c
#c Includes another file.
#c
#c Argument: Base filename
#c
#startm AD_INCLUDE 01
#ifndef __%01_h__
#include "%01.h"
#endif
#endm

#ccccccccccccccccccccccccccc
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c 
#c Argument: Pieces of UUID
#c
#c Example:
#c AD_TYPES_BEGIN(b1a21372, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
#c
#startm AD_TYPES_BEGIN 11
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a types definition
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c
#c Arguments: none
#c
#startm AD_TYPES_END 00
#endif // __Impl.this-module_h__
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c
#startm AD_AAFTYPES 01
Impl%01\
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c
#startm AD_DECLARE_FORWARD_AAFTYPES 01
class Impl%01;
#endm

#ccccccccccccccccccccccccccc
#c
#c Argument1: text to be quoted.
#c 
#c Just pass through the input. 
#c
#startm AD_CPP_QUOTE 01
%01 \
#endm

#ccccccccccccccccccccccccccc
#c
#c Generate a forward declaration of a class.
#c
#c Argument: class name
#c
#startm AD_FORWARD_DECLARATION 01
class Impl%01;
#endm

#ccccccccccccccccccccccccccc
#c
#c Class UUID.
#c
#c Argument: Pieces of UUID
#c
#startm AD_CLASS_UUID 11
#endm

#ccccccccccccccccccccccccccc
#c
#c Default UUID.
#c
#c Argument: Pieces of UUID
#c
#startm AD_DEFAULT_UUID 11
#endm

#ccccccccccccccccccccccccccc
#c
#c Goes at the head of the file.
#c
#c Arguments: none
#c
#startm AD_HEAD 00
//@doc
//@class    .this-module | Implementation class for .this-module
#ifndef __Impl.this-module_h__
#define __Impl.this-module_h__

#include "OMStorable.h"
#endm


#ccccccccccccccccccccccccccc
#c
#c AAFTypes support for IDL
#c
#c Arguments: none
#c
#startm AD_TYPES_HEAD 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_BEGIN 00

#ifndef __Impl.parent-module_h__
#include "Impl.parent-module.h"
#endif


class Impl.this-module : public Impl.parent-module
{
public:
  //
  // Constructor/destructor
  //
  //********
  Impl.this-module ();
  ~Impl.this-module ();
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_BEGIN 00
//
// Forward declaration
//
struct I.this-module;
class .this-module;

#include "AAFTypes.h"

class Impl.this-module
{
public:
  //
  // Constructor/destructor
  //
  //********
  Impl.this-module ();
  virtual ~Impl.this-module ();
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes no arguments.
#c
#c Argument1: method name
#c Argument2: method description
#c
#startm AD_METHOD0 02
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 ();
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c
#c Macro Arg 07: method description
#c
#startm AD_XMETHOD1 07
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
        (.%03-adornment%04 .%03-indirection %05);  //@parm %02 %06
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes two arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c
#c Macro Arg 12: method description
#c
#startm AD_XMETHOD2 12
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
        (.%03-adornment%04 .%03-indirection %05,   //@parm %02 %06
		 .%08-adornment%09 .%08-indirection %10);  //@parm %07 %11
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes three arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c
#c Macro Arg 17: method description
#c
#startm AD_XMETHOD3 17
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
        (.%03-adornment%04 .%03-indirection %05,   //@parm %02 %06
		 .%08-adornment%09 .%08-indirection %10,   //@parm %07 %11
         .%13-adornment%14 .%13-indirection %15);  //@parm %12 %16
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes four arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c
#c Macro Arg 22: method description
#c
#startm AD_XMETHOD4 22
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
        (.%03-adornment%04 .%03-indirection %05,   //@parm %02 %06
		 .%08-adornment%09 .%08-indirection %10,   //@parm %07 %11
         .%13-adornment%14 .%13-indirection %15,   //@parm %12 %16
		 .%18-adornment%19 .%18-indirection %20);  //@parm %17 %21
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes five arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c
#c Macro Arg 27: method description
#c
#startm AD_XMETHOD5 27
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
        (.%03-adornment%04 .%03-indirection %05,   //@parm %02 %06
		 .%08-adornment%09 .%08-indirection %10,   //@parm %07 %11
         .%13-adornment%14 .%13-indirection %15,   //@parm %12 %16
		 .%18-adornment%19 .%18-indirection %20,   //@parm %17 %21
         .%23-adornment%24 .%23-indirection %25);  //@parm %22 %26
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes six arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c
#c Macro Arg 32: method description
#c
#startm AD_XMETHOD6 32
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
        (.%03-adornment%04 .%03-indirection %05,   //@parm %02 %06
		 .%08-adornment%09 .%08-indirection %10,   //@parm %07 %11
         .%13-adornment%14 .%13-indirection %15,   //@parm %12 %16
		 .%18-adornment%19 .%18-indirection %20,   //@parm %17 %21
         .%23-adornment%24 .%23-indirection %25,   //@parm %22 %26
		 .%28-adornment%29 .%28-indirection %30);  //@parm %27 %31
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes seven arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c
#c Macro Arg 37: method description
#c
#startm AD_XMETHOD7 37
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
        (.%03-adornment%04 .%03-indirection %05,   //@parm %02 %06
		 .%08-adornment%09 .%08-indirection %10,   //@parm %07 %11
         .%13-adornment%14 .%13-indirection %15,   //@parm %12 %16
		 .%18-adornment%19 .%18-indirection %20,   //@parm %17 %21
         .%23-adornment%24 .%23-indirection %25,   //@parm %22 %26
		 .%28-adornment%29 .%28-indirection %30,   //@parm %27 %31
         .%33-adornment%34 .%33-indirection %35);  //@parm %32 %36
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eight arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c
#c Macro Arg 42: method description
#c
#startm AD_XMETHOD8 42
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
        (.%03-adornment%04 .%03-indirection %05,   //@parm %02 %06
		 .%08-adornment%09 .%08-indirection %10,   //@parm %07 %11
         .%13-adornment%14 .%13-indirection %15,   //@parm %12 %16
		 .%18-adornment%19 .%18-indirection %20,   //@parm %17 %21
         .%23-adornment%24 .%23-indirection %25,   //@parm %22 %26
		 .%28-adornment%29 .%28-indirection %30,   //@parm %27 %31
         .%33-adornment%34 .%33-indirection %35,   //@parm %32 %36
		 .%38-adornment%39 .%38-indirection %40);  //@parm %37 %41
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes nine arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c
#c Macro Arg 47: method description
#c
#startm AD_XMETHOD9 47
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
        (.%03-adornment%04 .%03-indirection %05,   //@parm %02 %06
		 .%08-adornment%09 .%08-indirection %10,   //@parm %07 %11
         .%13-adornment%14 .%13-indirection %15,   //@parm %12 %16
		 .%18-adornment%19 .%18-indirection %20,   //@parm %17 %21
         .%23-adornment%24 .%23-indirection %25,   //@parm %22 %26
		 .%28-adornment%29 .%28-indirection %30,   //@parm %27 %31
         .%33-adornment%34 .%33-indirection %35,   //@parm %32 %36
		 .%38-adornment%39 .%38-indirection %40,   //@parm %37 %41
         .%43-adornment%44 .%43-indirection %45);  //@parm %42 %46
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes ten arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c metharg 10   47           48          49      50      51
#c
#c Macro Arg 52: method description
#c
#startm AD_XMETHOD_10 52
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
        (.%03-adornment%04 .%03-indirection %05,   //@parm %02 %06
		 .%08-adornment%09 .%08-indirection %10,   //@parm %07 %11
         .%13-adornment%14 .%13-indirection %15,   //@parm %12 %16
		 .%18-adornment%19 .%18-indirection %20,   //@parm %17 %21
         .%23-adornment%24 .%23-indirection %25,   //@parm %22 %26
		 .%28-adornment%29 .%28-indirection %30,   //@parm %27 %31
         .%33-adornment%34 .%33-indirection %35,   //@parm %32 %36
		 .%38-adornment%39 .%38-indirection %40,   //@parm %37 %41
         .%43-adornment%44 .%43-indirection %45,   //@parm %42 %46
		 .%48-adornment%49 .%48-indirection %50);  //@parm %47 %51
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eleven arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c metharg 10   47           48          49      50      51
#c metharg 11   52           53          54      55      56
#c
#c Macro Arg 57: method description
#c
#startm AD_XMETHOD_11 57
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
        (.%03-adornment%04 .%03-indirection %05,   //@parm %02 %06
		 .%08-adornment%09 .%08-indirection %10,   //@parm %07 %11
         .%13-adornment%14 .%13-indirection %15,   //@parm %12 %16
		 .%18-adornment%19 .%18-indirection %20,   //@parm %17 %21
         .%23-adornment%24 .%23-indirection %25,   //@parm %22 %26
		 .%28-adornment%29 .%28-indirection %30,   //@parm %27 %31
         .%33-adornment%34 .%33-indirection %35,   //@parm %32 %36
		 .%38-adornment%39 .%38-indirection %40,   //@parm %37 %41
         .%43-adornment%44 .%43-indirection %45,   //@parm %42 %46
		 .%48-adornment%49 .%48-indirection %50,   //@parm %47 %51
         .%53-adornment%54 .%53-indirection %55);  //@parm %52 %56
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_END 00
public:
  // Declare this class to be storable.
  //
  OMDECLARE_STORABLE(.this-module);

  // Declare the module test method. The implementation of the will be be
  // in /test/Impl.this-moduleTest.cpp.
  static AAFRESULT test();
};

#endif // ! __Impl.this-module_h__
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for AAFRoot
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_END 00
public:
  // Declare the module test method. The implementation of the will be be
  // in /test/Impl.this-moduleTest.cpp.
  static AAFRESULT test();

  void InitContainer (void * pContainer);

  void * GetContainer ();

private:

  void * _pContainer;

};

#endif // ! __Impl.this-module_h__
#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies an overridden method
#c
#c Argument: method declaration
#c
#startm AD_OVERRIDE 01
%01-h
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes one argument.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c
#c Macro Arg 06: method description
#c
#startm AD_XCONSTRUCTOR1 06
  //****************
  // constructor
  //
  Impl.this-module
        (.%02-adornment%03 .%02-indirection %04);  //@parm %01 %05
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes two arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c
#c Macro Arg 11: method description
#c
#startm AD_XCONSTRUCTOR2 11
  //****************
  // constructor
  //
  Impl.this-module
        (.%02-adornment%03 .%02-indirection %04,   //@parm %01 %05
         .%07-adornment%08 .%07-indirection %09);  //@parm %06 %10
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes three arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c metharg 3    11           12          13      14      15
#c
#c Macro Arg 16: method description
#c
#startm AD_XCONSTRUCTOR3 16
  //****************
  // constructor
  //
  Impl.this-module
        (.%02-adornment%03 .%02-indirection %04,   //@parm %01 %05
         .%07-adornment%08 .%07-indirection %09,   //@parm %06 %10
         .%12-adornment%13 .%12-indirection %14);  //@parm %11 %15
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes four arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c metharg 3    11           12          13      14      15
#c metharg 4    16           17          18      19      20
#c
#c Macro Arg 21: method description
#c
#startm AD_XCONSTRUCTOR4 21
  //****************
  // constructor
  //
  Impl.this-module
        (.%02-adornment%03 .%02-indirection %04,   //@parm %01 %05
         .%07-adornment%08 .%07-indirection %09,   //@parm %06 %10
         .%12-adornment%13 .%12-indirection %14,   //@parm %11 %15
         .%17-adornment%18 .%17-indirection %19);  //@parm %16 %20
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes two arguments.
#c Constructor name is assumed to be Impl.this-module.
#c
#c Argument1: argument modifiers (e.g. [in])
#c Argument2: argument1 type
#c Argument3: argument1 name
#c Argument4: argument1 comment
#c Argument5: argument modifiers (e.g. [in])
#c Argument6: argument2 type
#c Argument7: argument2 name
#c Argument8: argument2 comment
#c Argument9: constructor description
#c
#startm AD_CONSTRUCTOR2 09
  //****************
  // constructor
  //
    Impl.this-module
       (%02 %03,    //@parm %01 %04
        %06 %07);   //@parm %05 %08
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes three arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument1 modifiers (e.g. [in])
#c Argument2: argument1 type
#c Argument3: argument1 name
#c Argument4: argument1 comment
#c Argument5: argument2 modifiers (e.g. [in])
#c Argument6: argument2 type
#c Argument7: argument2 name
#c Argument8: argument2 comment
#c Argument9: argument3 modifiers (e.g. [in])
#c Argument10: argument3 type
#c Argument11: argument3 name
#c Argument12: argument3 comment
#c Argument13: constructor description
#c
#startm AD_CONSTRUCTOR3 13
  //****************
  // constructor
  //
    Impl.this-module
       (%02 %03,    //@parm %01 %04
        %06 %07,    //@parm %05 %08
        %10 %11);   //@parm %09 %12
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes four arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument1 modifiers (e.g. [in])
#c Argument2: argument1 type
#c Argument3: argument1 name
#c Argument4: argument1 comment
#c Argument5: argument2 modifiers (e.g. [in])
#c Argument6: argument2 type
#c Argument7: argument2 name
#c Argument8: argument2 comment
#c Argument9: argument3 modifiers (e.g. [in])
#c Argument10: argument3 type
#c Argument11: argument3 name
#c Argument12: argument3 comment
#c Argument13: argument4 modifiers (e.g. [in])
#c Argument14: argument4 type
#c Argument15: argument4 name
#c Argument16: argument4 comment
#c Argument17: constructor description
#c
#startm AD_CONSTRUCTOR4 17
  //****************
  // constructor
  //
    Impl.this-module
       (%02 %03,    //@parm %01 %04
        %06 %07,    //@parm %05 %08
        %10 %11,    //@parm %09 %12
        %14 %15);   //@parm %13 %16
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a static method used to bootstrap an AAF
#c session by creating the first session object.
#c
#startm AD_BEGIN_SESSION 00
#endm

#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a static method used for a container to create
#c its contained objects in the cpp API.
#c
#startm AD_STATIC_CREATE 00
#endm


#ccccccccccccccccccccccccccc
#c
#c The following macros assist in passing arguments to methods of the
#c contained implementation class:
#c
#c The objIn macros are for use with pointers to objects that are
#c passed into the method.  The Type argument is the base type, with
#c no indirection specified.  For example, if you're passing in
#c AObject*, AObject should be specified for the Type argument.#c
#c
#c The objOut macros are for use with pointers to pointers to objects
#c that are passed out of the method.  The Type argument is the base
#c type, with no indirection specified.  For example, if you're
#c passing in AObject**, AObject should be specified for the Type
#c argument.
#c
#c The objPass macros are for use with any kind of data which is
#c passed exactly into or out of the method.
#c


#startm .objIn-adornment 00
Impl\
#endm


#startm .objPass-adornment 00
#endm


#startm .objOut-adornment 00
Impl\
#endm
