#c /******************************************\
#c *                                          *
#c * Advanced Authoring Format                *
#c *                                          *
#c * Copyright (c) 1998 Avid Technology, Inc. *
#c * Copyright (c) 1998 Microsoft Corporation *
#c *                                          *
#c \******************************************/



#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
#c
#c AutoDodo macro file for use in generating C++ API header files.
#c
#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_BEGIN 00
#ifndef _Impl.this-module_h_
#define _Impl.this-module_h_

#ifndef _Impl.parent-module_h_
#include "Impl.parent-module.h"
#endif

//@doc
//@class 	Impl.this-module | Implementation class for Impl.this-module

class Impl.this-module : public Impl.parent-module
{
  Impl.this-module ();
  ~Impl.this-module ();
  //
  // Constructor/destructor
  //
  //********
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_BEGIN 00
#ifndef _Impl.this-module_h_
#define _Impl.this-module_h_

//@doc
//@class 	Impl.this-module | Implementation class for Impl.this-module

//
// Forward declaration
//
class Impl.this-module;


class Impl.this-module
{
  Impl.this-module ();
  ~Impl.this-module ();
  //
  // Constructor/destructor
  //
  //********
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes no arguments.
#c
#c Argument1: method name
#c Argument2: method description
#c
#startm AD_METHOD0 02
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 ();
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: method description
#c
#startm AD_METHOD1 06
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
	    (%03 %04);	//@parm %02 %05
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes two arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: method description
#c
#startm AD_METHOD2 10
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
	   (%03 %04,	//@parm %02 %05
		%07 %08);	//@parm %06 %09
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes three arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: method description
#c
#startm AD_METHOD3 14
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
	   (%03 %04,	//@parm %02 %05,
		%07 %08,	//@parm %06 %09,
		%11 %12);	//@parm %10 %13
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes four arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: method description
#c
#startm AD_METHOD4 18
  //****************
  // %01()
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
	   (%03 %04,	//@parm %02 %05
		%07 %08,	//@parm %06 %09
		%11 %12,	//@parm %10 %13
		%15 %16);	//@parm %14 %17
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes five arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: method description
#c
#startm AD_METHOD5 22
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
	   (%03 %04,	//@parm %02 %05
		%07 %08,	//@parm %06 %09
		%11 %12,	//@parm %10 %13
		%15 %16,	//@parm %14 %17
		%19 %20);	//@parm %18 %21
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes six arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: method description
#c
#startm AD_METHOD6 26
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
	   (%03 %04,	//@parm %02 %05
		%07 %08,	//@parm %06 %09
		%11 %12,	//@parm %10 %13
		%15 %16,	//@parm %14 %17
		%19 %20,	//@parm %18 %21
		%23 %24);	//@parm %22 %25
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_END 00
};

#endif // ! _Impl.this-module_h_
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for AAFObject
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_END 00
protected:

  I.this-module * GetCOMParent ();

  .this-module * GetCppParent ()

private:

  I.this-module * _pComParent;

  .this-module * _pCppParent;

};

#endif // ! _Impl.this-module_h_
#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies an overridden method
#c
#c Argument: method declaration
#c
#startm AD_OVERRIDE 01
%01
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes one argument.
#c Constructor name is assumed to be Impl.this-module.
#c
#c Argument1: argument modifiers (e.g. [in])
#c Argument2: argument type
#c Argument3: argument name
#c Argument4: argument comment
#c Argument5: constructor description
#c
#startm AD_CONSTRUCTOR1 05
  //****************
  // constructor
  //
  Impl.this-module
	    (%02 %03);	//@parm %01 %04
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes two arguments.
#c Constructor name is assumed to be Impl.this-module.
#c
#c Argument1: argument modifiers (e.g. [in])
#c Argument2: argument1 type
#c Argument3: argument1 name
#c Argument4: argument1 comment
#c Argument5: argument modifiers (e.g. [in])
#c Argument6: argument2 type
#c Argument7: argument2 name
#c Argument8: argument2 comment
#c Argument9: constructor description
#c
#startm AD_CONSTRUCTOR2 09
  //****************
  // constructor
  //
    Impl.this-module
	   (%02 %03,	//@parm %01 %04
		%06 %07);	//@parm %05 %08
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument, which is
#c a pointer to an AAF object which is to be returned to the caller.
#c This is different from the normal METHOD macro because the
#c _rep will probably have the object in a different form.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: method description
#c
#startm AD_GETOBJ_METHOD1 06
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
	    (Impl%03 ** %04);	//@parm %02 %05
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument, which is
#c a pointer to an AAF object which is to be passed in from the caller.
#c This is different from the normal METHOD macro because the
#c _rep will probably have the object in a different form.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: method description
#c
#startm AD_SETOBJ_METHOD1 06
  //****************
  // %01()
  //
  virtual AAFRESULT STDMETHODCALLTYPE
    %01
	    (Impl%03 * %04);	//@parm %02 %05
#endm
