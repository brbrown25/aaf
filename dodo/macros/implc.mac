#c /******************************************\
#c *                                          *
#c * Advanced Authoring Format                *
#c *                                          *
#c * Copyright (c) 1998 Avid Technology, Inc. *
#c * Copyright (c) 1998 Microsoft Corporation *
#c *                                          *
#c \******************************************/



#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
#c
#c AutoDodo macro file for use in generating C++ API implementation
#c files.
#c
#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


#import macros/base.mac


#ccccccccccccccccccccccccccc
#c
#c Pass through argument if for idl otherwise omit it.
#c 
#c This macro is generally used to specify IDL options that would
#c make since to emit to c++.
#c To allow proper marshalling code generation of a struct: |
#c typedef struct
#c {
#c     aafInt32 length;
#c     AD_IDL([length_is(length)]) aafWchar *str;
#c } aafString_t;
#c
#startm AD_IDL 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Includes another file.
#c
#c Argument: Base filename
#c
#c Note: it is not necessary to expand it here, since it was already
#c included in this module's header file.
#c
#startm AD_INCLUDE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Goes at the head of the file.
#c
#c Arguments: none
#c
#startm AD_HEAD 00
/******************************************\\
*                                          *
* Advanced Authoring Format                *
*                                          *
* Copyright (c) 1998 Avid Technology, Inc. *
* Copyright (c) 1998 Microsoft Corporation *
*                                          *
\\******************************************/
#endm


#ccccccccccccccccccccccccccc
#c
#c AAFTypes support for IDL
#c
#c Arguments: none
#c
#startm AD_TYPES_HEAD 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c 
#c Argument: Pieces of UUID
#c
#c Example:
#c AD_TYPES_BEGIN(b1a21372, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
#c
#startm AD_TYPES_BEGIN 11
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a types definition
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c
#c Arguments: none
#c
#startm AD_TYPES_END 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c
#startm AD_AAFTYPES 01
Impl%01\
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c
#startm AD_DECLARE_FORWARD_AAFTYPES 01
#endm

#ccccccccccccccccccccccccccc
#c
#c Argument1: text to be quoted.
#c 
#c Ignore input this was already processed in the header file. 
#c
#startm AD_CPP_QUOTE 01
#endm

#ccccccccccccccccccccccccccc
#c
#c Generate a forward declaration of a class.
#c
#c Argument: class name
#c
#startm AD_FORWARD_DECLARATION 01
#ifndef __Impl%01_h__
#include "Impl%01.h"
#endif
#endm

#ccccccccccccccccccccccccccc
#c
#c Class UUID.
#c
#c Argument: Pieces of UUID
#c
#startm AD_CLASS_UUID 11
#endm

#ccccccccccccccccccccccccccc
#c
#c Default UUID.
#c
#c Argument: Pieces of UUID
#c
#startm AD_DEFAULT_UUID 11
#endm

#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_BEGIN 00
#ifndef __Impl.this-module_h__
#include "Impl.this-module.h"
#endif

#include <assert.h>


Impl.this-module::Impl.this-module ()
{}


Impl.this-module::~Impl.this-module ()
{}
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for classes which support more than the
#c primary COM interface.
#c
#c Arguments: additional interface name
#c
#startm AD_COM_EXT_CLASS_BEGIN 01
AD_CLASS_BEGIN\
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition with no parent class
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_BEGIN 00
#ifndef __Impl.this-module_h__
#include "Impl.this-module.h"
#endif

#include <assert.h>


Impl.this-module::Impl.this-module ()
: _pContainer (0)
{}


Impl.this-module::~Impl.this-module ()
{}


void Impl.this-module::InitContainer (void * pContainer)
{
  assert (! _pContainer);
  _pContainer = pContainer;
  assert (_pContainer);
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes no arguments.
#c
#c Argument1: method name
#c Argument2: method description
#c
#startm AD_METHOD0 02
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 ()
{
  return AAFRESULT_NOT_IMPLEMENTED;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c
#c Macro Arg 07: method description
#c
#startm AD_XMETHOD1 07
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes two arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c
#c Macro Arg 12: method description
#c
#startm AD_XMETHOD2 12
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes three arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c
#c Macro Arg 17: method description
#c
#startm AD_XMETHOD3 17
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes four arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c
#c Macro Arg 22: method description
#c
#startm AD_XMETHOD4 22
 AAFRESULT STDMETHODCALLTYPE
   Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes five arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c
#c Macro Arg 27: method description
#c
#startm AD_XMETHOD5 27
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes six arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c
#c Macro Arg 32: method description
#c
#startm AD_XMETHOD6 32
AAFRESULT STDMETHODCALLTYPE
   Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes seven arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c
#c Macro Arg 37: method description
#c
#startm AD_XMETHOD7 37
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eight arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c
#c Macro Arg 42: method description
#c
#startm AD_XMETHOD8 42
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/,
                           .%38-adornment%39 .%38-indirection /*%40*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes nine arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c
#c Macro Arg 47: method description
#c
#startm AD_XMETHOD9 47
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/,
                           .%38-adornment%39 .%38-indirection /*%40*/,
                           .%43-adornment%44 .%43-indirection /*%45*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes ten arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c metharg 10   47           48          49      50      51
#c
#c Macro Arg 52: method description
#c
#startm AD_XMETHOD_10 52
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/,
                           .%38-adornment%39 .%38-indirection /*%40*/,
                           .%43-adornment%44 .%43-indirection /*%45*/,
                           .%48-adornment%49 .%48-indirection /*%50*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eleven arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c metharg 10   47           48          49      50      51
#c metharg 11   52           53          54      55      56
#c
#c Macro Arg 57: method description
#c
#startm AD_XMETHOD_11 57
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/,
                           .%38-adornment%39 .%38-indirection /*%40*/,
                           .%43-adornment%44 .%43-indirection /*%45*/,
                           .%48-adornment%49 .%48-indirection /*%50*/,
                           .%53-adornment%54 .%53-indirection /*%55*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_END 00

extern "C" const aafClassID_t CLSID_.this-module;

OMDEFINE_STORABLE(Impl.this-module, CLSID_.this-module);
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for classes which support more than the
#c primary COM interface.
#c
#c Arguments: additional interface name
#c
#startm AD_COM_EXT_CLASS_END 01
AD_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_END 00

void * Impl.this-module::GetContainer ()
{
  assert (_pContainer);
  return _pContainer;
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies an overridden method
#c
#c Argument: method declaration
#c
#startm AD_OVERRIDE 01
%01-implc(.this-module)
#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies a method in a separate COM interface.
#c
#c Argument: method declaration
#c
#startm AD_COM_METH 01
%01-com-meth-implc(.this-module)
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes one argument.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c
#c Macro Arg 06: method description
#c
#startm AD_XCONSTRUCTOR1 06
Impl.this-module::Impl.this-module (.%02-adornment%03 .%02-indirection /*%04*/)
{}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes two arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c
#c Macro Arg 11: method description
#c
#startm AD_XCONSTRUCTOR2 11
Impl.this-module::Impl.this-module (.%02-adornment%03 .%02-indirection /*%04*/,
	.%07-adornment%08 .%07-indirection /*%09*/)
{}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes three arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c metharg 3    11           12          13      14      15
#c
#c Macro Arg 16: method description
#c
#startm AD_XCONSTRUCTOR3 16
Impl.this-module::Impl.this-module (.%02-adornment%03 .%02-indirection /*%04*/,
	.%07-adornment%08 .%07-indirection /*%09*/,
	.%12-adornment%13 .%12-indirection /*%14*/)
{}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes four arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c metharg 3    11           12          13      14      15
#c metharg 4    16           17          18      19      20
#c
#c Macro Arg 21: method description
#c
#startm AD_XCONSTRUCTOR4 21
Impl.this-module::Impl.this-module (.%02-adornment%03 .%02-indirection /*%04*/,
	.%07-adornment%08 .%07-indirection /*%09*/,
	.%12-adornment%13 .%12-indirection /*%14*/,
	.%17-adornment%18 .%17-indirection /*%19*/)
{}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a static method used to bootstrap an AAF
#c session by creating the first session object.
#c
#startm AD_BEGIN_SESSION 00
#endm

#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a static method used for a container to create
#c its contained objects in the cpp API.
#c
#startm AD_STATIC_CREATE 00
#endm


#ccccccccccccccccccccccccccc
#c
#c The following macros assist in passing arguments to methods of the
#c contained implementation class:
#c
#c The objIn macros are for use with pointers to objects that are
#c passed into the method.  The Type argument is the base type, with
#c no indirection specified.  For example, if you're passing in
#c AObject*, AObject should be specified for the Type argument.#c
#c
#c The objOut macros are for use with pointers to pointers to objects
#c that are passed out of the method.  The Type argument is the base
#c type, with no indirection specified.  For example, if you're
#c passing in AObject**, AObject should be specified for the Type
#c argument.
#c
#c The objPass macros are for use with any kind of data which is
#c passed exactly into or out of the method.
#c


#startm .objIn-adornment 00
Impl\
#endm


#startm .objPass-adornment 00
#endm


#startm .objOut-adornment 00
Impl\
#endm


#ccccccccccccccccccccccccccc
#c
#c Hack to quote the .this-module macro and keep it out of export
#c files.  Do not define this macro in exp.mac!!!
#c
#startm AD_EXPORT_THIS_MODULE 00
.this-module\
#endm
