#c /******************************************\
#c *                                          *
#c * Advanced Authoring Format                *
#c *                                          *
#c * Copyright (c) 1998 Avid Technology, Inc. *
#c * Copyright (c) 1998 Microsoft Corporation *
#c *                                          *
#c \******************************************/



#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
#c
#c AutoDodo macro file for use in generating C++ API implementation
#c files.
#c
#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


#import macros/base.mac


#ccccccccccccccccccccccccccc
#c
#c Includes another file.
#c
#c Argument: Base filename
#c
#c Note: it is not necessary to expand it here, since it was already
#c included in this module's header file.
#c
#startm AD_INCLUDE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c 
#c Argument: Pieces of UUID
#c
#c Example:
#c AD_TYPES_BEGIN(b1a21372, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
#c
#c TomR:980716: Added
#c
#startm AD_TYPES_BEGIN 11
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a types definition
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c
#c Arguments: none
#c
#startm AD_TYPES_END 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c
#startm AD_AAFTYPES 01
%01\
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c
#startm AD_DECLARE_FORWARD_AAFTYPES 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: text to be quoted.
#c 
#c Ignore input this was already processed in the header file. 
#c
#startm AD_CPP_QUOTE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c We need to include the class file here since it was only declared as
#c a class in the header.
#c
#c Argument: class name
#c
#startm AD_FORWARD_DECLARATION 01
#ifndef _%01_h_
#include "%01.h";
#endif
#endm


#ccccccccccccccccccccccccccc
#c
#c Class UUID.
#c
#c Argument: Pieces of UUID
#c
#startm AD_CLASS_UUID 11
#endm


#ccccccccccccccccccccccccccc
#c
#c Default UUID.
#c
#c Argument: Pieces of UUID
#c
#startm AD_DEFAULT_UUID 11
#endm


#ccccccccccccccccccccccccccc
#c
#c Goes at the head of the file.
#c
#c Arguments: none
#c
#startm AD_HEAD 00
#endm


#ccccccccccccccccccccccccccc
#c
#c AAFTypes support for IDL
#c
#c Arguments: none
#c
#startm AD_TYPES_HEAD 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_BEGIN 00
#ifndef _.this-module_h_
#include ".this-module.h"
#endif

#ifndef _Impl.this-module_h_
#include "Impl.this-module.h"
#endif

#include <assert.h>

.this-module::.this-module (aafBool doInit)
: .parent-module (AAFFalse)
{
  if (doInit)
    {
#ifdef BOB_TEST
      Impl.this-module * newRep;
      newRep = new Impl.this-module;
      assert (newRep);
      InitRep (newRep);
      newRep->InitParent (this);
#endif
    }
}


.this-module::~.this-module ()
{
#ifdef BOB_TEST
  Impl.this-module * rep;
  rep = GetRepObject ();
  assert (rep);
  delete rep;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition with no parent class
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_BEGIN 00
#ifndef _.this-module_h_
#include ".this-module.h"
#endif

#ifndef _Impl.this-module_h_
#include "Impl.this-module.h"
#endif

#include <assert.h>


.this-module::.this-module (aafBool doInit)
{
  if (doInit)
    {
#ifdef BOB_TEST
      Impl.this-module * newRep;
      newRep = new Impl.this-module;
      assert (newRep);
      InitRep (newRep);
      newRep->InitParent (this);
#endif
    }
}


.this-module::~.this-module ()
{
#ifdef BOB_TEST
  Impl.this-module * rep;
  rep = GetRepObject ();
  assert (rep);
  delete rep;
#endif
}


void .this-module::InitRep (Impl.this-module * newRep)
{
#ifdef BOB_TEST
  assert (newRep);
  assert (_rep);
  _rep = newRep;
  newRep->InitParent (this);
#endif
}


Impl.this-module * .this-module::GetRepObject ()
{
#ifdef BOB_TEST
  assert (_rep);
  return _rep;
#else
    return ((Impl.this-module *)NULL);
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes no arguments.
#c
#c Argument1: method name
#c Argument2: method description
#c
#startm AD_METHOD0 02
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 ()
{
#ifdef BOB_TEST
  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);
  return ptr->%01();
#else
    return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c
#c Macro Arg 07: method description
#c
#startm AD_XMETHOD1 07
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
  stat = ptr->%01 (.%03-internalname(%05));
.%03-cleanup(%04, %05)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes two arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c
#c Macro Arg 12: method description
#c
#startm AD_XMETHOD2 12
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes three arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c
#c Macro Arg 17: method description
#c
#startm AD_XMETHOD3 17
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes four arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c
#c Macro Arg 22: method description
#c
#startm AD_XMETHOD4 22
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes five arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c
#c Macro Arg 27: method description
#c
#startm AD_XMETHOD5 27
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20,
		%24 .%23-indirection %25)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes six arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c
#c Macro Arg 32: method description
#c
#startm AD_XMETHOD6 32
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20,
		%24 .%23-indirection %25,
		%29 .%28-indirection %30)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25),
	.%28-internalname(%30));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes seven arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c
#c Macro Arg 37: method description
#c
#startm AD_XMETHOD7 37
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20,
		%24 .%23-indirection %25,
		%29 .%28-indirection %30,
		%34 .%33-indirection %35)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25),
	.%28-internalname(%30),
	.%33-internalname(%35));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eight arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c
#c Macro Arg 42: method description
#c
#startm AD_XMETHOD8 42
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20,
		%24 .%23-indirection %25,
		%29 .%28-indirection %30,
		%34 .%33-indirection %35,
		%39 .%38-indirection %40)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
.%38-setup(%39, %40)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25),
	.%28-internalname(%30),
	.%33-internalname(%35),
	.%38-internalname(%40));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
.%38-cleanup(%39, %40)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes nine arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c
#c Macro Arg 47: method description
#c
#startm AD_XMETHOD9 47
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20,
		%24 .%23-indirection %25,
		%29 .%28-indirection %30,
		%34 .%33-indirection %35,
		%39 .%38-indirection %40,
		%44 .%43-indirection %45)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
.%38-setup(%39, %40)
.%43-setup(%44, %45)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25),
	.%28-internalname(%30),
	.%33-internalname(%35),
	.%38-internalname(%40),
	.%43-internalname(%45));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
.%38-cleanup(%39, %40)
.%43-cleanup(%44, %45)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes ten arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c metharg 10   47           48          49      50      51
#c
#c Macro Arg 52: method description
#c
#startm AD_XMETHOD_10 52
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20,
		%24 .%23-indirection %25,
		%29 .%28-indirection %30,
		%34 .%33-indirection %35,
		%39 .%38-indirection %40,
		%44 .%43-indirection %45,
		%49 .%48-indirection %50)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
.%38-setup(%39, %40)
.%43-setup(%44, %45)
.%48-setup(%49, %50)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25),
	.%28-internalname(%30),
	.%33-internalname(%35),
	.%38-internalname(%40),
	.%43-internalname(%45),
	.%48-internalname(%50));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
.%38-cleanup(%39, %40)
.%43-cleanup(%44, %45)
.%48-cleanup(%49, %50)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eleven arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c metharg 10   47           48          49      50      51
#c metharg 11   52           53          54      55      56
#c
#c Macro Arg 57: method description
#c
#startm AD_XMETHOD_11 57
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
	    %09 .%08-indirection %10,
        %14 .%13-indirection %15,
        %19 .%18-indirection %20,
        %24 .%23-indirection %25,
        %29 .%28-indirection %30,
        %34 .%33-indirection %35,
        %39 .%38-indirection %40,
        %44 .%43-indirection %45,
        %49 .%48-indirection %50,
        %54 .%53-indirection %55)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFObject * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
.%38-setup(%39, %40)
.%43-setup(%44, %45)
.%48-setup(%49, %50)
.%53-setup(%54, %55)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25),
	.%28-internalname(%30),
	.%33-internalname(%35),
	.%38-internalname(%40),
	.%43-internalname(%45),
	.%48-internalname(%50),
	.%53-internalname(%55));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
.%38-cleanup(%39, %40)
.%43-cleanup(%44, %45)
.%48-cleanup(%49, %50)
.%53-cleanup(%54, %55)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_END 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_END 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies an overridden method
#c
#c Argument: method declaration
#c
#startm AD_OVERRIDE 01
%01-cpp(.this-module)
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes one argument.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c
#c Macro Arg 06: method description
#c
#startm AD_XCONSTRUCTOR1 06
.this-module::.this-module (%03 .%02-indirection %04)
{
#ifdef BOB_TEST
.%02-setup(%03, %04)
  Impl.this-module * newRep;
  newRep = new Impl.this-module (%04);
  assert (newRep);
  InitRep (newRep);
.%02-cleanup(%03, %04)
#else
  // return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes two arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c
#c Macro Arg 11: method description
#c
#startm AD_XCONSTRUCTOR2 11
AAFRESULT STDMETHODCALLTYPE
    .this-module::.this-module (%03 .%02-indirection %04,
								%08 .%07-indirection %09)
{
#ifdef BOB_TEST
.%02-setup(%03, %04)
.%07-setup(%08, %09)
  Impl.this-module * newRep;
  newRep = new Impl.this-module (%04,
								 %09);
  assert (newRep);
  InitRep (newRep);
.%02-cleanup(%03, %04)
.%07-cleanup(%08, %09)
#else
  // return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes three arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c metharg 3    11           12          13      14      15
#c
#c Macro Arg 16: method description
#c
#startm AD_XCONSTRUCTOR3 16
AAFRESULT STDMETHODCALLTYPE
    .this-module::.this-module (%03 .%02-indirection %04,
								%08 .%07-indirection %09,
								%13 .%12-indirection %14)
{
#ifdef BOB_TEST
.%02-setup(%03, %04)
.%07-setup(%08, %09)
.%12-setup(%13, %14)
  Impl.this-module * newRep;
  newRep = new Impl.this-module (%04,
								 %09,
								 %14);
  assert (newRep);
  InitRep (newRep);
.%02-cleanup(%03, %04)
.%07-cleanup(%08, %09)
.%12-cleanup(%13, %14)
#else
  // return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes four arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c metharg 3    11           12          13      14      15
#c metharg 4    16           17          18      19      20
#c
#c Macro Arg 21: method description
#c
#startm AD_XCONSTRUCTOR4 21
AAFRESULT STDMETHODCALLTYPE
    .this-module::.this-module (%03 .%02-indirection %04,
								%08 .%07-indirection %09,
								%13 .%12-indirection %14,
								%18 .%17-indirection %19)
{
#ifdef BOB_TEST
.%02-setup(%03, %04)
.%07-setup(%08, %09)
.%12-setup(%13, %14)
.%17-setup(%18, %19)
  Impl.this-module * newRep;
  newRep = new Impl.this-module (%04,
								 %09,
								 %14,
								 %19);
  assert (newRep);
  InitRep (newRep);
.%02-cleanup(%03, %04)
.%07-cleanup(%08, %09)
.%12-cleanup(%13, %14)
.%17-cleanup(%18, %19)
#else
  // return AAFRESULT_NOT_IMPLEMENTED;
#endif
}
#endm


#ccccccccccccccccccccccccccc
#c
#c The following macros assist in passing arguments to methods of the
#c contained implementation class:
#c
#c The objIn macros are for use with pointers to objects that are
#c passed into the method.  The Type argument is the base type, with
#c no indirection specified.  For example, if you're passing in
#c AObject*, AObject should be specified for the Type argument.#c
#c
#c The objOut macros are for use with pointers to pointers to objects
#c that are passed out of the method.  The Type argument is the base
#c type, with no indirection specified.  For example, if you're
#c passing in AObject**, AObject should be specified for the Type
#c argument.
#c
#c The objPass macros are for use with any kind of data which is
#c passed exactly into or out of the method.
#c


#ccccccccccccccccccccccccccc
#c
#c #define .objIn-setup(T, externArg, internArg)
#c
#c arg1 = unadorned type
#c arg2 = external arg name
#c
#startm .objIn-setup 02
  Impl%01 * internal%02 = NULL;
  if (%02)
    {
	  internal%02 = static_cast<Impl%01*>(%02->GetImpl());
	  assert (internal%02);
    }
#endm


#ccccccccccccccccccccccccccc
#c
#c #define .objPass-setup(T, externArg, internArg)		/* nothing */
#c
#c arg1 = unadorned type
#c arg2 = external arg name
#c
#startm .objPass-setup 02
#endm


#ccccccccccccccccccccccccccc
#c
#c #define .objOut-setup(T, externArg, internArg)
#c
#c arg1 = unadorned type
#c arg2 = external arg name
#c
#startm .objOut-setup 02
  Impl%01 * internal%02;
  Impl%01 ** pinternal%02 = NULL;
  if (%02)
    {
	  pinternal%02 = &internal%02;
    }
#endm


#ccccccccccccccccccccccccccc
#c
#c #define .objIn-internalname(externArg, internArg)	(internArg)
#c
#c arg1 = external arg name
#c
#startm .objIn-internalname 01
internal%01\
#endm


#ccccccccccccccccccccccccccc
#c
#c #define .objPass-internalname(externArg, internArg)	(internArg)
#c
#c arg1 = external arg name
#c
#startm .objPass-internalname 01
%01\
#endm


#ccccccccccccccccccccccccccc
#c
#c #define .objOut-internalname(externArg, internArg)	(internArg)
#c
#c arg1 = external arg name
#c
#startm .objOut-internalname 01
pinternal%01\
#endm


#ccccccccccccccccccccccccccc
#c
#c #define .objIn-cleanup(T, externArg, internArg)		/* nothing */
#c
#c arg1 = unadorned type
#c arg2 = external arg name
#c
#startm .objIn-cleanup 02
#endm


#ccccccccccccccccccccccccccc
#c
#c #define .objPass-cleanup(T, externArg, internArg)	/* nothing */
#c
#c arg1 = unadorned type
#c arg2 = external arg name
#c
#startm .objPass-cleanup 02
#endm


#ccccccccccccccccccccccccccc
#c
#c #define .objOut-cleanup(T, externArg, internArg)
#c
#c arg1 = unadorned type
#c arg2 = external arg name
#c
#startm .objOut-cleanup 02
  if (internal%02)
    {
	  assert (%02);
	  *%02 = static_cast<%01*>(internal%02->GetContainer());
	  assert (*%02);
	}
  else
    {
	  *%02 = NULL;
	}
#endm
