#c /******************************************\
#c *                                          *
#c * Advanced Authoring Format                *
#c *                                          *
#c * Copyright (c) 1998 Avid Technology, Inc. *
#c * Copyright (c) 1998 Microsoft Corporation *
#c *                                          *
#c \******************************************/



#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
#c
#c AutoDodo macro file for use in generating COM API implementation
#c header files.
#c
#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


#ccccccccccccccccccccccccccc
#c
#c Includes another file.
#c
#c Argument: Base filename
#c
#startm AD_INCLUDE 01
#ifndef _%01_h_
#include "%01.h"
#endif
#endm


#ccccccccccccccccccccccccccc
#c
#c Goes at the head of the file.
#c
#c Arguments: none
#c
#startm AD_HEAD 00
//@doc
//@class 	.this-module | Implementation class for .this-module
#ifndef _C.this-module_h_
#define _C.this-module_h_
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_BEGIN 00
#ifndef _C.parent-module_h_
#include "C.parent-module.h"
#endif

#ifndef _I.this-module_h_
#include "I.this-module.h"
#endif

//
// Forward declaration
//
class Impl.this-module;


class C.this-module
  : public C.parent-module,
    public I.this-module
{
  C.this-module (AAFBool doInit = AAFTrue);
  ~C.this-module ();
  //
  // Constructor/destructor
  //
  //********
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition with no parent class
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_BEGIN 00
#ifndef _I.this-module_h_
#include "I.this-module.h"
#endif

//
// Forward declaration
//
class Impl.this-module;


class C.this-module
  : public I.this-module
{
public:
  C.this-module (AAFBool doInit = AAFTrue);
  ~C.this-module ();
  //
  // Constructor/destructor
  //
  //********
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes no arguments.
#c
#c Argument1: method name
#c Argument2: method description
#c
#startm AD_METHOD0 02
  virtual AAFRESULT STDMETHODCALLTYPE
    %02 ();
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: method description
#c
#startm AD_METHOD1 06
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (%03 %04);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes two arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: method description
#c
#startm AD_METHOD2 10
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (%03 %04, %07 %08);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes three arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: method description
#c
#startm AD_METHOD3 14
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (%03 %04, %07 %08, %11 %12);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes four arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: method description
#c
#startm AD_METHOD4 18
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (%03 %04, %07 %08, %11 %12, %15 %16);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes five arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: method description
#c
#startm AD_METHOD5 22
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (%03 %04, %07 %08, %11 %12, %15 %16, %19 %20);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes six arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: method description
#c
#startm AD_METHOD6 26
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (%03 %04, %07 %08, %11 %12, %15 %16, %19 %20, %23 %24);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_END 00
  //
  // Class Factory implemented as static functions.
  // 
  static AAFRESULT STDAPICALLTYPE CreateInstance
	(AD_ARGSPEC([in]) LPUNKNOWN pUnkOuter,
	 AD_ARGSPEC([in]) REFIID riid, 
	 AD_ARGSPEC([out]) void **ppObj); 
  //
  //********
};

#endif // ! _C.this-module_h_
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for AAFObject
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_END 00
  //
  // Class Factory implemented as static functions.
  // 
  static AAFRESULT STDAPICALLTYPE CreateInstance
	(AD_ARGSPEC([in]) LPUNKNOWN pUnkOuter,
	 AD_ARGSPEC([in]) REFIID riid, 
	 AD_ARGSPEC([out]) void **pp.this-module); 
  //
  //********

protected:

  Impl.this-module * GetRepObject ();

  void InitRep (Impl.this-module * pObj);

private:

  Impl.this-module * _rep;

};

#endif // ! _C.this-module_h_
#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies an overridden method
#c
#c Argument: method declaration
#c
#startm AD_OVERRIDE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes one argument.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument modifiers (e.g. [in])
#c Argument2: argument type
#c Argument3: argument name
#c Argument4: argument comment
#c Argument5: constructor description
#c
#startm AD_CONSTRUCTOR1 05
    C.this-module (%02 %03);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes two arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument1 modifiers (e.g. [in])
#c Argument2: argument1 type
#c Argument3: argument1 name
#c Argument4: argument1 comment
#c Argument5: argument2 modifiers (e.g. [in])
#c Argument6: argument2 type
#c Argument7: argument2 name
#c Argument8: argument2 comment
#c Argument9: constructor description
#c
#startm AD_CONSTRUCTOR2 09
    C.this-module (%02 %03,%06 %07);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes three arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument1 modifiers (e.g. [in])
#c Argument2: argument1 type
#c Argument3: argument1 name
#c Argument4: argument1 comment
#c Argument5: argument2 modifiers (e.g. [in])
#c Argument6: argument2 type
#c Argument7: argument2 name
#c Argument8: argument2 comment
#c Argument9: argument3 modifiers (e.g. [in])
#c Argument10: argument3 type
#c Argument11: argument3 name
#c Argument12: argument3 comment
#c Argument13: constructor description
#c
#startm AD_CONSTRUCTOR3 13
    C.this-module (%02 %03,
				   %06 %07,
				   %10 %11);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes four arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument1 modifiers (e.g. [in])
#c Argument2: argument1 type
#c Argument3: argument1 name
#c Argument4: argument1 comment
#c Argument5: argument2 modifiers (e.g. [in])
#c Argument6: argument2 type
#c Argument7: argument2 name
#c Argument8: argument2 comment
#c Argument9: argument3 modifiers (e.g. [in])
#c Argument10: argument3 type
#c Argument11: argument3 name
#c Argument12: argument3 comment
#c Argument13: argument4 modifiers (e.g. [in])
#c Argument14: argument4 type
#c Argument15: argument4 name
#c Argument16: argument4 comment
#c Argument17: constructor description
#c
#startm AD_CONSTRUCTOR4 17
    C.this-module (%02 %03,
				   %06 %07,
				   %10 %11,
				   %14 %15);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument, which is
#c a pointer to an AAF object which is to be returned to the caller.
#c This is different from the normal METHOD macro because the
#c _rep will probably have the object in a different form.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: method description
#c
#c NOTE!!! This macro takes as type, the object itself, not the
#c pointer to it.  The indirection will be added by the macro
#c expansion.
#c
#startm AD_GETOBJ_METHOD1 06
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (I%03 ** %04);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument, which is
#c a pointer to an AAF object which is to be passed in from the caller.
#c This is different from the normal METHOD macro because the
#c _rep will probably have the object in a different form.
#c
#c NOTE!!! This macro takes as type, the object itself, not the
#c pointer to it.  The indirection will be added by the macro
#c expansion.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: method description
#c
#startm AD_SETOBJ_METHOD1 06
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (I%03 * %04);\
#endm
