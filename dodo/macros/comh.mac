#c /******************************************\
#c *                                          *
#c * Advanced Authoring Format                *
#c *                                          *
#c * Copyright (c) 1998 Avid Technology, Inc. *
#c * Copyright (c) 1998 Microsoft Corporation *
#c *                                          *
#c \******************************************/



#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
#c
#c AutoDodo macro file for use in generating COM API implementation
#c header files.
#c
#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


#ccccccccccccccccccccccccccc
#c
#c Includes another file.
#c
#c Argument: Base filename
#c
#startm AD_INCLUDE 01
#ifndef _%01_h_
#include "%01.h"
#endif
#endm


#ccccccccccccccccccccccccccc
#c
#c Goes at the head of the file.
#c
#c Arguments: none
#c
#startm AD_HEAD 00
//@doc
//@class    .this-module | Implementation class for .this-module
#ifndef _C.this-module_h_
#define _C.this-module_h_
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_BEGIN 00
#ifndef _C.parent-module_h_
#include "C.parent-module.h"
#endif

#ifndef _I.this-module_h_
#include "I.this-module.h"
#endif

//
// Forward declaration
//
class Impl.this-module;


class C.this-module
  : public I.this-module,
    public C.parent-module
{
  //
  // Constructor/destructor
  //
  C.this-module (IUnknown * pControllingUnknown, AAFBool doInit = AAFTrue);
  ~C.this-module ();

  //********
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition with no parent class
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_BEGIN 00
#ifndef _CAAFUnknown_h_
#include "CAAFUnknown.h"
#endif

#ifndef _I.this-module_h_
#include "I.this-module.h"
#endif

//
// Forward declaration
//
class Impl.this-module;


class C.this-module
  : public I.this-module,
    public CAAFUnknown
{
public:
  //
  // Constructor/destructor
  //
  C.this-module (IUnknown * pControllingUnknown, AAFBool doInit = AAFTrue);
  virtual ~C.this-module ();

  //********
#endm



#ccccccccccccccccccccccccccc
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c 
#c
#c GUID
#c Argument01: hex long  0-3[leading 0's w/o leading 0x]
#c Argument02: hex short 4-5[leading 0's w/o leading 0x]
#c Argument03: hex short 6-7[leading 0's w/o leading 0x]
#c Argument04: hex byte   8 [leading 0's w/o leading 0x]
#c Argument05: hex byte   9 [leading 0's w/o leading 0x]
#c Argument06: hex byte  10 [leading 0's w/o leading 0x]
#c Argument07: hex byte  11 [leading 0's w/o leading 0x]
#c Argument08: hex byte  12 [leading 0's w/o leading 0x]
#c Argument09: hex byte  13 [leading 0's w/o leading 0x]
#c Argument10: hex byte  14 [leading 0's w/o leading 0x]
#c Argument11: hex byte  15 [leading 0's w/o leading 0x]
#c
#c Example:
#c AD_TYPES_BEGIN(b1a21372, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
#c
#c TomR:980716: Added
#c
#startm AD_TYPES_BEGIN 11
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a types definition
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c
#c Arguments: none
#c
#startm AD_TYPES_END 00
#endif // ! _C.this-module_h_
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes no arguments.
#c
#c Argument1: method name
#c Argument2: method description
#c
#startm AD_METHOD0 02
  // %02
  STDMETHOD_(AAFRESULT, %01)
     ();
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: method description
#c
#startm AD_METHOD1 06
  // %06
  STDMETHOD_(AAFRESULT, %01)
    (/*%02*/ %03 %04); // %05 \
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes two arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: method description
#c
#startm AD_METHOD2 10
  // %10
  STDMETHOD_(AAFRESULT, %01)
    (/*%02*/ %03 %04, // %05
	 /*%06*/ %07 %08); // %09 \
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes three arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: method description
#c
#startm AD_METHOD3 14
  // %14
  STDMETHOD_(AAFRESULT, %01)
    (/*%02*/ %03 %04, // %05
	 /*%06*/ %07 %08, // %09
	 /*%10*/ %11 %12); // %13 \
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes four arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: method description
#c
#startm AD_METHOD4 18
  // %18
  STDMETHOD_(AAFRESULT, %01)
    (/*%02*/ %03 %04, // %05
	 /*%06*/ %07 %08, // %09
	 /*%10*/ %11 %12, // %13
	 /*%14*/ %15 %16); // %17 \
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes five arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: method description
#c
#startm AD_METHOD5 22
  // %22
  STDMETHOD_(AAFRESULT, %01)
    (/*%02*/ %03 %04, // %05
	 /*%06*/ %07 %08, // %09
	 /*%10*/ %11 %12, // %13
	 /*%14*/ %15 %16, // %17
	 /*%18*/ %19 %20); // %21 \
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes six arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: method description
#c
#startm AD_METHOD6 26
  // %26
  STDMETHOD_(AAFRESULT, %01)
    (/*%02*/ %03 %04, // %05
	 /*%06*/ %07 %08, // %09
	 /*%10*/ %11 %12, // %13
	 /*%14*/ %15 %16, // %17
	 /*%18*/ %19 %20, // %21
	 /*%22*/ %23 %24); // %25 \
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes six arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: argument modifiers (e.g. [in])
#c Argument27: argument type
#c Argument28: argument name
#c Argument29: argument comment
#c Argument30: method description
#c
#startm AD_METHOD7 30
  // %30
  STDMETHOD_(AAFRESULT, %01)
    (/*%02*/ %03 %04, // %05
	 /*%06*/ %07 %08, // %09
	 /*%10*/ %11 %12, // %13
	 /*%14*/ %15 %16, // %17
	 /*%18*/ %19 %20, // %21
	 /*%22*/ %23 %24, // %25
	 /*%26*/ %27 %28); // %29 \
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes six arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: argument modifiers (e.g. [in])
#c Argument27: argument type
#c Argument28: argument name
#c Argument29: argument comment
#c Argument30: argument modifiers (e.g. [in])
#c Argument31: argument type
#c Argument32: argument name
#c Argument33: argument comment
#c Argument34: method description
#c
#startm AD_METHOD7 34
  // %34
  STDMETHOD_(AAFRESULT, %01)
    (/*%02*/ %03 %04, // %05
	 /*%06*/ %07 %08, // %09
	 /*%10*/ %11 %12, // %13
	 /*%14*/ %15 %16, // %17
	 /*%18*/ %19 %20, // %21
	 /*%22*/ %23 %24, // %25
	 /*%26*/ %27 %28, // %29
	 /*%30*/ %31 %32); // %33 \
#endm

#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes seven arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: argument modifiers (e.g. [in])
#c Argument27: argument type
#c Argument28: argument name
#c Argument29: argument comment
#c Argument30: method description
#c
#startm AD_METHOD7 30
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (%03 %04, %07 %08, %11 %12, %15 %16, %19 %20, %23 %24,%27 %28);\
#endm

#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eight arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: argument modifiers (e.g. [in])
#c Argument27: argument type
#c Argument28: argument name
#c Argument29: argument comment
#c Argument30: argument modifiers (e.g. [in])
#c Argument31: argument type
#c Argument32: argument name
#c Argument33: argument comment
#c Argument34: method description
#c
#startm AD_METHOD8 34
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (%03 %04, %07 %08, %11 %12, %15 %16, %19 %20, %23 %24,%27 %28,%31 %32);\
#endm

#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes nine arguments.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: argument modifiers (e.g. [in])
#c Argument7: argument type
#c Argument8: argument name
#c Argument9: argument comment
#c Argument10: argument modifiers (e.g. [in])
#c Argument11: argument type
#c Argument12: argument name
#c Argument13: argument comment
#c Argument14: argument modifiers (e.g. [in])
#c Argument15: argument type
#c Argument16: argument name
#c Argument17: argument comment
#c Argument18: argument modifiers (e.g. [in])
#c Argument19: argument type
#c Argument20: argument name
#c Argument21: argument comment
#c Argument22: argument modifiers (e.g. [in])
#c Argument23: argument type
#c Argument24: argument name
#c Argument25: argument comment
#c Argument26: argument modifiers (e.g. [in])
#c Argument27: argument type
#c Argument28: argument name
#c Argument29: argument comment
#c Argument30: argument modifiers (e.g. [in])
#c Argument31: argument type
#c Argument32: argument name
#c Argument33: argument comment
#c Argument34: argument modifiers (e.g. [in])
#c Argument35: argument type
#c Argument36: argument name
#c Argument37: argument comment
#c Argument38: method description
#c
#startm AD_METHOD9 38
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (%03 %04, %07 %08, %11 %12, %15 %16, %19 %20, %23 %24,%27 %28,%31 %32,%35 %36);\
#endm

#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_END 00
  // 
  // Declare the QI that implements for the interfaces
  // for this module. This will be called by CAAFUnknown::QueryInterface().
  // 
  virtual HRESULT InternalQueryInterface(REFIID riid, void **ppvObjOut);


public:
  //
  // This class as concrete. All AAF objects can be constructed from
  // a CLSID. This will allow subclassing all "base-classes" by
  // aggreggation.
  // 
  AAF_DECLARE_CONCRETE();
  //
  //********

  //
  // Return private implementation pointer for delegation.
  // NOTE: This is NOT the pointer to the COM object's implementation
  // object!
  //
  STDMETHOD_(void *, GetImplRep)();
};

#endif // ! _C.this-module_h_
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for AAFObject
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_END 00

protected:
  // 
  // Declare the QI that implements for the interfaces
  // for this module. This will be called by CAAFUnknown::QueryInterface().
  // 
  virtual HRESULT InternalQueryInterface(REFIID riid, void **ppvObjOut);


public:
  //
  // This class as concrete. All AAF objects can be constructed from
  // a CLSID. This will allow subclassing all "base-classes" by
  // aggreggation.
  // 
  AAF_DECLARE_CONCRETE();
  //
  //********

  //
  // Return private implementation pointer for delegation.
  // NOTE: This is NOT the pointer to the COM object's implementation
  // object!
  //
  STDMETHOD_(void *, GetImplRep)();

protected:

  Impl.this-module * GetRepObject ();

  void InitRep (Impl.this-module * pObj);

private:

  Impl.this-module * _rep;

};

#endif // ! _C.this-module_h_
#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies an overridden method
#c
#c Argument: method declaration
#c
#startm AD_OVERRIDE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes one argument.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument modifiers (e.g. [in])
#c Argument2: argument type
#c Argument3: argument name
#c Argument4: argument comment
#c Argument5: constructor description
#c
#startm AD_CONSTRUCTOR1 05
    C.this-module (%02 %03);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes two arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument1 modifiers (e.g. [in])
#c Argument2: argument1 type
#c Argument3: argument1 name
#c Argument4: argument1 comment
#c Argument5: argument2 modifiers (e.g. [in])
#c Argument6: argument2 type
#c Argument7: argument2 name
#c Argument8: argument2 comment
#c Argument9: constructor description
#c
#startm AD_CONSTRUCTOR2 09
    C.this-module (%02 %03,%06 %07);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes three arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument1 modifiers (e.g. [in])
#c Argument2: argument1 type
#c Argument3: argument1 name
#c Argument4: argument1 comment
#c Argument5: argument2 modifiers (e.g. [in])
#c Argument6: argument2 type
#c Argument7: argument2 name
#c Argument8: argument2 comment
#c Argument9: argument3 modifiers (e.g. [in])
#c Argument10: argument3 type
#c Argument11: argument3 name
#c Argument12: argument3 comment
#c Argument13: constructor description
#c
#startm AD_CONSTRUCTOR3 13
    C.this-module (%02 %03,
                   %06 %07,
                   %10 %11);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes four arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Argument1: argument1 modifiers (e.g. [in])
#c Argument2: argument1 type
#c Argument3: argument1 name
#c Argument4: argument1 comment
#c Argument5: argument2 modifiers (e.g. [in])
#c Argument6: argument2 type
#c Argument7: argument2 name
#c Argument8: argument2 comment
#c Argument9: argument3 modifiers (e.g. [in])
#c Argument10: argument3 type
#c Argument11: argument3 name
#c Argument12: argument3 comment
#c Argument13: argument4 modifiers (e.g. [in])
#c Argument14: argument4 type
#c Argument15: argument4 name
#c Argument16: argument4 comment
#c Argument17: constructor description
#c
#startm AD_CONSTRUCTOR4 17
    C.this-module (%02 %03,
                   %06 %07,
                   %10 %11,
                   %14 %15);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument, which is
#c a pointer to an AAF object which is to be returned to the caller.
#c This is different from the normal METHOD macro because the
#c _rep will probably have the object in a different form.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: method description
#c
#c NOTE!!! This macro takes as type, the object itself, not the
#c pointer to it.  The indirection will be added by the macro
#c expansion.
#c
#startm AD_GETOBJ_METHOD1 06
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (I%03 ** %04);\
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument, which is
#c a pointer to an AAF object which is to be passed in from the caller.
#c This is different from the normal METHOD macro because the
#c _rep will probably have the object in a different form.
#c
#c NOTE!!! This macro takes as type, the object itself, not the
#c pointer to it.  The indirection will be added by the macro
#c expansion.
#c
#c Argument1: method name
#c Argument2: argument modifiers (e.g. [in])
#c Argument3: argument type
#c Argument4: argument name
#c Argument5: argument comment
#c Argument6: method description
#c
#startm AD_SETOBJ_METHOD1 06
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (I%03 * %04);\
#endm

#ccccccccccccccccccccccccccc
#c
#c Forward declaration of another interface.
#c
#c Argument: Base name
#c
#c This should not actually be used since the midl compiler will normally generate
#c the associated com cpp interface file. Included here for completeness and 
#c testing puposes only.
#c
#c TomR:980713: Added
#c
#startm AD_FORWARD_DECLARATION 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: text to be quoted.
#c 
#c Just pass through the input. 
#c
#c This should not actually be used since the midl compiler will normally generate
#c the associated com cpp interface file. Included here for completeness and 
#c testing puposes only.
#c
#c TomR:added 980714
#c
#startm AD_CPP_QUOTE 01
%01 \
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c NOTE: The \n is escaped so that the macro can be used
#c in a statement without emitting a new line.
#c
#c This should not actually be used since the midl compiler will normally generate
#c the associated com cpp interface file. Included here for completeness and 
#c testing puposes only.
#c
#c TomR:added 980714
#c
#startm AD_AAFTYPES 01
I%01 \
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c
#c This should not actually be used since the midl compiler will normally generate
#c the associated com cpp interface file. Included here for completeness and 
#c testing puposes only.
#c
#c TomR:added 980714
#c
#startm AD_DECLARE_FORWARD_AAFTYPES 01
#ifndef __I%01_FWD_DEFINED__
#define __I%01_FWD_DEFINED__
typedef interface I%01 I%01;
#endif 	/* __I%01_FWD_DEFINED__ */
#endm


#ccccccccccccccccccccccccccc
#c
#c Defining the interface UUID.
#c NOTE: Should be placed immediately before AD_CLASS_BEGIN
#c
#c GUID
#c Argument01: hex long  0-3[leading 0's w/o leading 0x]
#c Argument02: hex short 4-5[leading 0's w/o leading 0x]
#c Argument03: hex short 6-7[leading 0's w/o leading 0x]
#c Argument04: hex byte   8 [leading 0's w/o leading 0x]
#c Argument05: hex byte   9 [leading 0's w/o leading 0x]
#c Argument06: hex byte  10 [leading 0's w/o leading 0x]
#c Argument07: hex byte  11 [leading 0's w/o leading 0x]
#c Argument08: hex byte  12 [leading 0's w/o leading 0x]
#c Argument09: hex byte  13 [leading 0's w/o leading 0x]
#c Argument10: hex byte  14 [leading 0's w/o leading 0x]
#c Argument11: hex byte  15 [leading 0's w/o leading 0x]
#c
#c Example:
#c AD_DEFAULT_UUID(b1a21372, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
#c
#c TomR:980713: Added
#c
#startm AD_DEFAULT_UUID 11
// Default Interface for .this-module 
// {%01-%02-%03-%04%05-%06%07%08%09%10%11}
extern "C" IID IID_I.this-module;
#endm


#ccccccccccccccccccccccccccc
#c
#c Defining the Class "Factory" UUID.
#c NOTE: should be placed before AD_DEFAULT_UUID or after
#c AD_CLASS_END
#c
#c GUID
#c Argument01: hex long  0-3[leading 0's w/o leading 0x]
#c Argument02: hex short 4-5[leading 0's w/o leading 0x]
#c Argument03: hex short 6-7[leading 0's w/o leading 0x]
#c Argument04: hex byte   8 [leading 0's w/o leading 0x]
#c Argument05: hex byte   9 [leading 0's w/o leading 0x]
#c Argument06: hex byte  10 [leading 0's w/o leading 0x]
#c Argument07: hex byte  11 [leading 0's w/o leading 0x]
#c Argument08: hex byte  12 [leading 0's w/o leading 0x]
#c Argument09: hex byte  13 [leading 0's w/o leading 0x]
#c Argument10: hex byte  14 [leading 0's w/o leading 0x]
#c Argument11: hex byte  15 [leading 0's w/o leading 0x]
#c
#c Example:
#c AD_CLASS_UUID(b1a21373, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
#c
#c TomR:980713: Added
#c
#startm AD_CLASS_UUID 11
// CLSID for .this-module 
// {%01-%02-%03-%04%05-%06%07%08%09%10%11}
extern "C" CLSID CLSID_.this-module;
#endm
