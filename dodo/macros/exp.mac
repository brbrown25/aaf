#c /******************************************\
#c *                                          *
#c * Advanced Authoring Format                *
#c *                                          *
#c * Copyright (c) 1998 Avid Technology, Inc. *
#c * Copyright (c) 1998 Microsoft Corporation *
#c *                                          *
#c \******************************************/



#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
#c
#c AutoDodo macro file for use in intermediate export files for use in
#c other AutoDodo source files.
#c
#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


#import macros/base.mac


#ccccccccccccccccccccccccccc
#c
#c Pass through argument if for idl otherwise omit it.
#c 
#c This macro is generally used to specify IDL options that would
#c make since to emit to c++.
#c To allow proper marshalling code generation of a struct: |
#c typedef struct
#c {
#c     aafInt32 length;
#c     AD_IDL([length_is(length)]) aafWchar *str;
#c } aafString_t;
#c
#startm AD_IDL 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Includes another file.
#c
#c Argument: Base filename
#c
#startm AD_INCLUDE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Goes at the head of the file.
#c
#c Arguments: none
#c
#startm AD_HEAD 00
#endm


#ccccccccccccccccccccccccccc
#c
#c AAFTypes support for IDL
#c
#c Arguments: none
#c
#startm AD_TYPES_HEAD 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_BEGIN 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_COM_EXT_CLASS_BEGIN 01
AD_CLASS_BEGIN\
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_COM_EXT_CLASS_BEGIN 00
AD_CLASS_BEGIN
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition with no parent class
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_BEGIN 00
#endm

#ccccccccccccccccccccccccccc
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c 
#c Argument: Pieces of UUID
#c
#c Example:
#c AD_TYPES_BEGIN(b1a21372, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
#c
#c TomR:980716: Added
#c
#startm AD_TYPES_BEGIN 11
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a types definition
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c
#c Arguments: none
#c
#startm AD_TYPES_END 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c
#startm AD_AAFTYPES 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c
#startm AD_DECLARE_FORWARD_AAFTYPES 01
#endm

#ccccccccccccccccccccccccccc
#c
#c Argument1: text to be quoted.
#c 
#c Ignore input 
#c
#startm AD_CPP_QUOTE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes no arguments.
#c
#c Argument1: method name
#c Argument2: method description
#c
#startm AD_METHOD0 02
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 ();\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 ()
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 ()
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %02
  // @end
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 ();\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 ()
{
#ifdef BOB_TEST
  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);
  return ptr->%01();
#else
    return AAFRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 ()
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  // %02
  STDMETHOD (%01)
     ();\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 ()
{
#ifdef BOB_TEST
  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);
  return ptr->%01();
#else
  return HRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c
#c Macro Arg 07: method description
#c
#startm AD_XMETHOD1 07
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ %04 .%03-indirection %05);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %07
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
  stat = ptr->%01 (.%03-internalname(%05));
.%03-cleanup(%04, %05)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  // %07
  STDMETHOD (%01)
    (/*%02*/ .%03-adornment%04 .%03-indirection %05); // %06 \\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05)
{
#ifdef BOB_TEST
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
  hr = ptr->%01 (.%03-internalname(%05));
.%03-cleanup(%04, %05)
  return hr;
#else
  return HRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes two arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c
#c Macro Arg 12: method description
#c
#startm AD_XMETHOD2 12
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ %04 .%03-indirection %05,
	  /*%07*/ %09 .%08-indirection %10);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %12
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes three arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c
#c Macro Arg 17: method description
#c
#startm AD_XMETHOD3 17
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ %04 .%03-indirection %05,
	  /*%07*/ %09 .%08-indirection %10,
	  /*%12*/ %14 .%13-indirection %15);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %17
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes four arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c
#c Macro Arg 22: method description
#c
#startm AD_XMETHOD4 22
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ %04 .%03-indirection %05,
	  /*%07*/ %09 .%08-indirection %10,
	  /*%12*/ %14 .%13-indirection %15,
	  /*%17*/ %19 .%18-indirection %20);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %22
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
 AAFRESULT STDMETHODCALLTYPE
   Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes five arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c
#c Macro Arg 27: method description
#c
#startm AD_XMETHOD5 27
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ %04 .%03-indirection %05,
	  /*%07*/ %09 .%08-indirection %10,
	  /*%12*/ %14 .%13-indirection %15,
	  /*%17*/ %19 .%18-indirection %20,
	  /*%22*/ %24 .%23-indirection %25);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %27
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20,
		%24 .%23-indirection %25)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes six arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c
#c Macro Arg 32: method description
#c
#startm AD_XMETHOD6 32
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ %04 .%03-indirection %05,
	  /*%07*/ %09 .%08-indirection %10,
	  /*%12*/ %14 .%13-indirection %15,
	  /*%17*/ %19 .%18-indirection %20,
	  /*%22*/ %24 .%23-indirection %25,
	  /*%27*/ %29 .%28-indirection %30);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/,
	  /*%27*/ %29 .%28-indirection /*%30*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/,
	  /*%27*/ %29 .%28-indirection /*%30*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %32
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    %29 .%28-indirection %30
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20,
		%24 .%23-indirection %25,
		%29 .%28-indirection %30)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25),
	.%28-internalname(%30));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
   Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes seven arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c
#c Macro Arg 37: method description
#c
#startm AD_XMETHOD7 37
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ %04 .%03-indirection %05,
	  /*%07*/ %09 .%08-indirection %10,
	  /*%12*/ %14 .%13-indirection %15,
	  /*%17*/ %19 .%18-indirection %20,
	  /*%22*/ %24 .%23-indirection %25,
	  /*%27*/ %29 .%28-indirection %30,
	  /*%32*/ %34 .%33-indirection %35);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/,
	  /*%27*/ %29 .%28-indirection /*%30*/,
	  /*%32*/ %34 .%33-indirection /*%35*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/,
	  /*%27*/ %29 .%28-indirection /*%30*/,
	  /*%32*/ %34 .%33-indirection /*%35*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %37
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    %29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    %34 .%33-indirection %35
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20,
		%24 .%23-indirection %25,
		%29 .%28-indirection %30,
		%34 .%33-indirection %35)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25),
	.%28-internalname(%30),
	.%33-internalname(%35));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eight arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c
#c Macro Arg 42: method description
#c
#startm AD_XMETHOD8 42
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ %04 .%03-indirection %05,
	  /*%07*/ %09 .%08-indirection %10,
	  /*%12*/ %14 .%13-indirection %15,
	  /*%17*/ %19 .%18-indirection %20,
	  /*%22*/ %24 .%23-indirection %25,
	  /*%27*/ %29 .%28-indirection %30,
	  /*%32*/ %34 .%33-indirection %35,
	  /*%37*/ %39 .%38-indirection %40);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/,
	  /*%27*/ %29 .%28-indirection /*%30*/,
	  /*%32*/ %34 .%33-indirection /*%35*/,
	  /*%37*/ %39 .%38-indirection /*%40*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/,
	  /*%27*/ %29 .%28-indirection /*%30*/,
	  /*%32*/ %34 .%33-indirection /*%35*/,
	  /*%37*/ %39 .%38-indirection /*%40*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %42
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    %29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    %34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    %39 .%38-indirection %40
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20,
		%24 .%23-indirection %25,
		%29 .%28-indirection %30,
		%34 .%33-indirection %35,
		%39 .%38-indirection %40)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
.%38-setup(%39, %40)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25),
	.%28-internalname(%30),
	.%33-internalname(%35),
	.%38-internalname(%40));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
.%38-cleanup(%39, %40)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/,
                           .%38-adornment%39 .%38-indirection /*%40*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes nine arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c
#c Macro Arg 47: method description
#c
#startm AD_XMETHOD9 47
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ %04 .%03-indirection %05,
	  /*%07*/ %09 .%08-indirection %10,
	  /*%12*/ %14 .%13-indirection %15,
	  /*%17*/ %19 .%18-indirection %20,
	  /*%22*/ %24 .%23-indirection %25,
	  /*%27*/ %29 .%28-indirection %30,
	  /*%32*/ %34 .%33-indirection %35,
	  /*%37*/ %39 .%38-indirection %40,
	  /*%42*/ %44 .%43-indirection %45);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/,
	  /*%27*/ %29 .%28-indirection /*%30*/,
	  /*%32*/ %34 .%33-indirection /*%35*/,
	  /*%37*/ %39 .%38-indirection /*%40*/,
	  /*%42*/ %44 .%43-indirection /*%45*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/,
	  /*%27*/ %29 .%28-indirection /*%30*/,
	  /*%32*/ %34 .%33-indirection /*%35*/,
	  /*%37*/ %39 .%38-indirection /*%40*/,
	  /*%42*/ %44 .%43-indirection /*%45*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %47
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    %29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    %34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    %39 .%38-indirection %40,

    // @parm %42 %44 | %45 | %46
    %44 .%43-indirection %45
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20,
		%24 .%23-indirection %25,
		%29 .%28-indirection %30,
		%34 .%33-indirection %35,
		%39 .%38-indirection %40,
		%44 .%43-indirection %45)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
.%38-setup(%39, %40)
.%43-setup(%44, %45)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25),
	.%28-internalname(%30),
	.%33-internalname(%35),
	.%38-internalname(%40),
	.%43-internalname(%45));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
.%38-cleanup(%39, %40)
.%43-cleanup(%44, %45)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/,
                           .%38-adornment%39 .%38-indirection /*%40*/,
                           .%43-adornment%44 .%43-indirection /*%45*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes ten arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c metharg 10   47           48          49      50      51
#c
#c Macro Arg 52: method description
#c
#startm AD_XMETHOD_10 52
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ %04 .%03-indirection %05,
	  /*%07*/ %09 .%08-indirection %10,
	  /*%12*/ %14 .%13-indirection %15,
	  /*%17*/ %19 .%18-indirection %20,
	  /*%22*/ %24 .%23-indirection %25,
	  /*%27*/ %29 .%28-indirection %30,
	  /*%32*/ %34 .%33-indirection %35,
	  /*%37*/ %39 .%38-indirection %40,
	  /*%42*/ %44 .%43-indirection %45,
	  /*%47*/ %49 .%48-indirection %50);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/,
	  /*%27*/ %29 .%28-indirection /*%30*/,
	  /*%32*/ %34 .%33-indirection /*%35*/,
	  /*%37*/ %39 .%38-indirection /*%40*/,
	  /*%42*/ %44 .%43-indirection /*%45*/,
	  /*%47*/ %49 .%48-indirection /*%50*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/,
	  /*%27*/ %29 .%28-indirection /*%30*/,
	  /*%32*/ %34 .%33-indirection /*%35*/,
	  /*%37*/ %39 .%38-indirection /*%40*/,
	  /*%42*/ %44 .%43-indirection /*%45*/,
	  /*%47*/ %49 .%48-indirection /*%50*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %52
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    %29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    %34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    %39 .%38-indirection %40,

    // @parm %42 %44 | %45 | %46
    %44 .%43-indirection %45,

    // @parm %47 %49 | %50 | %51
    %49 .%48-indirection %50
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
		%09 .%08-indirection %10,
		%14 .%13-indirection %15,
		%19 .%18-indirection %20,
		%24 .%23-indirection %25,
		%29 .%28-indirection %30,
		%34 .%33-indirection %35,
		%39 .%38-indirection %40,
		%44 .%43-indirection %45,
		%49 .%48-indirection %50)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
.%38-setup(%39, %40)
.%43-setup(%44, %45)
.%48-setup(%49, %50)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25),
	.%28-internalname(%30),
	.%33-internalname(%35),
	.%38-internalname(%40),
	.%43-internalname(%45),
	.%48-internalname(%50));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
.%38-cleanup(%39, %40)
.%43-cleanup(%44, %45)
.%48-cleanup(%49, %50)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/,
                           .%38-adornment%39 .%38-indirection /*%40*/,
                           .%43-adornment%44 .%43-indirection /*%45*/,
                           .%48-adornment%49 .%48-indirection /*%50*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eleven arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c metharg 10   47           48          49      50      51
#c metharg 11   52           53          54      55      56
#c
#c Macro Arg 57: method description
#c
#startm AD_XMETHOD_11 57
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ %04 .%03-indirection %05,
	  /*%07*/ %09 .%08-indirection %10,
	  /*%12*/ %14 .%13-indirection %15,
	  /*%17*/ %19 .%18-indirection %20,
	  /*%22*/ %24 .%23-indirection %25,
	  /*%27*/ %29 .%28-indirection %30,
	  /*%32*/ %34 .%33-indirection %35,
	  /*%37*/ %39 .%38-indirection %40,
	  /*%42*/ %44 .%43-indirection %45,
	  /*%47*/ %49 .%48-indirection %50,
	  /*%52*/ %54 .%53-indirection %55);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/,
	  /*%27*/ %29 .%28-indirection /*%30*/,
	  /*%32*/ %34 .%33-indirection /*%35*/,
	  /*%37*/ %39 .%38-indirection /*%40*/,
	  /*%42*/ %44 .%43-indirection /*%45*/,
	  /*%47*/ %49 .%48-indirection /*%50*/,
	  /*%52*/ %54 .%53-indirection /*%55*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
	  /*%07*/ %09 .%08-indirection /*%10*/,
	  /*%12*/ %14 .%13-indirection /*%15*/,
	  /*%17*/ %19 .%18-indirection /*%20*/,
	  /*%22*/ %24 .%23-indirection /*%25*/,
	  /*%27*/ %29 .%28-indirection /*%30*/,
	  /*%32*/ %34 .%33-indirection /*%35*/,
	  /*%37*/ %39 .%38-indirection /*%40*/,
	  /*%42*/ %44 .%43-indirection /*%45*/,
	  /*%47*/ %49 .%48-indirection /*%50*/,
	  /*%52*/ %54 .%53-indirection /*%55*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %57
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    %04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    %09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    %14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    %19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    %24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    %29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    %34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    %39 .%38-indirection %40,

    // @parm %42 %44 | %45 | %46
    %44 .%43-indirection %45,

    // @parm %47 %49 | %50 | %51
    %49 .%48-indirection %50,

    // @parm %52 %54 | %55 | %56
    %54 .%53-indirection %55
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    .this-module::%01 (%04 .%03-indirection %05,
	    %09 .%08-indirection %10,
        %14 .%13-indirection %15,
        %19 .%18-indirection %20,
        %24 .%23-indirection %25,
        %29 .%28-indirection %30,
        %34 .%33-indirection %35,
        %39 .%38-indirection %40,
        %44 .%43-indirection %45,
        %49 .%48-indirection %50,
        %54 .%53-indirection %55)
{
#ifdef BOB_TEST
  AAFRESULT stat;

  Impl.this-module * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<Impl.this-module*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
.%38-setup(%39, %40)
.%43-setup(%44, %45)
.%48-setup(%49, %50)
.%53-setup(%54, %55)
  stat = ptr->%01 (.%03-internalname(%05),
	.%08-internalname(%10),
	.%13-internalname(%15),
	.%18-internalname(%20),
	.%23-internalname(%25),
	.%28-internalname(%30),
	.%33-internalname(%35),
	.%38-internalname(%40),
	.%43-internalname(%45),
	.%48-internalname(%50),
	.%53-internalname(%55));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
.%38-cleanup(%39, %40)
.%43-cleanup(%44, %45)
.%48-cleanup(%49, %50)
.%53-cleanup(%54, %55)
  return stat;
#else
  return AAFRESULT_NOT_IMPLEMENTED;
#endif
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    Impl.this-module::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/,
                           .%38-adornment%39 .%38-indirection /*%40*/,
                           .%43-adornment%44 .%43-indirection /*%45*/,
                           .%48-adornment%49 .%48-indirection /*%50*/,
                           .%53-adornment%54 .%53-indirection /*%55*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_END 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_END 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies an overridden method
#c
#c Argument: method declaration
#c
#startm AD_OVERRIDE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies a method in a separate COM interface.
#c
#c Argument: method declaration
#c
#startm AD_COM_METH 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes one argument.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c
#c Macro Arg 06: method description
#c
#startm AD_XCONSTRUCTOR1 06
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes two arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c
#c Macro Arg 11: method description
#c
#startm AD_XCONSTRUCTOR2 11
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes three arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c metharg 3    11           12          13      14      15
#c
#c Macro Arg 16: method description
#c
#startm AD_XCONSTRUCTOR3 16
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes four arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c metharg 3    11           12          13      14      15
#c metharg 4    16           17          18      19      20
#c
#c Macro Arg 21: method description
#c
#startm AD_XCONSTRUCTOR4 21
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a static method used to bootstrap an AAF
#c session by creating the first session object.
#c
#startm AD_BEGIN_SESSION 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a static method used for a container to create
#c its contained objects in the cpp API.
#c
#startm AD_STATIC_CREATE 00
#endm
