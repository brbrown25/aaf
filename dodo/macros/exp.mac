#c /******************************************\
#c *                                          *
#c * Advanced Authoring Format                *
#c *                                          *
#c * Copyright (c) 1998 Avid Technology, Inc. *
#c * Copyright (c) 1998 Microsoft Corporation *
#c *                                          *
#c \******************************************/



#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
#c
#c AutoDodo macro file for use in intermediate export files for use in
#c other AutoDodo source files.
#c
#ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


#import macros/base.mac


#ccccccccccccccccccccccccccc
#c
#c Pass through argument if for idl otherwise omit it.
#c 
#c This macro is generally used to specify IDL options that would
#c make since to emit to c++.
#c To allow proper marshalling code generation of a struct: |
#c typedef struct
#c {
#c     aafInt32 length;
#c     AD_IDL([length_is(length)]) aafWchar *str;
#c } aafString_t;
#c
#startm AD_IDL 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Includes another file.
#c
#c Argument: Base filename
#c
#startm AD_INCLUDE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Goes at the head of the file.
#c
#c Arguments: none
#c
#startm AD_HEAD 00
#endm


#ccccccccccccccccccccccccccc
#c
#c AAFTypes support for IDL
#c
#c Arguments: none
#c
#startm AD_TYPES_HEAD 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_BEGIN 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_COM_EXT_CLASS_BEGIN 01
AD_CLASS_BEGIN\
#endm

#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Arguments: none
#c
#startm AD_COM_EXT2_CLASS_BEGIN 02
AD_CLASS_BEGIN\
#endm

#ccccccccccccccccccccccccccc
#c
#c Starts a class definition with no parent class
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_BEGIN 00
#endm

#ccccccccccccccccccccccccccc
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c 
#c Argument: Pieces of UUID
#c
#c Example:
#c AD_TYPES_BEGIN(b1a21372, 1a7d, 11d2, bf, 78, 00, 10, 4b, c9, 15, 6d)
#c
#c TomR:980716: Added
#c
#startm AD_TYPES_BEGIN 11
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a types definition
#c
#c Types definitions should only be used by idl and c++ & impl headers
#c
#c Arguments: none
#c
#startm AD_TYPES_END 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c
#startm AD_AAFTYPES 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Argument1: base name to be converted to output type.
#c
#startm AD_DECLARE_FORWARD_AAFTYPES 01
#endm

#ccccccccccccccccccccccccccc
#c
#c Argument1: text to be quoted.
#c 
#c Ignore input 
#c
#startm AD_CPP_QUOTE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes no arguments.
#c
#c Argument1: method name
#c Argument2: method description
#c
#startm AD_METHOD0 02
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 ();\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
    ();\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 ()
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 ()
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %02
  // @end
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 ();\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %02
  // @end
  STDMETHOD (%01)
    ();\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 ()
{
  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);
  return ptr->%01();
}\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 ()
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  // %02
  STDMETHOD (%01)
     ();\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 ()
{
  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);
  return ptr->%01();
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes one argument.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c
#c Macro Arg 07: method description
#c
#startm AD_XMETHOD1 07
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
     (/*%02*/ .%03-adornment%04 .%03-indirection %05);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ .%03-adornment%04 .%03-indirection /*%05*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %07
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %07
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
  stat = ptr->%01 (.%03-internalname(%05));
.%03-cleanup(%04, %05)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  // %07
  STDMETHOD (%01)
    (/*%02*/ .%03-adornment%04 .%03-indirection %05); // %06 \\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, foo)
  hr = ptr->%01 (.%03-internalname(%05));
.%03-cleanup(%04, %05, foo)
  return hr;
}\\
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes two arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c
#c Macro Arg 12: method description
#c
#startm AD_XMETHOD2 12
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
     (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%07*/ %09 .%08-indirection /*%10*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ .%03-adornment%04 .%03-indirection /*%05*/,
      /*%07*/ .%08-adornment%09 .%08-indirection /*%10*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %12
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %12
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05,
        %09 .%08-indirection %10)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
  stat = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05,
        .%08-adornment%09 .%08-indirection %10)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, foo)
.%08-setup(%09, %10, foo)
  hr = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10));
.%03-cleanup(%04, %05, foo)
.%08-cleanup(%09, %10, foo)
  return hr;
}
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes three arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c
#c Macro Arg 17: method description
#c
#startm AD_XMETHOD3 17
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
     (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%07*/ %09 .%08-indirection /*%10*/,
      /*%12*/ %14 .%13-indirection /*%15*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ .%03-adornment%04 .%03-indirection /*%05*/,
      /*%07*/ .%08-adornment%09 .%08-indirection /*%10*/,
      /*%12*/ .%13-adornment%14 .%13-indirection /*%15*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %17
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %17
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05,
        %09 .%08-indirection %10,
        %14 .%13-indirection %15)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
  stat = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05,
        .%08-adornment%09 .%08-indirection %10,
        .%13-adornment%14 .%13-indirection %15)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, foo)
.%08-setup(%09, %10, foo)
.%13-setup(%14, %15, foo)
  hr = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15));
.%03-cleanup(%04, %05, foo)
.%08-cleanup(%09, %10, foo)
.%13-cleanup(%14, %15, foo)
  return hr;
}
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes four arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c
#c Macro Arg 22: method description
#c
#startm AD_XMETHOD4 22
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%07*/ %09 .%08-indirection /*%10*/,
      /*%12*/ %14 .%13-indirection /*%15*/,
      /*%17*/ %19 .%18-indirection /*%20*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ .%03-adornment%04 .%03-indirection /*%05*/,
      /*%07*/ .%08-adornment%09 .%08-indirection /*%10*/,
      /*%12*/ .%13-adornment%14 .%13-indirection /*%15*/,
      /*%17*/ .%18-adornment%19 .%18-indirection /*%20*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %22
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %22
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05,
        %09 .%08-indirection %10,
        %14 .%13-indirection %15,
        %19 .%18-indirection %20)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
  stat = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
 AAFRESULT STDMETHODCALLTYPE
   ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm


\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05,
        .%08-adornment%09 .%08-indirection %10,
        .%13-adornment%14 .%13-indirection %15,
        .%18-adornment%19 .%18-indirection %20)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, foo)
.%08-setup(%09, %10, foo)
.%13-setup(%14, %15, foo)
.%18-setup(%19, %20, foo)
  hr = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20));
.%03-cleanup(%04, %05, foo)
.%08-cleanup(%09, %10, foo)
.%13-cleanup(%14, %15, foo)
.%18-cleanup(%19, %20, foo)
  return hr;
}
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes five arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c
#c Macro Arg 27: method description
#c
#startm AD_XMETHOD5 27
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
     (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%07*/ %09 .%08-indirection /*%10*/,
      /*%12*/ %14 .%13-indirection /*%15*/,
      /*%17*/ %19 .%18-indirection /*%20*/,
      /*%22*/ %24 .%23-indirection /*%25*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ .%03-adornment%04 .%03-indirection /*%05*/,
      /*%07*/ .%08-adornment%09 .%08-indirection /*%10*/,
      /*%12*/ .%13-adornment%14 .%13-indirection /*%15*/,
      /*%17*/ .%18-adornment%19 .%18-indirection /*%20*/,
      /*%22*/ .%23-adornment%24 .%23-indirection /*%25*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %27
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %27
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05,
        %09 .%08-indirection %10,
        %14 .%13-indirection %15,
        %19 .%18-indirection %20,
        %24 .%23-indirection %25)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
  stat = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm


\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05,
        .%08-adornment%09 .%08-indirection %10,
        .%13-adornment%14 .%13-indirection %15,
        .%18-adornment%19 .%18-indirection %20,
        .%23-adornment%24 .%23-indirection %25)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, foo)
.%08-setup(%09, %10, foo)
.%13-setup(%14, %15, foo)
.%18-setup(%19, %20, foo)
.%23-setup(%24, %25, foo)
  hr = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25));
.%03-cleanup(%04, %05, foo)
.%08-cleanup(%09, %10, foo)
.%13-cleanup(%14, %15, foo)
.%18-cleanup(%19, %20, foo)
.%23-cleanup(%24, %25, foo)
  return hr;
}
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes six arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c
#c Macro Arg 32: method description
#c
#startm AD_XMETHOD6 32
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25,
      /*%27*/ .%28-adornment%29 .%28-indirection %30);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
     (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25,
      /*%27*/ .%28-adornment%29 .%28-indirection %30);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%07*/ %09 .%08-indirection /*%10*/,
      /*%12*/ %14 .%13-indirection /*%15*/,
      /*%17*/ %19 .%18-indirection /*%20*/,
      /*%22*/ %24 .%23-indirection /*%25*/,
      /*%27*/ %29 .%28-indirection /*%30*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ .%03-adornment%04 .%03-indirection /*%05*/,
      /*%07*/ .%08-adornment%09 .%08-indirection /*%10*/,
      /*%12*/ .%13-adornment%14 .%13-indirection /*%15*/,
      /*%17*/ .%18-adornment%19 .%18-indirection /*%20*/,
      /*%22*/ .%23-adornment%24 .%23-indirection /*%25*/,
      /*%27*/ .%28-adornment%29 .%28-indirection /*%30*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %32
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    .%28-adornment%29 .%28-indirection %30
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %32
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    .%28-adornment%29 .%28-indirection %30
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05,
        %09 .%08-indirection %10,
        %14 .%13-indirection %15,
        %19 .%18-indirection %20,
        %24 .%23-indirection %25,
        %29 .%28-indirection %30)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
  stat = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25),
    .%28-internalname(%30));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
   ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm


\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05,
        .%08-adornment%09 .%08-indirection %10,
        .%13-adornment%14 .%13-indirection %15,
        .%18-adornment%19 .%18-indirection %20,
        .%23-adornment%24 .%23-indirection %25,
        .%28-adornment%29 .%28-indirection %30)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, foo)
.%08-setup(%09, %10, foo)
.%13-setup(%14, %15, foo)
.%18-setup(%19, %20, foo)
.%23-setup(%24, %25, foo)
.%28-setup(%29, %30, foo)
  hr = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25),
    .%28-internalname(%30));
.%03-cleanup(%04, %05, foo)
.%08-cleanup(%09, %10, foo)
.%13-cleanup(%14, %15, foo)
.%18-cleanup(%19, %20, foo)
.%23-cleanup(%24, %25, foo)
.%28-cleanup(%29, %30, foo)
  return hr;
}
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes seven arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c
#c Macro Arg 37: method description
#c
#startm AD_XMETHOD7 37
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25,
      /*%27*/ .%28-adornment%29 .%28-indirection %30,
      /*%32*/ .%33-adornment%34 .%33-indirection %35);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
     (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25,
      /*%27*/ .%28-adornment%29 .%28-indirection %30,
      /*%32*/ .%33-adornment%34 .%33-indirection %35);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%07*/ %09 .%08-indirection /*%10*/,
      /*%12*/ %14 .%13-indirection /*%15*/,
      /*%17*/ %19 .%18-indirection /*%20*/,
      /*%22*/ %24 .%23-indirection /*%25*/,
      /*%27*/ %29 .%28-indirection /*%30*/,
      /*%32*/ %34 .%33-indirection /*%35*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ .%03-adornment%04 .%03-indirection /*%05*/,
      /*%07*/ .%08-adornment%09 .%08-indirection /*%10*/,
      /*%12*/ .%13-adornment%14 .%13-indirection /*%15*/,
      /*%17*/ .%18-adornment%19 .%18-indirection /*%20*/,
      /*%22*/ .%23-adornment%24 .%23-indirection /*%25*/,
      /*%27*/ .%28-adornment%29 .%28-indirection /*%30*/,
      /*%32*/ .%33-adornment%34 .%33-indirection /*%35*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %37
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    .%28-adornment%29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    .%33-adornment%34 .%33-indirection %35
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %37
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    .%28-adornment%29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    .%33-adornment%34 .%33-indirection %35
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05,
        %09 .%08-indirection %10,
        %14 .%13-indirection %15,
        %19 .%18-indirection %20,
        %24 .%23-indirection %25,
        %29 .%28-indirection %30,
        %34 .%33-indirection %35)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
  stat = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25),
    .%28-internalname(%30),
    .%33-internalname(%35));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05,
        .%08-adornment%09 .%08-indirection %10,
        .%13-adornment%14 .%13-indirection %15,
        .%18-adornment%19 .%18-indirection %20,
        .%23-adornment%24 .%23-indirection %25,
        .%28-adornment%29 .%28-indirection %30,
        .%33-adornment%34 .%33-indirection %35)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, foo)
.%08-setup(%09, %10, foo)
.%13-setup(%14, %15, foo)
.%18-setup(%19, %20, foo)
.%23-setup(%24, %25, foo)
.%28-setup(%29, %30, foo)
.%33-setup(%34, %35, foo)
  hr = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25),
    .%28-internalname(%30),
    .%33-internalname(%35));
.%03-cleanup(%04, %05, foo)
.%08-cleanup(%09, %10, foo)
.%13-cleanup(%14, %15, foo)
.%18-cleanup(%19, %20, foo)
.%23-cleanup(%24, %25, foo)
.%28-cleanup(%29, %30, foo)
.%33-cleanup(%34, %35, foo)
  return hr;
}
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eight arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c
#c Macro Arg 42: method description
#c
#startm AD_XMETHOD8 42
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25,
      /*%27*/ .%28-adornment%29 .%28-indirection %30,
      /*%32*/ .%33-adornment%34 .%33-indirection %35,
      /*%37*/ .%38-adornment%39 .%38-indirection %40);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
     (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25,
      /*%27*/ .%28-adornment%29 .%28-indirection %30,
      /*%32*/ .%33-adornment%34 .%33-indirection %35,
      /*%37*/ .%38-adornment%39 .%38-indirection %40);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%07*/ %09 .%08-indirection /*%10*/,
      /*%12*/ %14 .%13-indirection /*%15*/,
      /*%17*/ %19 .%18-indirection /*%20*/,
      /*%22*/ %24 .%23-indirection /*%25*/,
      /*%27*/ %29 .%28-indirection /*%30*/,
      /*%32*/ %34 .%33-indirection /*%35*/,
      /*%37*/ %39 .%38-indirection /*%40*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ .%03-adornment%04 .%03-indirection /*%05*/,
      /*%07*/ .%08-adornment%09 .%08-indirection /*%10*/,
      /*%12*/ .%13-adornment%14 .%13-indirection /*%15*/,
      /*%17*/ .%18-adornment%19 .%18-indirection /*%20*/,
      /*%22*/ .%23-adornment%24 .%23-indirection /*%25*/,
      /*%27*/ .%28-adornment%29 .%28-indirection /*%30*/,
      /*%32*/ .%33-adornment%34 .%33-indirection /*%35*/,
      /*%37*/ .%38-adornment%39 .%38-indirection /*%40*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %42
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    .%28-adornment%29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    .%33-adornment%34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    .%38-adornment%39 .%38-indirection %40
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %42
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    .%28-adornment%29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    .%33-adornment%34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    .%38-adornment%39 .%38-indirection %40
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05,
        %09 .%08-indirection %10,
        %14 .%13-indirection %15,
        %19 .%18-indirection %20,
        %24 .%23-indirection %25,
        %29 .%28-indirection %30,
        %34 .%33-indirection %35,
        %39 .%38-indirection %40)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
.%38-setup(%39, %40)
  stat = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25),
    .%28-internalname(%30),
    .%33-internalname(%35),
    .%38-internalname(%40));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
.%38-cleanup(%39, %40)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/,
                           .%38-adornment%39 .%38-indirection /*%40*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05,
        .%08-adornment%09 .%08-indirection %10,
        .%13-adornment%14 .%13-indirection %15,
        .%18-adornment%19 .%18-indirection %20,
        .%23-adornment%24 .%23-indirection %25,
        .%28-adornment%29 .%28-indirection %30,
        .%33-adornment%34 .%33-indirection %35,
        .%38-adornment%39 .%38-indirection %40)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, foo)
.%08-setup(%09, %10, foo)
.%13-setup(%14, %15, foo)
.%18-setup(%19, %20, foo)
.%23-setup(%24, %25, foo)
.%28-setup(%29, %30, foo)
.%33-setup(%34, %35, foo)
.%38-setup(%39, %40, foo)
  hr = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25),
    .%28-internalname(%30),
    .%33-internalname(%35),
    .%38-internalname(%40));
.%03-cleanup(%04, %05, foo)
.%08-cleanup(%09, %10, foo)
.%13-cleanup(%14, %15, foo)
.%18-cleanup(%19, %20, foo)
.%23-cleanup(%24, %25, foo)
.%28-cleanup(%29, %30, foo)
.%33-cleanup(%34, %35, foo)
.%38-cleanup(%39, %40, foo)
  return hr;
}
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes nine arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c
#c Macro Arg 47: method description
#c
#startm AD_XMETHOD9 47
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25,
      /*%27*/ .%28-adornment%29 .%28-indirection %30,
      /*%32*/ .%33-adornment%34 .%33-indirection %35,
      /*%37*/ .%38-adornment%39 .%38-indirection %40,
      /*%42*/ .%43-adornment%44 .%43-indirection %45);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
     (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25,
      /*%27*/ .%28-adornment%29 .%28-indirection %30,
      /*%32*/ .%33-adornment%34 .%33-indirection %35,
      /*%37*/ .%38-adornment%39 .%38-indirection %40,
      /*%42*/ .%43-adornment%44 .%43-indirection %45);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%07*/ %09 .%08-indirection /*%10*/,
      /*%12*/ %14 .%13-indirection /*%15*/,
      /*%17*/ %19 .%18-indirection /*%20*/,
      /*%22*/ %24 .%23-indirection /*%25*/,
      /*%27*/ %29 .%28-indirection /*%30*/,
      /*%32*/ %34 .%33-indirection /*%35*/,
      /*%37*/ %39 .%38-indirection /*%40*/,
      /*%42*/ %44 .%43-indirection /*%45*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ .%03-adornment%04 .%03-indirection /*%05*/,
      /*%07*/ .%08-adornment%09 .%08-indirection /*%10*/,
      /*%12*/ .%13-adornment%14 .%13-indirection /*%15*/,
      /*%17*/ .%18-adornment%19 .%18-indirection /*%20*/,
      /*%22*/ .%23-adornment%24 .%23-indirection /*%25*/,
      /*%27*/ .%28-adornment%29 .%28-indirection /*%30*/,
      /*%32*/ .%33-adornment%34 .%33-indirection /*%35*/,
      /*%37*/ .%38-adornment%39 .%38-indirection /*%40*/,
      /*%42*/ .%43-adornment%44 .%43-indirection /*%45*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %47
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    .%28-adornment%29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    .%33-adornment%34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    .%38-adornment%39 .%38-indirection %40,

    // @parm %42 %44 | %45 | %46
    .%43-adornment%44 .%43-indirection %45
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %47
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    .%28-adornment%29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    .%33-adornment%34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    .%38-adornment%39 .%38-indirection %40,

    // @parm %42 %44 | %45 | %46
    .%43-adornment%44 .%43-indirection %45
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05,
        %09 .%08-indirection %10,
        %14 .%13-indirection %15,
        %19 .%18-indirection %20,
        %24 .%23-indirection %25,
        %29 .%28-indirection %30,
        %34 .%33-indirection %35,
        %39 .%38-indirection %40,
        %44 .%43-indirection %45)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
.%38-setup(%39, %40)
.%43-setup(%44, %45)
  stat = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25),
    .%28-internalname(%30),
    .%33-internalname(%35),
    .%38-internalname(%40),
    .%43-internalname(%45));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
.%38-cleanup(%39, %40)
.%43-cleanup(%44, %45)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/,
                           .%38-adornment%39 .%38-indirection /*%40*/,
                           .%43-adornment%44 .%43-indirection /*%45*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05,
        .%08-adornment%09 .%08-indirection %10,
        .%13-adornment%14 .%13-indirection %15,
        .%18-adornment%19 .%18-indirection %20,
        .%23-adornment%24 .%23-indirection %25,
        .%28-adornment%29 .%28-indirection %30,
        .%33-adornment%34 .%33-indirection %35,
        .%38-adornment%39 .%38-indirection %40,
        .%43-adornment%44 .%43-indirection %45)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, foo)
.%08-setup(%09, %10, foo)
.%13-setup(%14, %15, foo)
.%18-setup(%19, %20, foo)
.%23-setup(%24, %25, foo)
.%28-setup(%29, %30, foo)
.%33-setup(%34, %35, foo)
.%38-setup(%39, %40, foo)
.%43-setup(%44, %45, foo)
  hr = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25),
    .%28-internalname(%30),
    .%33-internalname(%35),
    .%38-internalname(%40),
    .%43-internalname(%45));
.%03-cleanup(%04, %05, foo)
.%08-cleanup(%09, %10, foo)
.%13-cleanup(%14, %15, foo)
.%18-cleanup(%19, %20, foo)
.%23-cleanup(%24, %25, foo)
.%28-cleanup(%29, %30, foo)
.%33-cleanup(%34, %35, foo)
.%38-cleanup(%39, %40, foo)
.%43-cleanup(%44, %45, foo)
  return hr;
}
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes ten arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c metharg 10   47           48          49      50      51
#c
#c Macro Arg 52: method description
#c
#startm AD_XMETHOD_10 52
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25,
      /*%27*/ .%28-adornment%29 .%28-indirection %30,
      /*%32*/ .%33-adornment%34 .%33-indirection %35,
      /*%37*/ .%38-adornment%39 .%38-indirection %40,
      /*%42*/ .%43-adornment%44 .%43-indirection %45,
      /*%47*/ .%48-adornment%49 .%48-indirection %50);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
     (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25,
      /*%27*/ .%28-adornment%29 .%28-indirection %30,
      /*%32*/ .%33-adornment%34 .%33-indirection %35,
      /*%37*/ .%38-adornment%39 .%38-indirection %40,
      /*%42*/ .%43-adornment%44 .%43-indirection %45,
      /*%47*/ .%48-adornment%49 .%48-indirection %50);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%07*/ %09 .%08-indirection /*%10*/,
      /*%12*/ %14 .%13-indirection /*%15*/,
      /*%17*/ %19 .%18-indirection /*%20*/,
      /*%22*/ %24 .%23-indirection /*%25*/,
      /*%27*/ %29 .%28-indirection /*%30*/,
      /*%32*/ %34 .%33-indirection /*%35*/,
      /*%37*/ %39 .%38-indirection /*%40*/,
      /*%42*/ %44 .%43-indirection /*%45*/,
      /*%47*/ %49 .%48-indirection /*%50*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ .%03-adornment%04 .%03-indirection /*%05*/,
      /*%07*/ .%08-adornment%09 .%08-indirection /*%10*/,
      /*%12*/ .%13-adornment%14 .%13-indirection /*%15*/,
      /*%17*/ .%18-adornment%19 .%18-indirection /*%20*/,
      /*%22*/ .%23-adornment%24 .%23-indirection /*%25*/,
      /*%27*/ .%28-adornment%29 .%28-indirection /*%30*/,
      /*%32*/ .%33-adornment%34 .%33-indirection /*%35*/,
      /*%37*/ .%38-adornment%39 .%38-indirection /*%40*/,
      /*%42*/ .%43-adornment%44 .%43-indirection /*%45*/,
      /*%47*/ .%48-adornment%49 .%48-indirection /*%50*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %52
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    .%28-adornment%29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    .%33-adornment%34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    .%38-adornment%39 .%38-indirection %40,

    // @parm %42 %44 | %45 | %46
    .%43-adornment%44 .%43-indirection %45,

    // @parm %47 %49 | %50 | %51
    .%48-adornment%49 .%48-indirection %50
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %52
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    .%28-adornment%29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    .%33-adornment%34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    .%38-adornment%39 .%38-indirection %40,

    // @parm %42 %44 | %45 | %46
    .%43-adornment%44 .%43-indirection %45,

    // @parm %47 %49 | %50 | %51
    .%48-adornment%49 .%48-indirection %50
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05,
        %09 .%08-indirection %10,
        %14 .%13-indirection %15,
        %19 .%18-indirection %20,
        %24 .%23-indirection %25,
        %29 .%28-indirection %30,
        %34 .%33-indirection %35,
        %39 .%38-indirection %40,
        %44 .%43-indirection %45,
        %49 .%48-indirection %50)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
.%38-setup(%39, %40)
.%43-setup(%44, %45)
.%48-setup(%49, %50)
  stat = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25),
    .%28-internalname(%30),
    .%33-internalname(%35),
    .%38-internalname(%40),
    .%43-internalname(%45),
    .%48-internalname(%50));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
.%38-cleanup(%39, %40)
.%43-cleanup(%44, %45)
.%48-cleanup(%49, %50)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/,
                           .%38-adornment%39 .%38-indirection /*%40*/,
                           .%43-adornment%44 .%43-indirection /*%45*/,
                           .%48-adornment%49 .%48-indirection /*%50*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05,
        .%08-adornment%09 .%08-indirection %10,
        .%13-adornment%14 .%13-indirection %15,
        .%18-adornment%19 .%18-indirection %20,
        .%23-adornment%24 .%23-indirection %25,
        .%28-adornment%29 .%28-indirection %30,
        .%33-adornment%34 .%33-indirection %35,
        .%38-adornment%39 .%38-indirection %40,
        .%43-adornment%44 .%43-indirection %45,
        .%48-adornment%49 .%48-indirection %50)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, foo)
.%08-setup(%09, %10, foo)
.%13-setup(%14, %15, foo)
.%18-setup(%19, %20, foo)
.%23-setup(%24, %25, foo)
.%28-setup(%29, %30, foo)
.%33-setup(%34, %35, foo)
.%38-setup(%39, %40, foo)
.%43-setup(%44, %45, foo)
.%48-setup(%49, %50, foo)
  hr = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25),
    .%28-internalname(%30),
    .%33-internalname(%35),
    .%38-internalname(%40),
    .%43-internalname(%45),
    .%48-internalname(%50));
.%03-cleanup(%04, %05, foo)
.%08-cleanup(%09, %10, foo)
.%13-cleanup(%14, %15, foo)
.%18-cleanup(%19, %20, foo)
.%23-cleanup(%24, %25, foo)
.%28-cleanup(%29, %30, foo)
.%33-cleanup(%34, %35, foo)
.%38-cleanup(%39, %40, foo)
.%43-cleanup(%44, %45, foo)
.%48-cleanup(%49, %50, foo)
  return hr;
}
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes eleven arguments.
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c metharg 5    22           23          24      25      26
#c metharg 6    27           28          29      30      31
#c metharg 7    32           33          34      35      36
#c metharg 8    37           38          39      40      41
#c metharg 9    42           43          44      45      46
#c metharg 10   47           48          49      50      51
#c metharg 11   52           53          54      55      56
#c
#c Macro Arg 57: method description
#c
#startm AD_XMETHOD_11 57
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25,
      /*%27*/ .%28-adornment%29 .%28-indirection %30,
      /*%32*/ .%33-adornment%34 .%33-indirection %35,
      /*%37*/ .%38-adornment%39 .%38-indirection %40,
      /*%42*/ .%43-adornment%44 .%43-indirection %45,
      /*%47*/ .%48-adornment%49 .%48-indirection %50,
      /*%52*/ .%53-adornment%54 .%53-indirection %55);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
     (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%07*/ .%08-adornment%09 .%08-indirection %10,
      /*%12*/ .%13-adornment%14 .%13-indirection %15,
      /*%17*/ .%18-adornment%19 .%18-indirection %20,
      /*%22*/ .%23-adornment%24 .%23-indirection %25,
      /*%27*/ .%28-adornment%29 .%28-indirection %30,
      /*%32*/ .%33-adornment%34 .%33-indirection %35,
      /*%37*/ .%38-adornment%39 .%38-indirection %40,
      /*%42*/ .%43-adornment%44 .%43-indirection %45,
      /*%47*/ .%48-adornment%49 .%48-indirection %50,
      /*%52*/ .%53-adornment%54 .%53-indirection %55);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%07*/ %09 .%08-indirection /*%10*/,
      /*%12*/ %14 .%13-indirection /*%15*/,
      /*%17*/ %19 .%18-indirection /*%20*/,
      /*%22*/ %24 .%23-indirection /*%25*/,
      /*%27*/ %29 .%28-indirection /*%30*/,
      /*%32*/ %34 .%33-indirection /*%35*/,
      /*%37*/ %39 .%38-indirection /*%40*/,
      /*%42*/ %44 .%43-indirection /*%45*/,
      /*%47*/ %49 .%48-indirection /*%50*/,
      /*%52*/ %54 .%53-indirection /*%55*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ .%03-adornment%04 .%03-indirection /*%05*/,
      /*%07*/ .%08-adornment%09 .%08-indirection /*%10*/,
      /*%12*/ .%13-adornment%14 .%13-indirection /*%15*/,
      /*%17*/ .%18-adornment%19 .%18-indirection /*%20*/,
      /*%22*/ .%23-adornment%24 .%23-indirection /*%25*/,
      /*%27*/ .%28-adornment%29 .%28-indirection /*%30*/,
      /*%32*/ .%33-adornment%34 .%33-indirection /*%35*/,
      /*%37*/ .%38-adornment%39 .%38-indirection /*%40*/,
      /*%42*/ .%43-adornment%44 .%43-indirection /*%45*/,
      /*%47*/ .%48-adornment%49 .%48-indirection /*%50*/,
      /*%52*/ .%53-adornment%54 .%53-indirection /*%55*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %57
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    .%28-adornment%29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    .%33-adornment%34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    .%38-adornment%39 .%38-indirection %40,

    // @parm %42 %44 | %45 | %46
    .%43-adornment%44 .%43-indirection %45,

    // @parm %47 %49 | %50 | %51
    .%48-adornment%49 .%48-indirection %50,

    // @parm %52 %54 | %55 | %56
    .%53-adornment%54 .%53-indirection %55
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %57
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %07 %09 | %10 | %11
    .%08-adornment%09 .%08-indirection %10,

    // @parm %12 %14 | %15 | %16
    .%13-adornment%14 .%13-indirection %15,

    // @parm %17 %19 | %20 | %21
    .%18-adornment%19 .%18-indirection %20,

    // @parm %22 %24 | %25 | %26
    .%23-adornment%24 .%23-indirection %25,

    // @parm %27 %29 | %30 | %31
    .%28-adornment%29 .%28-indirection %30,

    // @parm %32 %34 | %35 | %36
    .%33-adornment%34 .%33-indirection %35,

    // @parm %37 %39 | %40 | %41
    .%38-adornment%39 .%38-indirection %40,

    // @parm %42 %44 | %45 | %46
    .%43-adornment%44 .%43-indirection %45,

    // @parm %47 %49 | %50 | %51
    .%48-adornment%49 .%48-indirection %50,

    // @parm %52 %54 | %55 | %56
    .%53-adornment%54 .%53-indirection %55
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05,
        %09 .%08-indirection %10,
        %14 .%13-indirection %15,
        %19 .%18-indirection %20,
        %24 .%23-indirection %25,
        %29 .%28-indirection %30,
        %34 .%33-indirection %35,
        %39 .%38-indirection %40,
        %44 .%43-indirection %45,
        %49 .%48-indirection %50,
        %54 .%53-indirection %55)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%08-setup(%09, %10)
.%13-setup(%14, %15)
.%18-setup(%19, %20)
.%23-setup(%24, %25)
.%28-setup(%29, %30)
.%33-setup(%34, %35)
.%38-setup(%39, %40)
.%43-setup(%44, %45)
.%48-setup(%49, %50)
.%53-setup(%54, %55)
  stat = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25),
    .%28-internalname(%30),
    .%33-internalname(%35),
    .%38-internalname(%40),
    .%43-internalname(%45),
    .%48-internalname(%50),
    .%53-internalname(%55));
.%03-cleanup(%04, %05)
.%08-cleanup(%09, %10)
.%13-cleanup(%14, %15)
.%18-cleanup(%19, %20)
.%23-cleanup(%24, %25)
.%28-cleanup(%29, %30)
.%33-cleanup(%34, %35)
.%38-cleanup(%39, %40)
.%43-cleanup(%44, %45)
.%48-cleanup(%49, %50)
.%53-cleanup(%54, %55)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%08-adornment%09 .%08-indirection /*%10*/,
                           .%13-adornment%14 .%13-indirection /*%15*/,
                           .%18-adornment%19 .%18-indirection /*%20*/,
                           .%23-adornment%24 .%23-indirection /*%25*/,
                           .%28-adornment%29 .%28-indirection /*%30*/,
                           .%33-adornment%34 .%33-indirection /*%35*/,
                           .%38-adornment%39 .%38-indirection /*%40*/,
                           .%43-adornment%44 .%43-indirection /*%45*/,
                           .%48-adornment%49 .%48-indirection /*%50*/,
                           .%53-adornment%54 .%53-indirection /*%55*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05,
        .%08-adornment%09 .%08-indirection %10,
        .%13-adornment%14 .%13-indirection %15,
        .%18-adornment%19 .%18-indirection %20,
        .%23-adornment%24 .%23-indirection %25,
        .%28-adornment%29 .%28-indirection %30,
        .%33-adornment%34 .%33-indirection %35,
        .%38-adornment%39 .%38-indirection %40,
        .%43-adornment%44 .%43-indirection %45,
        .%48-adornment%49 .%48-indirection %50,
        .%53-adornment%54 .%53-indirection %55)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, foo)
.%08-setup(%09, %10, foo)
.%13-setup(%14, %15, foo)
.%18-setup(%19, %20, foo)
.%23-setup(%24, %25, foo)
.%28-setup(%29, %30, foo)
.%33-setup(%34, %35, foo)
.%38-setup(%39, %40, foo)
.%43-setup(%44, %45, foo)
.%48-setup(%49, %50, foo)
.%53-setup(%54, %55, foo)
  hr = ptr->%01 (.%03-internalname(%05),
    .%08-internalname(%10),
    .%13-internalname(%15),
    .%18-internalname(%20),
    .%23-internalname(%25),
    .%28-internalname(%30),
    .%33-internalname(%35),
    .%38-internalname(%40),
    .%43-internalname(%45),
    .%48-internalname(%50),
    .%53-internalname(%55));
.%03-cleanup(%04, %05, foo)
.%08-cleanup(%09, %10, foo)
.%13-cleanup(%14, %15, foo)
.%18-cleanup(%19, %20, foo)
.%23-cleanup(%24, %25, foo)
.%28-cleanup(%29, %30, foo)
.%33-cleanup(%34, %35, foo)
.%38-cleanup(%39, %40, foo)
.%43-cleanup(%44, %45, foo)
.%48-cleanup(%49, %50, foo)
.%53-cleanup(%54, %55, foo)
  return hr;
}
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes three arguments.
#c Allows an additional macro argument per method argument to let
#c macro caller pass more info.  For example:
#c
#c For type           Arg is
#c     ----           ------
#c     objInArray     array size
#c     objOutArray    array size
#c     objInCustom    custom input "marshal" code
#c     objOutCustom   custom output "marshal" code
#c     all else       ignored
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt aux
#c ----------   ----------   ---------   ----    ----    -------- --
#c metharg 1    02           03          04      05      06       07
#c metharg 2    08           09          10      11      12       13
#c metharg 3    14           15          16      17      18       19
#c
#c Macro Arg 20: method description
#c
#startm AD_X2METHOD3 20
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%08*/ .%09-adornment%10 .%09-indirection %11,
      /*%14*/ .%15-adornment%16 .%15-indirection %17);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
     (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%08*/ .%09-adornment%10 .%09-indirection %11,
      /*%14*/ .%15-adornment%16 .%15-indirection %17);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%08*/ %10 .%09-indirection /*%11*/,
      /*%14*/ %16 .%15-indirection /*%17*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ .%03-adornment%04 .%03-indirection /*%05*/,
      /*%08*/ .%09-adornment%10 .%09-indirection /*%11*/,
      /*%14*/ .%15-adornment%16 .%15-indirection /*%17*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %20
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %08 %10 | %11 | %12
    .%09-adornment%10 .%09-indirection %11,

    // @parm %14 %16 | %17 | %18
    .%15-adornment%16 .%15-indirection %17
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %20
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %08 %10 | %11 | %12
    .%09-adornment%10 .%09-indirection %11,

    // @parm %14 %16 | %17 | %18
    .%15-adornment%16 .%15-indirection %17
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05,
        %10 .%09-indirection %11,
        %16 .%15-indirection %17)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%09-setup(%10, %11)
.%15-setup(%16, %17)
  stat = ptr->%01 (.%03-internalname(%05),
    .%09-internalname(%11),
    .%15-internalname(%17));
.%03-cleanup(%04, %05)
.%09-cleanup(%10, %11)
.%15-cleanup(%16, %17)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%09-adornment%10 .%09-indirection /*%11*/,
                           .%15-adornment%16 .%15-indirection /*%17*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05,
        .%09-adornment%10 .%09-indirection %11,
        .%15-adornment%16 .%15-indirection %17)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, %07)
.%09-setup(%10, %11, %13)
.%15-setup(%16, %17, %19)
  hr = ptr->%01 (.%03-internalname(%05),
    .%09-internalname(%11),
    .%15-internalname(%17));
.%03-cleanup(%04, %05, %07)
.%09-cleanup(%10, %11, %13)
.%15-cleanup(%16, %17, %17)
  return hr;
}
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes four arguments.
#c Allows an additional macro argument per method argument to let
#c macro caller pass more info.  For example:
#c
#c For type           Arg is
#c     ----           ------
#c     objInArray     array size
#c     objOutArray    array size
#c     objInCustom    custom input "marshal" code
#c     objOutCustom   custom output "marshal" code
#c     all else       ignored
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt aux
#c ----------   ----------   ---------   ----    ----    -------- --
#c metharg 1    02           03          04      05      06       07
#c metharg 2    08           09          10      11      12       13
#c metharg 3    14           15          16      17      18       19
#c metharg 4    20           21          22      23      24       25
#c
#c Macro Arg 26: method description
#c
#startm AD_X2METHOD4 26
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%08*/ .%09-adornment%10 .%09-indirection %11,
      /*%14*/ .%15-adornment%16 .%15-indirection %17,
      /*%20*/ .%21-adornment%22 .%21-indirection %23);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
     (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%08*/ .%09-adornment%10 .%09-indirection %11,
      /*%14*/ .%15-adornment%16 .%15-indirection %17,
      /*%20*/ .%21-adornment%22 .%21-indirection %23);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%08*/ %10 .%09-indirection /*%11*/,
      /*%14*/ %16 .%15-indirection /*%17*/,
      /*%20*/ %22 .%21-indirection /*%23*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ .%03-adornment%04 .%03-indirection /*%05*/,
      /*%08*/ .%09-adornment%10 .%09-indirection /*%11*/,
      /*%14*/ .%15-adornment%16 .%15-indirection /*%17*/,
      /*%20*/ .%21-adornment%22 .%21-indirection /*%23*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %26
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %08 %10 | %11 | %12
    .%09-adornment%10 .%09-indirection %11,

    // @parm %14 %16 | %17 | %18
    .%15-adornment%16 .%15-indirection %17,

    // @parm %20 %22 | %23 | %24
    .%21-adornment%22 .%21-indirection %23
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %26
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %08 %10 | %11 | %12
    .%09-adornment%10 .%09-indirection %11,

    // @parm %14 %16 | %17 | %18
    .%15-adornment%16 .%15-indirection %17,

    // @parm %20 %22 | %23 | %24
    .%21-adornment%22 .%21-indirection %23
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05,
        %10 .%09-indirection %11,
        %16 .%15-indirection %17,
        %22 .%21-indirection %23)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%09-setup(%10, %11)
.%15-setup(%16, %17)
.%21-setup(%22, %23)
  stat = ptr->%01 (.%03-internalname(%05),
    .%09-internalname(%11),
    .%15-internalname(%17),
    .%21-internalname(%23));
.%03-cleanup(%04, %05)
.%09-cleanup(%10, %11)
.%15-cleanup(%16, %17)
.%21-cleanup(%22, %23)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%09-adornment%10 .%09-indirection /*%11*/,
                           .%15-adornment%16 .%15-indirection /*%17*/,
                           .%21-adornment%22 .%21-indirection /*%23*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05,
        .%09-adornment%10 .%09-indirection %11,
        .%15-adornment%16 .%15-indirection %17,
        .%21-adornment%22 .%21-indirection %23)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, %07)
.%09-setup(%10, %11, %13)
.%15-setup(%16, %17, %19)
.%21-setup(%22, %23, %25)
  hr = ptr->%01 (.%03-internalname(%05),
    .%09-internalname(%11),
    .%15-internalname(%17),
    .%21-internalname(%23));
.%03-cleanup(%04, %05, %07)
.%09-cleanup(%10, %11, %13)
.%15-cleanup(%16, %17, %19)
.%21-cleanup(%22, %23, %25)
  return hr;
}
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a method which takes five arguments.
#c Allows an additional macro argument per method argument to let
#c macro caller pass more info.  For example:
#c
#c For type           Arg is
#c     ----           ------
#c     objInArray     array size
#c     objPassArray   array size
#c     objOutArray    array size
#c     objInCustom    custom input "marshal" code
#c     objOutCustom   custom output "marshal" code
#c     all else       ignored
#c
#c Macro Arg 01: method name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt aux
#c ----------   ----------   ---------   ----    ----    -------- --
#c metharg 1    02           03          04      05      06       07
#c metharg 2    08           09          10      11      12       13
#c metharg 3    14           15          16      17      18       19
#c metharg 4    20           21          22      23      24       25
#c metharg 5    26           27          28      29      30       31
#c
#c Macro Arg 32: method description
#c
#startm AD_X2METHOD5 32
\\\#startm .method-%01-h 00
  // Override from .this-module
  virtual AAFRESULT STDMETHODCALLTYPE
    %01 (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%08*/ .%09-adornment%10 .%09-indirection %11,
      /*%14*/ .%15-adornment%16 .%15-indirection %17,
      /*%20*/ .%21-adornment%22 .%21-indirection %23,
      /*%26*/ .%27-adornment%28 .%27-indirection %29);\\
\\\#endm

\\\#startm .method-%01-comh 00
  // Override from .this-module
  STDMETHOD (%01)
     (/*%02*/ .%03-adornment%04 .%03-indirection %05,
      /*%08*/ .%09-adornment%10 .%09-indirection %11,
      /*%14*/ .%15-adornment%16 .%15-indirection %17,
      /*%20*/ .%21-adornment%22 .%21-indirection %23,
      /*%26*/ .%27-adornment%28 .%27-indirection %29);\\
\\\#endm

\\\#startm .method-%01-cpp 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    %%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%08*/ %10 .%09-indirection /*%11*/,
      /*%14*/ %16 .%15-indirection /*%17*/,
      /*%20*/ %22 .%21-indirection /*%23*/,
      /*%26*/ %28 .%27-indirection /*%29*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm

\\\#startm .method-%01-implc 01
  // Override from .this-module
  AAFRESULT STDMETHODCALLTYPE
    Impl%%01::%01 (/*%02*/ %04 .%03-indirection /*%05*/,
      /*%08*/ %10 .%09-indirection /*%11*/,
      /*%14*/ %16 .%15-indirection /*%17*/,
      /*%20*/ %22 .%21-indirection /*%23*/,
      /*%26*/ %28 .%27-indirection /*%29*/)
  {
    return AAFRESULT_NOT_IMPLEMENTED;
  }\\
\\\#endm
\\\#startm .method-%01-com-meth-h 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %32
  // @end
  // 
  virtual AAFRESULT STDMETHODCALLTYPE
  %01 (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %08 %10 | %11 | %12
    .%09-adornment%10 .%09-indirection %11,

    // @parm %14 %16 | %17 | %18
    .%15-adornment%16 .%15-indirection %17,

    // @parm %20 %22 | %23 | %24
    .%21-adornment%22 .%21-indirection %23,

    // @parm %26 %28 | %29 | %30
    .%27-adornment%28 .%27-indirection %29
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-comh 00
  //***********************************************************
  // METHOD NAME: %01()
  //
  // DESCRIPTION:
  // @mfunc AAFRESULT | .this-module | %01 |
  // %32
  // @end
  // 
  STDMETHOD (%01)
   (
    // @parm %02 %04 | %05 | %06
    .%03-adornment%04 .%03-indirection %05,

    // @parm %08 %10 | %11 | %12
    .%09-adornment%10 .%09-indirection %11,

    // @parm %14 %16 | %17 | %18
    .%15-adornment%16 .%15-indirection %17,

    // @parm %20 %22 | %23 | %24
    .%21-adornment%22 .%21-indirection %23,

    // @parm %26 %28 | %29 | %30
    .%27-adornment%28 .%27-indirection %29
  );\\
\\\#endm

\\\#startm .method-%01-com-meth-cpp 01
AAFRESULT STDMETHODCALLTYPE
    AD_EXPORT_THIS_MODULE::%01 (%04 .%03-indirection %05,
        %10 .%09-indirection %11,
        %16 .%15-indirection %17,
        %22 .%21-indirection %23,
        %28 .%27-indirection %29)
{
  AAFRESULT stat;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05)
.%09-setup(%10, %11)
.%15-setup(%16, %17)
.%21-setup(%22, %23)
.%27-setup(%28, %29)
  stat = ptr->%01 (.%03-internalname(%05),
    .%09-internalname(%11),
    .%15-internalname(%17),
    .%21-internalname(%23),
    .%27-internalname(%29));
.%03-cleanup(%04, %05)
.%09-cleanup(%10, %11)
.%15-cleanup(%16, %17)
.%21-cleanup(%22, %23)
.%27-cleanup(%28, %29)
  return stat;
}\\
\\\#endm

\\\#startm .method-%01-com-meth-implc 01
AAFRESULT STDMETHODCALLTYPE
    ImplAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection /*%05*/,
                           .%09-adornment%10 .%09-indirection /*%11*/,
                           .%15-adornment%16 .%15-indirection /*%17*/,
                           .%21-adornment%22 .%21-indirection /*%23*/,
                           .%27-adornment%28 .%27-indirection /*%29*/)
{
  return AAFRESULT_NOT_IMPLEMENTED;
}\\
\\\#endm

\#c arg1 = this module's name
\\\#startm .method-%01-com-meth-comc 01
HRESULT STDMETHODCALLTYPE
    CAD_EXPORT_THIS_MODULE::%01 (.%03-adornment%04 .%03-indirection %05,
        .%09-adornment%10 .%09-indirection %11,
        .%15-adornment%16 .%15-indirection %17,
        .%21-adornment%22 .%21-indirection %23,
        .%27-adornment%28 .%27-indirection %29)
{
  HRESULT hr;

  ImplAD_EXPORT_THIS_MODULE * ptr;
  ImplAAFRoot * pO;
  pO = GetRepObject ();
  assert (pO);
  ptr = static_cast<ImplAD_EXPORT_THIS_MODULE*> (pO);
  assert (ptr);

.%03-setup(%04, %05, %07)
.%09-setup(%10, %11, %13)
.%15-setup(%16, %17, %19)
.%21-setup(%22, %23, %25)
.%27-setup(%28, %29, %31)
  hr = ptr->%01 (.%03-internalname(%05),
    .%09-internalname(%11),
    .%15-internalname(%17),
    .%21-internalname(%23),
    .%27-internalname(%29));
.%03-cleanup(%04, %05, %07)
.%09-cleanup(%10, %11, %13)
.%15-cleanup(%16, %17, %19)
.%21-cleanup(%22, %23, %25)
.%27-cleanup(%28, %29, %31)
  return hr;
}
\\\#endm
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_CLASS_END 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for classes which support more than the
#c primary COM interface.
#c
#c Arguments: additional interface name
#c
#startm AD_COM_EXT_CLASS_END 01
AD_CLASS_END\
#endm

#ccccccccccccccccccccccccccc
#c
#c Ends a class definition for classes which support more than the
#c primary COM interface.
#c
#c Arguments: additional interface name
#c
#startm AD_COM_EXT2_CLASS_END 02
AD_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Arguments: none
#c
#startm AD_ROOT_CLASS_END 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies an overridden method
#c
#c Argument: method declaration
#c
#startm AD_OVERRIDE 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Specifies a method in a separate COM interface.
#c
#c Argument: method declaration
#c
#startm AD_COM_METH 01
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes one argument.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c
#c Macro Arg 06: method description
#c
#startm AD_XCONSTRUCTOR1 06
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes two arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c
#c Macro Arg 11: method description
#c
#startm AD_XCONSTRUCTOR2 11
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes three arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c metharg 3    11           12          13      14      15
#c
#c Macro Arg 16: method description
#c
#startm AD_XCONSTRUCTOR3 16
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a constructor which takes four arguments.
#c Constructor name is assumed to be .this-module.
#c
#c Macro arguments 01+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    01           02          03      04      05
#c metharg 2    06           07          08      09      10
#c metharg 3    11           12          13      14      15
#c metharg 4    16           17          18      19      20
#c
#c Macro Arg 21: method description
#c
#startm AD_XCONSTRUCTOR4 21
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a static method used to bootstrap an AAF
#c session by creating the first session object.
#c
#startm AD_BEGIN_SESSION 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a static method used for a container to create
#c its contained objects in the cpp API.
#c
#startm AD_STATIC_CREATE 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Starts a class definition
#c
#c Argument1: Abstract or Concrete
#c Argument2: Transient or StoredObject
#c            special cases:CommonBase and StoredObjectBase
#c
#c Note: Concrete-StoredObject means Persistent. In other words
#c Concrete-StoredObject objects (and derived objects) are the 
#c only types of objects that should ever be found in an AAF
#c file.
#c
#c Valid combiniations:          examples
#c -----------------------       ---------------
#c   Abstract-CommonBase         AAFRoot 
#c   Abstract-Transient          ????
#c   Abstract-StoredObjectBase   AAFObject
#c   Abstract-StoredObject       AAFSourceReference, AAFComponent, ...
#c   Concrete-Transient          EnumAAFMobs, EnumAAFMobSlots, ...
#c   Concrete-StoredObject       AAFSegment, AAFSourceClip, ...
#c
#startm AD_XCLASS_BEGIN 02
.begin-%01-%02
#endm


#ccccccccccccccccccccccccccc
#c
#c Ends a class definition
#c
#c Argument1: Abstract or Concrete
#c Argument2: Transient or StoredObject
#c            special cases:CommonBase and StoredObjectBase
#c
#c Note: Concrete-StoredObject means Persistent. In other words
#c Concrete-StoredObject objects (and derived objects) are the 
#c only types of objects that should ever be found in an AAF
#c file.
#c
#c Valid combiniations:          examples
#c -----------------------       ---------------
#c   Abstract-CommonBase         AAFRoot 
#c   Abstract-Transient          ????
#c   Abstract-StoredObjectBase   AAFObject
#c   Abstract-StoredObject       AAFSourceReference, AAFComponent, ...
#c   Concrete-Transient          EnumAAFMobs, EnumAAFMobSlots, ...
#c   Concrete-StoredObject       AAFSegment, AAFSourceClip, ...
#c
#startm AD_XCLASS_END 02
.end-%01-%02
#endm


#ccccccccccccccccccccccccccc
#c
#c The following macros implement all of the allowable
#c combinations of the AD_XCLASS_BEGIN and AD_XCLASS_END
#c


#ccccccccccccccccccccccccccc
#c Abstract-CommonBase
#c Special case for the common base class for all AAF objects,
#c Transient and StoredObject classes.
#c (first version defined backwords compatibility)

#startm .begin-Abstract-CommonBase 00
AD_ROOT_CLASS_BEGIN\
#endm

#startm .end-Abstract-CommonBase 00
AD_ROOT_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c Abstract-StoredObjectBase
#c Special case for the base class for all AAF stored objects
#c (first version defined backwords compatibility)

#startm .begin-Abstract-StoredObjectBase 00
AD_CLASS_BEGIN\
#endm

#startm .end-Abstract-StoredObjectBase 00
AD_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c Abstract-Transient
#c (first version defined backwords compatibility)

#startm .begin-Abstract-Transient 00
AD_CLASS_BEGIN\
#endm

#startm .end-Abstract-Transient 00
AD_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c Abstract-StoredObject
#c (first version defined backwords compatibility)

#startm .begin-Abstract-StoredObject 00
AD_CLASS_BEGIN\
#endm

#startm .end-Abstract-StoredObject 00
AD_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c Concrete-Transient
#c (first version defined backwords compatibility)

#startm .begin-Concrete-Transient 00
AD_CLASS_BEGIN\
#endm

#startm .end-Concrete-Transient 00
AD_CLASS_END\
#endm


#ccccccccccccccccccccccccccc
#c Concrete-StoredObject
#c Note: These are the persistent classes.
#c (first version defined backwords compatibility)

#startm .begin-Concrete-StoredObject 00
AD_CLASS_BEGIN\
#endm

#startm .end-Concrete-StoredObject 00
AD_CLASS_END\
#endm



#ccccccccccccccccccccccccccc
#c
#c EXP 
#c Declaration for the dictionary's factory method.
#c
#startm AD_DICTIONARY_FACTORY 02
#endm


#ccccccccccccccccccccccccccc
#c Begining of the module definitions
#c
#startm AD_MODULE_BEGIN 02
#endm


#ccccccccccccccccccccccccccc
#c End of the module definitions
#c
#startm AD_MODULE_END 00
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a function which takes no arguments.
#c
#c Argument1: function name
#c Argument2: function description
#c
#startm AD_FUNCTION0 02
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a function which takes one argument.
#c
#c Macro Arg 01: function name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt	
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c
#c Macro Arg 07: function description
#c
#startm AD_XFUNCTION1 07
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a function which takes two arguments.
#c
#c Macro Arg 01: function name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c
#c Macro Arg 12: function description
#c
#startm AD_XFUNCTION2 12
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a function which takes three arguments.
#c
#c Macro Arg 01: function name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c
#c Macro Arg 17: function description
#c
#startm AD_XFUNCTION3 17
#endm


#ccccccccccccccccccccccccccc
#c
#c Inserts declaration for a function which takes four arguments.
#c
#c Macro Arg 01: function name
#c
#c Macro arguments 02+:
#c 
#c meth arg #   arg modfrs   obj style   type    name    arg cmnt
#c ----------   ----------   ---------   ----    ----    --------
#c metharg 1    02           03          04      05      06
#c metharg 2    07           08          09      10      11
#c metharg 3    12           13          14      15      16
#c metharg 4    17           18          19      20      21
#c
#c Macro Arg 22: function description
#c
#startm AD_XFUNCTION4 22
#endm


#ccccccccccccccccccccccccccc
#c
#c macro for things which are not to be exported.
#c
#startm AD_NO_EXPORT 01
#endm
