#c/*************************************************\
#c*													*
#c* Advanced Authoring Format						*
#c*													*
#c* Copyright (c) 1998-1999 Avid Technology, Inc.	*
#c*													*
#c\*************************************************/
#startm .this-module 0
AAFDefObject\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
AD_HEAD
AD_IDL(//
// This interface is defines an item to be referenced in the AAF file.
// It specifies the AUID unique identifier used to define types used
// in AAF persistent objects.
AD_STD_COMMENT_IFC_HEADER
AD_STD_COMMENT_IFC_INIT)
AD_INCLUDE(AAFTypes)
AD_CLASS_UUID(dfbd6528, 1d81, 11d2, bf, 96, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(dfbd6527, 1d81, 11d2, bf, 96, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Abstract, StoredObject)
AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(Name,
     the Name of this definition.)


AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(Description,
     the Description of this definition.)


AD_XMETHOD1(GetAUID,
		   [retval\,out],
		   objPass,
		   aafUID_t *,
		   pAuid,
		   Pointer to an AUID reference,
		   Gets the AUID for this object.)


AD_XMETHOD1(AppendPluginDef,
			[in],
			objIn,
			AAFPluginDescriptor,
			pPluginDef,
			PluginDef to append,

     Append another PluginDef to this PluggableDefinition.  Use this
  // function to add a PluginDef to be scanned last when searching for
  // the plugin \(a secondary location for the plugin\).
  // 
  // Succeeds if all of the following are true:
  // - the pPluginDef pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pPluginDef is null.)


AD_XMETHOD1(PrependPluginDef,
			[in],
			objIn,
			AAFPluginDescriptor,
			pPluginDef,
			PluginDef to append,

     Append another PluginDef to this PluggableDefinition.  Use this
  // function to add a PluginDef to be scanned first when searching
  // for the plugin \(a new primary location for the plugin\).
  // 
  // Succeeds if all of the following are true:
  // - the pPluginDef pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pPluginDef is null.)


AD_XMETHOD1(GetPluginDefs,
			[out\, retval],
			objOut,
			EnumAAFPluginDescriptors,
			ppEnum,
			AAFPluginDef Enumeration,
     Returns an IEnumAAFPluginDescriptors enumerator for the plugin
  // descriptors contained in the AAFPluggableDef through the *ppEnum
  // argument.
  // 
  // The returned enumerator is AddRef\(\)ed before it is returned.
  //
  // Succeeds if all of the following are true:
  // - this object has already been initialized.
  // - the ppEnum pointer is valid.
  // 
  // If this method fails nothing will be written to *ppEnum.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - Initialize\(\) has already been called on this object.
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEnum is null.
  //
  // E_FAIL
  //   - Failed to create the enumerator.)


AD_XMETHOD1(CountPluginDefs,
			[out\, retval],
			objPass,
			aafUInt32 *,
			pResult,
			Total number of plugin descriptor objects,
     Writes the number of plugin descriptor objects into the *pResult
  // argument.
  // 
  // Succeeds if all of the following are true:
  // - the pResult pointer is valid.
  // 
  // If this method fails nothing will be written to *pResult.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pResult is null.)


AD_XMETHOD2(InsertPluginDefAt,
			[in],
			objPass,
			aafUInt32,
			index,
			Index where plugin descriptor is to be inserted,

			[in],
			objIn,
			AAFPluginDescriptor,
			pPluginDef,
			Plugin descriptor to insert,

     Inserts the given plugin descriptor at the given index.  The
  // plugin descriptors already existing at the given and higher
  // indices are all moved to the next higher index.
  // 
  // Succeeds if all of the following are true:
  // - the pPluginDef pointer is valid.
  // - index is less than or equal to the value returned by
  // CountPluginDefs\(\).
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pPluginDef is null.
  //
  // AAFRESULT_BADINDEX
  //   - index is greater than the result of
  //     CountPluginDefs\(\).)


AD_XMETHOD2(GetPluginDefAt,
			[in],
			objPass,
			aafUInt32,
			index,
			Index of plugin descriptor to retrieve,

			[out\, retval],
			objOut,
			AAFPluginDescriptor,
			ppPluginDef,
			Retrieved plugin descriptor,

     Retrieves the indexed plugin descriptor from the header.
  // 
  // Succeeds if all of the following are true:
  // - the ppPluginDef pointer is valid.
  // - index is less than the value returned by CountPluginDefs\(\).
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppPluginDef is null.
  //
  // AAFRESULT_BADINDEX
  //   - index is greater than or equal to result of
  //     CountPluginDefs\(\).)


AD_XMETHOD1(RemovePluginDefAt,
			[in],
			objPass,
			aafUInt32,
			index,
			Index of plugin descriptor to be removed,

     Removes the given plugin descriptor at the given index.  The
  // plugin descriptors already existing at the given and higher
  // indices are all moved to the next lower index.
  // 
  // Succeeds if all of the following are true:
  // - index is less than the value returned by
  //   CountPluginDefs\(\).
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_BADINDEX
  //   - index is greater than or equal to the result of
  //     CountPluginDefs\(\).)
AD_XCLASS_END(Abstract, StoredObject)
