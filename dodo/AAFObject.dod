#c/*************************************************\
#c*                                                 *
#c* Advanced Authoring Format                       *
#c*                                                 *
#c* Copyright (c) 1998-1999 Avid Technology, Inc.   *
#c*                                                 *
#c\*************************************************/
#startm .this-module 0
AAFObject\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(//
// This interface is implemented for all AAF persistent classes.  In
// addition to methods which all clients can use\, it provides methods
// for direct property access which should not be used unless the
// client programmer is aware of the liabilities.
AD_STD_COMMENT_IFC_HEADER
AD_STD_COMMENT_IFC_INIT)

AD_FORWARD_DECLARATION(AAFDictionary)
AD_FORWARD_DECLARATION(AAFClassDef)
AD_FORWARD_DECLARATION(AAFPropertyDef)
AD_FORWARD_DECLARATION(AAFPropertyValue)
AD_FORWARD_DECLARATION(EnumAAFProperties)

AD_CLASS_UUID(B1A213AC, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A213AB, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)
AD_XCLASS_BEGIN(Abstract, StoredObjectBase)
AD_XMETHOD1(SetGeneration,
			[in\, ref],
			objPass,
			aafUID_constref,
			generation,
			Generation ID to which this object is to be set,
			Sets the generation of this object to the given value.
  //
  AD_STD_COMMENT_METH_STUB
  AD_STD_COMMENT_METH_ERR_HEADER)


AD_XMETHOD1(GetGeneration,
			[out],
			objPass,
			aafUID_t *,
			pGeneration,
			Generation ID into which this object's generation is to be written,
		    Gets the generation of this object\, which is a unique identifier
  // that is used to detect when an object has been modified.  The
  // generation is placed into the caller-allocated aafUID_t pointed
  // to by pGeneration.
  //
  AD_STD_COMMENT_METH_STUB
  // Succeeds if all of the following are true:
  // - the given pGeneration pointer is valid.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pGeneration\))


AD_XMETHOD1(GetDefinition,
            [out],
			objOut,
			AAFClassDef,
			ppClassDef,
			class definition of which this object is an instance.,
            Returns the class definition which describes this object
  // instance.
  //
  // Succeeds if all of the following are true:
  // - the given ppClassDef pointer is valid.
  //
  // Note! Use care when dealing with the object class.  Among the
  // pitfalls to be avoided is that tests for equality will not
  // reflect inheritance.  This becomes important if an unknown
  // non-builtin \(that is\, user defined\) object class ID is obtained.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppClassDef\))


AD_XMETHOD1(GetProperties,
			[out\, retval],
			objOut,
			EnumAAFProperties,
			ppEnum,
			Property Enumeration,
            Returns an enumerator across all properties actually contained in
  // this object.  Each property is represented by an IAAFProperty
  // interface.
  // 
  AD_STD_COMMENT_METH_ADDREF\(ppEnum\)
  AD_STD_COMMENT_METH_STUB
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  // 
  // If this method fails nothing will be written to *ppEnum.
  // 
  // Note! This is a low-level method which allows direct access to
  // properties.  If such access is done\, any semantic checking \(such
  // as that which is performed in all other named property Get/Set
  // methods\) is not done here.  Users must use this method at their
  // own risk.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppEnum\))


AD_XMETHOD1(CountProperties,
            [out],
            objPass,
            aafUInt32 *,
            pCount,
            count of properties present in this object,
            Returns the number of properties currently present in this
  // object.  This is the same number as will be accessed through
  // GetProperties\(\).
  // 
  // Note! This is a low-level method which allows direct access to
  // properties.  If such access is done\, any semantic checking \(such
  // as that which is performed in all other named property Get/Set
  // methods\) is not done here.  Users must use this method at their
  // own risk.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pCount\))


AD_XMETHOD2(GetPropertyValue,
			[in],
			objIn,
			AAFPropertyDef,
			pPropDef,
			property definition indentifying desired property,

			[out],
			objOut,
			AAFPropertyValue,
			ppPropVal,
			returned AAFPropertyValue,

     Returns the requested Property Value.  The desired property data
  // is identified by the given property definition.
  // 
  // Note! This is a low-level method which allows direct access to
  // properties.  If such access is done\, any semantic checking \(such
  // as that which is performed in all other named property Get/Set
  // methods\) is not done here.  Users must use this method at their
  // own risk.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pPropDef or ppPropVal\)
  //
  // AAFRESULT_ILLEGAL_PROPERTY
  //   - named property illegal for this object's class.
  //
  // AAFRESULT_PROPERTY_NOT_PRESENT
  //   - named property is optional\, but not present in this class.)


AD_XMETHOD2(SetPropertyValue,
			[in],
			objIn,
			AAFPropertyDef,
			pPropDef,
			property definition indentifying desired property,

			[in],
			objIn,
			AAFPropertyValue,
			pPropVal,
			value to set.,

     Sets the value of the given property to the given value.  If the
  // selected property is optional but not yet present\, will make the
  // property present before setting its value.
  //
  // Note! This is a low-level method which allows direct access to
  // properties.  If such access is done\, any semantic checking \(such
  // as that which is performed in all other named property Get/Set
  // methods\) is not done here.  Users must use this method at their
  // own risk.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pPropDef or ppPropVal\)
  //
  // AAFRESULT_ILLEGAL_PROPERTY
  //   - named property illegal for this object's class.
  //
  // AAFRESULT_PROPERTY_NOT_PRESENT
  //   - named property is optional\, but not present in this class.)


AD_XMETHOD2(IsPropertyPresent,
			[in],
			objIn,
			AAFPropertyDef,
			pPropDef,
			property definition indentifying desired property,
			
			[out],
			objPass,
			aafBool*,
			pResult,
			true if present; false if not present,

     Sets *pResultReturns true in if named property is legal and is
  // present; sets it to false if it is legal and is absent.
  // 
  // Note! This is a low-level method which allows direct access to
  // properties.  If such access is done\, any semantic checking \(such
  // as that which is performed in all other named property Get/Set
  // methods\) is not done here.  Users must use this method at their
  // own risk.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(pResult\)
  //
  // AAFRESULT_ILLEGAL_PROPERTY
  //   - named property illegal for this object's class.)


AD_XMETHOD1(GetDictionary,
            [out\, retval],
		objOut,
		AAFDictionary,
		ppDictionary,
		A pointer to an Dictionary pointer,
            Returns the dictionary for this object instance.
  //
  // Succeeds if all of the following are true:
  // - the given ppDictionary pointer is valid.
  //
  // Note! Use care when dealing with the object class.  Among the
  // pitfalls to be avoided is that tests for equality will not
  // reflect inheritance.  This becomes important if an unknown
  // non-builtin \(that is\, user defined\) object class ID is obtained.
  AD_STD_COMMENT_METH_ERR_HEADER
  AD_STD_COMMENT_METH_ERR_NULL_PARAM\(ppClassDef\))
AD_XCLASS_END(Abstract, StoredObjectBase)
