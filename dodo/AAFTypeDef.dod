#startm .this-module 0
AAFTypeDef\
#endm
#c
#startm .parent-module 0
AAFDefObject\
#endm
#c
AD_HEAD
AD_IDL(//
// This interface is used to define types used in AAF persistent
// objects.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//
// AAFRESULT_NOT_INITIALIZED
//   - This object has not yet had Initialize\(\) called on it through
//     this object's primary interface.  Note that IAAFObject is a
//     primary interface for an abstract class\, so it is not
//     appropriate for the Initialize\(\) method to exist in this
//     interface.  The Initialize\(\) method is available through the
//     concrete object's primary interface.
//
/***********************************************\
*	Stub only.   Implementation not yet added	*
\***********************************************/)
AD_FORWARD_DECLARATION(AAFReferenceValue)
AD_FORWARD_DECLARATION(EnumAAFReferenceValues)
AD_CLASS_UUID(dfbd6524, 1d81, 11d2, bf, 96, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(dfbd6523, 1d81, 11d2, bf, 96, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Abstract, StoredObject)
AD_XMETHOD1(GetID,
			[out\, retval],
			objPass,
			aafUID_t *,
			pAuid,
			Pointer to AUID reference,

			Gets the AUID that uniquely identifies this type definition.
  //
  // Succeeds if:
  // - This object has already been Initialize\(\)d.
  // - The pAuid pointer is valid.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - The pAuid pointer is NULL.)


AD_XMETHOD1(SetID,
		    [in],
			objPass,
		    aafUID_t *,
		    pAuid,
		    Type Definition's AUID,
			Sets the AUID that uniquely identifies this type definition.
  //
  // Succeeds if:
  // - This object has already been Initialize\(\)d.
  // - The pAuid pointer is valid.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - The pAuid pointer is NULL.)


AD_XMETHOD1(GetMinVersion,
			[out\, retval],
			objPass,
			aafVersionType_t *,
			pMinVersion,
			Pointer to the minimum version ,

			Gets the Minimum AAF Version for this type object.
  //
  // Succeeds if:
  // - This object has already been Initialize\(\)d.
  // - The pMinVersion pointer is valid.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - The pMinVersion pointer is NULL.)


AD_XMETHOD1(SetMinVersion,
		    [in],
		    objPass,
		    aafVersionType_t *,
		    pMinVersion,
		    Minimum AAF Version,

		    Sets the Minimum AAF Version for type definition.
  //
  // Succeeds if:
  // - This object has already been Initialize\(\)d.
  // - The pMinVersion pointer is valid.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - The pMinVersion pointer is NULL.)


AD_XMETHOD1(GetMaxVersion,
		    [out\, retval],
		    objPass,
		    aafVersionType_t *,
		    pMaxVersion,
		    Pointer to the maximum version ,

		    Gets the Maximum AAF Version for this type object.
  //
  // Succeeds if:
  // - This object has already been Initialize\(\)d.
  // - The pMaxVersion pointer is valid.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - The pMaxVersion pointer is NULL.)


AD_XMETHOD1(SetMaxVersion,
		    [in],
			objPass,
		    aafVersionType_t,
		    MaxVersion,
		    Maximum AAF Version,

		    Sets the Maximum AAF Version for type definition.
  //
  // Succeeds if:
  // - This object has already been Initialize\(\)d.
  // - The pMaxVersion pointer is valid.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - The pMaxVersion pointer is NULL.)


AD_XMETHOD1(GetSwapNeeded,
		    [out\, retval],
			objPass,
		    aafSwapNeeded_t *,
		    pSwapNeeded,
		    Specifies whether the bytes in this type need to be swapped,

  		    Gets the swap information for this object.  Sets *pSwapNeeded to
  // true if swap is needed; sets it to false otherwise.
  //
  // Succeeds if:
  // - This object has already been Initialize\(\)d.
  // - The pSwapNeeded pointer is valid.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - The pSwapNeeded pointer is NULL.)


AD_XMETHOD1(SetSwapNeeded,
		    [in],
			objPass,
		    aafSwapNeeded_t,
		    SwapNeeded,
		    Specifies wheter the bytes in this type need to be swapped,

			Sets the swap information for this object.  If SwapNeeded is
  // true\, indicates swap is needed; otherwise indicates swap is not
  // needed.
  //
  // Succeeds if:
  // - This object has already been Initialize\(\)d.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(GetRefValues,
			[out\,retval],
			objOut,
			EnumAAFReferenceValues,
			ppEnum, 
			Reference value Enumeration,

            Places an enumerator for reference values into the *ppEnum argument.
  // 
  // The returned enumerator is AddRef\(\)ed before it is returned.
  // 
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  // 
  // If this method fails nothing will be written to *ppEnum.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEnum is null.)


AD_XMETHOD1(GetTypeCategory,
			[out],
			objPass,
			eAAFTypeCategory_t *,
			pTid,
			Returned type category,
			Returns the type category to which this type definition	belongs.
  // 
  // Succeeds if:
  // - The pTid argument is valid
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - the pTid pointer arg is NULL.)
AD_XCLASS_END(Abstract, StoredObject)
