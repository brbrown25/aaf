#c/*************************************************\
#c*													*
#c* Advanced Authoring Format						*
#c*													*
#c* Copyright (c) 1998-1999 Avid Technology, Inc.	*
#c*													*
#c\*************************************************/
#startm .this-module 0
AAFNestedScope\
#endm
#c
#startm .parent-module 0
AAFSegment\
#endm
#c
AD_HEAD
AD_IDL(//
// This interface is used with an object which contains an ordered set of AAFSegments
// and produces the value specified by the last AAFSegement in the ordered seta reference
// to a segment.  AAFNestedScopes are used to encapsulate intermediate results which may be
// referenced from more than one place\, in a manner much like common subexpressions in
// mathmatical expressions.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)

AD_INCLUDE(AAFTypes)
/***********************************************\
*												*
* Advanced Authoring Format						*
*												*
* Copyright (c) 1998-1999 Avid Technology, Inc. *
*												*
\***********************************************/

AD_FORWARD_DECLARATION(AAFSegment)
AD_FORWARD_DECLARATION(EnumAAFSegments)

AD_CLASS_UUID(e44be452, 2099, 11d2, bf, 98, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(e44be451, 2099, 11d2, bf, 98, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Concrete, StoredObject)

AD_XMETHOD1(AppendSegment,
			[in],
			objIn,
			AAFSegment,
			pSegment, 
			Pointer to segment to be added,
			Append another input segment to the list of source segments.  The last segment
  // added will be used as the output of the nested scope\, and usually contains operations
  // whose inputs are scope references.
  // 
  // Succeeds if all of the following are true:
  // - the pSegment pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pSegment is null.)

AD_XMETHOD1(RemoveSegment,
			[in],
			objIn,
			AAFSegment,
			pSegment, 
			Pointer to segment to be added,
			Remove the Segment from the Slots list.
  // 
  // Succeeds if all of the following are true:
  // - the pSegment pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\
  )
  //
  // AAFRESULT_NULL_PARAM
  //   - pSegment is null.)

AD_XMETHOD1(GetSlots,
			[retval][out],
			objOut,
			EnumAAFSegments,
			ppEnum,
			Slots - segment list  enumeration,
			Return an enumerator for the ordered list of AAFSegments which make up the
  // nested scope.
  // 
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  // 
  // If this method fails nothing will be written to *ppEnum.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEnum is null.)

AD_XCLASS_END(Concrete, StoredObject)
