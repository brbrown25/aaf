#startm .this-module 0
AAFParameterDef\
#endm
#c
#startm .parent-module 0
AAFDefObject\
#endm
#c
AD_HEAD
AD_IDL(//
// The IAAFParameterDef interface is implemented by objects that specify a
// definition of an operation group parameter.  The parameterDef object is separate from the
// operation definition to allow some parameters\, for example level\, to be specified
// once for multiple operation definitions.
// Parmeter definitions define the possible values and display units of a single operation
// parameter.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)

AD_FORWARD_DECLARATION(AAFReferenceValue)
AD_FORWARD_DECLARATION(EnumAAFReferenceValues)
AD_FORWARD_DECLARATION(AAFTypeDef)

/***********************************************\
*												*
* Advanced Authoring Format						*
*												*
* Copyright (c) 1998-1999 Avid Technology, Inc. *
* Copyright (c) 1998-1999 Microsoft Corporation *
*												*
\***********************************************/

AD_CLASS_UUID(20045fa2, 1d87, 11d2, bf, 96, 00, 60, 97, 11, 62, 12) 

AD_DEFAULT_UUID(20045fa1, 1d87, 11d2, bf, 96, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Concrete, StoredObject)

AD_XMETHOD1(GetTypeDef,
		   [retval\,out],
		   objOut,
		   AAFTypeDef,
		   pTypeDef,
		   Pointer to a type definition,
			Places the AAFTypeDef object attached to this IAAFParameterDef into the
  // *ppDataDef argument.  If none exists yet\, NULL is placed into the
  // *ppDataDef argument.
  //
  // The returned AAFTypeDef object\, if it exists\, is
  // AddRef\(\)ed before it is returned.
  //
  // Succeeds if all of the following are true:
  // - the ppDataDef pointer is valid.
  // - A valid AAFTypeDef exists.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - ppDataDef is null.
  //
  // AAFRESULT_NO_ESSENCE_DESC
  //   - There is no AAFTypeDef.  There has to be one of some
  //     kind for this to be a valid operation definition.)

AD_XMETHOD1(SetTypeDef,
		   [in],
		   objIn,
		   AAFTypeDef,
		   ppTypeDef,
		   Pointer to a type definition,
			Sets the AAFTypeDef of this IAAFOperationDef to be the given one.
  //
  // Succeeds if all of the following are true:
  // - the ppTypeDef pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - ppTypeDef is null.)

AD_XMETHOD2(GetDisplayUnits,
			[in\,string],
			objPass,
			wchar_t *,
			pDisplayUnits,
			DisplayUnits,

			[in],
			objPass,
			aafInt32,
			bufSize,
			length of the buffer to hold DisplayUnits,

			Writes the DisplayUnits\, with a trailing null character\, into the
  // pDisplayUnits buffer.  The buffer is allocated by the caller.  The size
  // of the buffer is given by bufSize.  If the property name has not
  // yet been set\, a zero-length string will be written \(that is\,
  // only the trailing null character\).
  // 
  // Caller may call GetDisplayUnitsBufLen\(\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pDisplayUnits pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to *pDisplayUnits.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pDisplayUnits arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.)

AD_XMETHOD1(GetDisplayUnitsBufLen,
			[out],
			objPass,
			aafInt32 *,
			pLen,
			DisplayUnits,

			Returns the length of buffer required for the GetDisplayUnits\(\) method.  
  // The value is placed into the location
  // specified by pLen. The value will include space required for the
  // trailing null character.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)



AD_XMETHOD1(SetDisplayUnits,
			[in\, string],
			objPass,
			wchar_t *,
			pDisplayUnits,
			DisplayUnits,

		   Sets the DisplayUnits of the operation definition. DisplayUnits is a
  // name that describes  a group of operation groups.  A copy is made of the data so the caller
  // retains ownership of the *pDisplayUnits buffer and is responsible for
  // de-allocating it. 
  // 
  // Succeeds if all of the following are true:
  // - the pDisplayUnits pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pDisplayUnits arg is NULL.)

AD_XMETHOD1(AddReferenceValue,
			[in],
			objIn,
			AAFReferenceValue,
			pReferenceValue, 
			Ref value to be added,
			Add the ReferenceValue object to the unordered list of ReferenceValues.
  // 
  // Succeeds if all of the following are true:
  // - the pAAFReferenceValue pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pReferenceValue is null.)

AD_XMETHOD1(GetRefValues,
			[out\,retval],
			objOut,
			EnumAAFReferenceValues,
			ppEnum, 
			Reference value Enumeration,
			Return an enumerator for the unordered list of AAF ReferenceValue definitions.
  // 
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  // 
  // If this method fails nothing will be written to *ppEnum.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded. \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEnum is null.)

AD_XCLASS_END(Concrete, StoredObject)
