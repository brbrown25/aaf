#startm .this-module 0
AAFSequence\
#endm
#c
#startm .parent-module 0
AAFSegment\
#endm
#c
#import ./AAFSegment.exp
AD_HEAD
AD_IDL(//
// This interface provides access to the list of Segment and
// Transition objects maintained by a Sequence object.
//)
AD_FORWARD_DECLARATION(AAFTimecode)
AD_FORWARD_DECLARATION(AAFComponent)
AD_FORWARD_DECLARATION(AAFSegment)
AD_FORWARD_DECLARATION(AAFDataDef)
AD_FORWARD_DECLARATION(EnumAAFComponents)
AD_CLASS_UUID(66e855f1, 2bc2, 11d2, bf, aa, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(66e855f0, 2bc2, 11d2, bf, aa, 00, 60, 97, 11, 62, 12)
AD_CLASS_BEGIN
AD_XMETHOD1(SetInitialValue,
			[in],
			objPass,
			aafUID_t *,
			pDatadef,
			DataDef of this object,
			This function sets the properties on a newly created sequence
  // object with the given property values. The length of the sequence is
  // initially set to 0.  When components are appended to the sequence with
  // the AppendComponent\(\) call\, the length of the appended component is
  // added to the length of the sequence.
  // 
  // Succeeds if all of the following are true:
  // - the pDatadef pointer is valid.
  // 
  // If this method fails no state is changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pDatadef is null.)


AD_XMETHOD1(AppendComponent,
			[in],
			objIn,
			AAFComponent,
			pComponent,
			Component to append to the sequence,
			This function appends the input component to the given sequence\,
  // enforcing bottom up creation of mobs.  The length of the sequence
  // is incremented by the size of the component\, unless the component
  // is a transition.  If the component is a transition\, it verifies
  // that it is not the first object in a transition\, and that it is
  // not neighboring another transition.  It also verifies that there
  // is enough source material on either side of the transition.  The
  // function also verifies that the datakinds are compatible.
  //
  // If the component is successfully appended to the sequence\, the
  // reference count of the component is incremented.
  // 
  // Succeeds if all of the following are true:
  // - the pComponent pointer is valid.
  // 
  // If this method fails no state is changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pComponent is null.
  //
  // AAFRESULT_INVALID_DATAKIND
  //   - The data kind of the component is not compatible with the 
  //     data kind of the sequence.
  //
  // AAFRESULT_LEADING_TRAN
  //   - Attempted to append a transition as the first component of
  //     a sequence.  A sequence can not start with a transition. 
  //
  // AAFRESULT_ADJACENT_TRAN
  //   - Attempted to append a transition next to a transition.  A
  //     sequence can not contain back to back transitions.
  //
  // AAFRESULT_INSUFF_TRAN_MATERIAL
  //   - There is not enough source material to add this component.
  //)


AD_XMETHOD1(RemoveComponent,
			[in],
			objIn,
			AAFComponent,
			pComponent,
			Component to append to the sequence,
			This function removes the input component from the given
  // sequence\, deleting it from any associated AAF file.  The length
  // of the sequence is decremented by the size of the component.
  // 
  // Succeeds if all of the following are true:
  // - the -pComponent pointer is valid.
  // 
  // If this method fails no state is changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pComponent is null.)


AD_XMETHOD1(GetNumComponents,
			[out],
			objPass,
			aafInt32 *,
			pNumCpnts,
			Number of components,
			This function returns the number of components in the sequence.
  // 
  // Succeeds if all of the following are true:
  // - the pNumCpnts pointer is valid.
  // 
  // If this method fails no state is changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pNumCpnts is null.)


AD_XMETHOD1(EnumComponents,
			[out\, retval],
			objOut,
			EnumAAFComponents,
			ppEnum,
			Component Enumeration,
			Places an IEnumAAFComponents enumerator for the components contained in the sequence
  // into the *ppEnum argument.
  // 
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  // 
  // If this method fails nothing will be written to *ppEnum.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEnum is null.
  //
  // E_FAIL
  //   - Failed to create the enumerator.
  //)


AD_OVERRIDE(.method-SegmentOffsetToTC)
AD_OVERRIDE(.method-SegmentTCToOffset)
AD_CLASS_END
