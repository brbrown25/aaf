#startm .this-module 0
AAFFilmDescriptor\
#endm
#c
#startm .parent-module 0
AAFEssenceDescriptor\
#endm
#c
#c #import ./AAFEssenceDescriptor.exp
AD_HEAD
AD_IDL(//
// The IAAFFilmDescriptor interface is implemented by objects which
// describe film essence.  A FilmDescriptor object
// shall be the EssenceDescription of a  physical Source Mob.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)
/***********************************************\
*												*
* Advanced Authoring Format						*
*												*
* Copyright (c) 1998-1999 Avid Technology, Inc. *
*												*
\***********************************************/

AD_INCLUDE(AAFTypes)

AD_CLASS_UUID(e58a8564, 2a3e, 11D2, bf, a4, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(e58a8563, 2a3e, 11D2, bf, a4, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Concrete, StoredObject)

//@access Public Members

/****/
AD_XMETHOD1(SetFilmManufacturer,
			[in\, string],
			objPass,
			aafCharacter *,
			pName,
			Film manufacturer name,

			This method sets the manufacturer name property on a film descriptor to the value
  // specified in pName.  A copy is made of the data so the caller
  // retains ownership of the *pName buffer and is responsible for
  // de-allocating it. 
  // 
  // Succeeds if all of the following are true:
  // - the pName pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pName arg is NULL.)

/****/
AD_XMETHOD2(GetFilmManufacturer,
			[in\,string],
			objPass,
			aafCharacter *,
			pManufacturer,
			Film manufacturer name,

			[in],
			objPass,
			aafInt32,
			bufSize,
			length of the buffer to hold manufacturer Name,

			Writes the film manufacturer name\, with a trailing null character\, into the
  // pManufacturer buffer.  The buffer is allocated by the caller.  The size
  // of the buffer is given by bufSize.  If the property name has not
  // yet been set\, a zero-length string will be written \(that is\,
  // only the trailing null character\).
  // 
  // Caller may call GetFilmManufacturerBufLen\(\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pManufacturer pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to *pname.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pManufacturer arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.)


AD_XMETHOD1(GetFilmManufacturerBufLen,
			[out],
			objPass,
			aafInt32 *,
			pLen,
			Film manufacturer name length,

			Returns the length of buffer required for the GetFilmManufacturer\(\) method.
  // The value is placed into the location
  // specified by pLen\, and will include space required for the
  // trailing null character.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)

	
/****/
AD_XMETHOD1(SetFilmModel,
			[in\, string],
			objPass,
			aafCharacter *,
			pName,
			Film model name,

			This method sets the model or brand of the film stock to the value
  // specified in pName.  A copy is made of the data so the caller
  // retains ownership of the *pName buffer and is responsible for
  // de-allocating it. 
  // 
  // Succeeds if all of the following are true:
  // - the pName pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pName arg is NULL.)
/****/
AD_XMETHOD2(GetFilmModel,
			[in\,string],
			objPass,
			aafCharacter *,
			pName,
			Film manufacturer name,

			[in],
			objPass,
			aafInt32,
			bufSize,
			length of the buffer to hold manufacturer Name,

			Writes the foptional model or brand of the film stock\, with a trailing null character\, into the
  // pName buffer.  The buffer is allocated by the caller.  The size
  // of the buffer is given by bufSize.  If the property name has not
  // yet been set\, a zero-length string will be written \(that is\,
  // only the trailing null character\).
  // 
  // Caller may call GetFilmManufacturerBufLen\(\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pName pointer is valid.
  // - bufSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to *pname.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pName arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - bufSize indicates the buffer is too small to hold the string.)

AD_XMETHOD1(GetFilmModelBufLen,
			[out],
			objPass,
			aafInt32 *,
			pLen,
			Film manufacturer name length,

			Returns the length of buffer required for the GetFilmModel\(\) method.
  // The value is placed into the location
  // specified by pLen\, and will include space required for the
  // trailing null character.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)


/****/
AD_METHOD1(GetFilmFormat,
[out],aafFilmType_t*,pFilmFormat, pointer to the filmFormat,
			Gets the film format.  Valid values include
  // kFt35MM\\\, kFt16MM\\\, kFt8MM\\\, and kFt65MM.
  // 
  // This method succeeds if all of the following are true:
  // - the pFilmFormat pointer is valid.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pFilmFormat arg is NULL.)

/****/
AD_METHOD1(GetFrameRate,
[out],aafUInt32*,pRate,Frame Rate,
Get the frame rate of the film.
  // 
  // This method succeeds if all of the following are true:
  // - the pRate pointer is valid.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pRate parameter is NULL.)


/****/
AD_METHOD1(GetPerfPerFrame,
[out],aafUInt8*,pPerfPerFrame,Perforations per frame,
	Get the number of perforations per frame.
 // 
  // This method succeeds if all of the following are true:
  // - the pPerfPerFrame pointer is valid.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pPerfPerFrame parameter is NULL.)


/****/
AD_METHOD1(GetFilmAspectRatio,
[out],aafRational_t*,pAspectRatio,Film Aspect Ratio,
Get the image aspect ratio.
 // 
  // This method succeeds if all of the following are true:
  // - the pAspectRatio pointer is valid.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pAspectRatio arg is NULL.)

/****/
AD_METHOD1(SetFilmFormat,
[in],aafFilmType_t,filmFormat,Film Format,
			Sets the film format of the film.  Valid values include
  // kFt35MM\\\, kFt16MM\\\, kFt8MM\\\, and kFt65MM.
  // 
  // This method succeeds if all of the following are true:
  // - formFactor represents a valid format.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.
  //
  // AAFRESULT_BAD_TYPE
  //	- filmFormat is invalid.)


/****/
AD_METHOD1(SetFrameRate,
[in],aafUInt32,rate,Frame Rate,
			Set the frame rate of the film.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.)

/****/
AD_METHOD1(SetPerfPerFrame,
[in],aafUInt8,perfPerFrame,Perforations per frame,
		Set the number of perforations per frame.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.)

/****/
AD_METHOD1(SetFilmAspectRatio,
[in],aafRational_t,aspectRatio,Film Aspect Ratio,
		Set the image aspect ratio.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.)

AD_XCLASS_END(Concrete, StoredObject)
   
