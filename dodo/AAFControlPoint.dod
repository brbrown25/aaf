#c/*************************************************\
#c*													*
#c* Advanced Authoring Format						*
#c*													*
#c* Copyright (c) 1998-1999 Avid Technology, Inc.	*
#c*													*
#c\*************************************************/
#c/***********************************************\
#c*                                               *
#c* Advanced Authoring Format                     *
#c*                                               *
#c* Copyright (c) 1998-1999 Avid Technology, Inc. *
#c*                                               *
#c\***********************************************/
#startm .this-module 0
AAFControlPoint\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
#c
AD_HEAD
AD_IDL(//
// The IAAFControlPoint interface is implemented by objects that store an individual point value
// of a parameter whose value changes during the operation group.  IAAFControlPoints must be added to
// an object which implements IAAFVaryingValue\, which is then added to the IAAFOperationGroup.
//
// For parameters which are constant in value during the operation group\, use IAAFConstantValue.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)


AD_FORWARD_DECLARATION(AAFDataDef)
AD_FORWARD_DECLARATION(AAFTypeDef)

AD_CLASS_UUID(86192db2, 2a23, 11D2, BF, a3, 00, 60, 97, 11, 62, 12)

AD_DEFAULT_UUID(86192db1, 2a23, 11D2, BF, a3, 00, 60, 97, 11, 62, 12)
AD_XCLASS_BEGIN(Concrete, StoredObject)

AD_METHOD1(GetTime,
			[out\\\,retval],
			aafRational_t *,
			pTime,
			Pointer to an aafRational_t,
	Returns the position of the control point within an operation group\\\, expressed as a rational
  // running from 0 to 1.
  // 
  // Succeeds if all of the following are true:
  // - the pTime pointer is valid.
  // 
  // If this method fails nothing will be written to *pTime.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.
  //
  // AAFRESULT_PROP_NOT_PRESENT
  //   - This property does not exist in the file.
  //
  // AAFRESULT_NULL_PARAM
  //   - pTime arg is NULL.)

AD_METHOD1(GetEditHint,
			[out\\\,retval],
			aafEditHint_t *,
			pEditHint,
			Pointer to an aafEditHint_t,
			Returns the edit hint of the control point\\\, which describes how to alter the
  // position if the AAFOperationGroup is made longer or shorter.
  //
  // Succeeds if all of the following are true:
  // - the pEditHint pointer is valid.
  // 
  // If this method fails nothing will be written to *pEditHint.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.
  //
  // AAFRESULT_PROP_NOT_PRESENT
  //   - This property does not exist in the file.
  //
  // AAFRESULT_NULL_PARAM
  //   - pEditHint arg is NULL.)

AD_XMETHOD1(GetValueBufLen,
			[out],
			objPass,
			aafUInt32 *,
			pLen,
			Pointer to an variable used to return the length,

			Returns the length of buffer required for the GetValue\(\) method.
  // The value is placed into the location specified by pLen.
  //
  // Succeeds if all of the following are true:
  // - the pLen pointer is valid.
  //
  // If this method fails nothing will be written to *pLen.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pLen arg is NULL.)

AD_METHOD3(GetValue,
			[in],aafUInt32,valueSize,Size of preallocated buffer,
			[out\\\, size_is\\\(valueSize\\\)\\\,length_is\\\(*bytesRead\\\)],aafDataBuffer_t,pValue,Preallocated buffer to hold value,
			[out],aafUInt32*,bytesRead,Number of actual bytes read,
			Writes the value into the pValue buffer.  The buffer is allocated by the caller\\\,
  // and the size of the buffer is given by valueSize.
  // 
  // Caller may call GetValueBufLen\\\(\\\) to determine the
  // required buffer size.
  // 
  // Succeeds if all of the following are true:
  // - the pValue pointer is valid.
  // - valueSize indicates the buffer is large enough to hold the name.
  // 
  // If this method fails nothing will be written to *pValue.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pValue arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - valueSize indicates the buffer is too small to hold the value.)

AD_METHOD1(SetTime,
		   [in], aafRational_t, pTime,Control Point time,
			Sets the position of the control point within an operation group\\\, expressed as a rational
  // running from 0 to 1.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.)

AD_METHOD1(SetEditHint,
		   [in], aafEditHint_t, editHint,Control Point Edit hint,
		   Sets the control point Edit hint value\\\, which describes how to alter the
  // position if the AAFOperationGroup is made longer or shorter.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.)

AD_XMETHOD1(SetTypeDefinition,
			[in],
			objIn,
			AAFTypeDef,
			pTypeDef,
			Type Definition of the dataval inside of this object,
			Sets the IAAFTypeDefinition of the dataval inside this parameter to be the given one.
  //
  // Succeeds if all of the following are true:
  // - the pTypeDef pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pTypeDef is null.)

AD_XMETHOD1(GetTypeDefinition,
			[out\,retval],
			objOut,
			AAFTypeDef,
			ppTypeDef,
			Type Definition of the dataval inside of this object,
			Places the IAAFTypeDefinition of the dataval inside this parameter into the
  // *ppTypeDef argument.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - ppTypeDef is null.)

AD_METHOD2(SetValue,
			[in],aafUInt32,valueSize, Size of preallocated buffer,
			[in\\\, size_is\\\(valueSize\\\)],aafDataBuffer_t,pValue, buffer containing value,
			The data value is set from a buffer of size valueSize.
  //
  // Succeeds if all of the following are true:
  // - the pValue pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \\\(This is the only code indicating success.\\\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\\\(\\\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pValue is null.)

AD_XCLASS_END(Concrete, StoredObject)

