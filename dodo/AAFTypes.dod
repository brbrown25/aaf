#startm .this-module 0
AAFTypes\
#endm
#c
AD_TYPES_HEAD
/******************************************\
*                                          *
* Advanced Authoring Format                *
*                                          *
* Copyright (c) 1998 Avid Technology, Inc. *
* Copyright (c) 1998 Microsoft Corporation *
*                                          *
\******************************************/




AD_TYPES_BEGIN(B1A2137B, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_CPP_QUOTE(/*)
AD_CPP_QUOTE(\ * Basic types that don't depend on other types.)
AD_CPP_QUOTE(\ */)

AD_CPP_QUOTE(#if \(__MWERKS__ >= 0x1100\))
AD_CPP_QUOTE(#define AAF_INT64_NATIVE	1)
AD_CPP_QUOTE(#define AAF_INT64_TYPE		long long)
AD_CPP_QUOTE(#endif)

AD_CPP_QUOTE(/* SGI Port definitions */)
AD_CPP_QUOTE(#ifdef sgi)
AD_CPP_QUOTE(#if defined\(__LONGLONG\) || defined\(_LONGLONG\))
AD_CPP_QUOTE(#define AAF_INT64_NATIVE	1)
AD_CPP_QUOTE(#define AAF_INT64_TYPE		long long)
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(#endif)

AD_CPP_QUOTE(/* PC Windows 32 Port Definitions */)
#if defined(_WIN32)
#if (!defined(MIDL_PASS) || defined(__midl)) && (!defined(_M_IX86) || (defined(_INTEGRAL_MAX_BITS) && _INTEGRAL_MAX_BITS >= 64))
#define AAF_INT64_NATIVE 1
#define AAF_INT64_TYPE   __int64
#endif
#endif




AD_CPP_QUOTE(/*)
AD_CPP_QUOTE(\ * May have to add compile-time switches for various)
AD_CPP_QUOTE(\ * machines/compilers.  For now these work on the following platforms:)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *	- NT/intel/VC++)
AD_CPP_QUOTE(\ *	- FreeBSD/intel/GCC.)
AD_CPP_QUOTE(\ *	- Irix/SGI/CC)
AD_CPP_QUOTE(\ *	- MacOS/PPC+68k/CWPro)
AD_CPP_QUOTE(\ */)

typedef long			aafInt32;
typedef short			aafInt16;
typedef signed char		aafInt8;

typedef unsigned long	aafUInt32;
typedef unsigned short	aafUInt16;
typedef unsigned char	aafUInt8;

typedef aafUInt16		aafWchar;

typedef aafUInt32		AAFRESULT;


AD_CPP_QUOTE(#ifndef AAFRESULT_NOT_IMPLEMENTED)
AD_CPP_QUOTE(#define AAFRESULT_NOT_IMPLEMENTED	 1	//!!!Move this somewhere else)
AD_CPP_QUOTE(#endif)

AD_CPP_QUOTE(#ifndef NULL)
AD_CPP_QUOTE(#define NULL \(\(void *\)0L\))
AD_CPP_QUOTE(#endif)

typedef enum
{
  AAFFalse = 0,
  AAFTrue = 1
} aafBool;

AD_CPP_QUOTE(#ifndef MAX_NUM_RGBA_COMPS)
#define MAX_NUM_RGBA_COMPS 8 /* limit on the size of component arrays */
AD_CPP_QUOTE(#endif)

AD_CPP_QUOTE(/* Treated as an iteger\, defined as array of 4 shorts if needed */)
#if AAF_USE_NATIVE64
typedef AAF_INT64_TYPE aafInt64;
#else
typedef struct
{
	aafUInt32	words[2];
} aafInt64;
#endif



typedef struct
{
	aafInt32	length;
	aafWchar	*value;
} aafString_t;




AD_CPP_QUOTE(/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * AAF types that map to an integral type or pointer to)
AD_CPP_QUOTE(\ *  integeral type.)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * These each map to an existing integral type or pointer.  Note)
AD_CPP_QUOTE(\ * that aafClassID_t is a structure used to hold storage for a)
AD_CPP_QUOTE(\ * classID\, but most functions take an aafClassIDPtr_t reference.)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)

AD_CPP_QUOTE(/*** Types for all components***/)
typedef aafInt64   		aafLength_t;

AD_CPP_QUOTE(/*** Types for tracks and mob slots***/)
typedef aafInt64  		aafPosition_t;
typedef aafUInt32		aafFrameOffset_t;
typedef aafUInt32		aafFrameLength_t;
typedef aafUInt32   	aafTrackID_t;  
typedef aafInt32   		aafNumTracks_t;

typedef char   			*aafCodecID_t;
typedef aafInt32   		aafNumSlots_t;
typedef struct aafUID   aafClassID_t;
typedef aafUInt8    	*aafDataValue_t;

// Used by all api methods that need to access an array of bytes.
typedef aafUInt8    	*aafDataBuffer_t;


AD_CPP_QUOTE(\/*** Types for effects ***/)
typedef struct aafUID   aafArgIDType_t;
	
AD_CPP_QUOTE(/* typedefs for image processing */)
typedef unsigned char 	aafCompSizeArray_t[MAX_NUM_RGBA_COMPS];
typedef char 			aafCompArray_t[MAX_NUM_RGBA_COMPS];
typedef aafInt32 		aafVideoLineMap_t[2];
typedef aafInt32   		aafJPEGTableID_t; /* for TIFF objects */

AD_CPP_QUOTE(/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Enumerated AAFI types.)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)
typedef enum
{
	kMediaOpenReadOnly, 
	kMediaOpenAppend
} aafMediaOpenMode_t;
	
typedef enum
{
	kDominantField1 = 0, 
	kDominantField2, 
	kNoDominant
} aafFieldDom_t;

typedef enum
{
	kTopField1 = 0, 
	kTopField2, 
	kTopFieldNone
} aafFieldTop_t;

// TomR: The following enumeration, aafVideoFmtOpcode_t and aafAudioFmtOpcode_t, will 
// be replaced by a more general "plugin option" object mechanism [TBD] that does not 
// require the public AAF api to have any declared public knowledge of any particular
// code. We do NOT want to change the public api to support any plugin.
// 
typedef enum
{
	kAAFVFmtEnd = 0,
		 
	kAAFPixelFormat, 		/* operand.expPixelFormat */
	kAAFFrameLayout, 		/* operand.expFrameLayout */
	kAAFFieldDominance,		/* operand.expFieldDom */
	kAAFStoredRect, 		/* operand.expRect */
	kAAFDisplayRect,  		/* operand.expRect */
	kAAFSampledRect,  		/* operand.expRect */
	kAAFPixelSize, 			/* operand.expInt16 */
	kAAFAspectRatio,		/* operand.expRational */
	kAAFAlphaTransparency,  /* operand.expInt32 */
	kAAFGamma,				/* operand.expRational */
	kAAFImageAlignmentFactor, /* operand.expInt32 */
	kAAFVideoLineMap,		/* operand.expLineMap */
	kAAFWillTransferLines,	/* operand.expBoolean */
	kAAFIsCompressed,		/* operand.expBoolean */
	kAAFLineLength,			/* operand.expInt32 */
	
	/* the following group is exclusive to RGBA codec */
	kAAFRGBCompLayout,		/* operand.expCompArray */
	kAAFRGBCompSizes,		/* operand.expCompSizeArray */
	kAAFRGBPalette,			/* operand.expPointer */
	kAAFRGBPaletteLayout,	/* operand.expCompArray */
	kAAFRGBPaletteSizes,	/* operand.expCompSizeArray */	
		
	/* the following group is exclusive to CDCI codec */
	kAAFCDCICompWidth,	    /* operand.expInt32 */
	kAAFCDCIHorizSubsampling,/* operand.expUInt32 */
	kAAFCDCIColorSiting,    /* operand.expColorSiting */
	kAAFCDCIBlackLevel,     /* operand.expUInt32 */
	kAAFCDCIWhiteLevel,     /* operand.expUInt32 */
	kAAFCDCIColorRange,     /* operand.expUInt32 */
	kAAFCDCIPadBits,	    /* operand.expInt16 */
		
	kAAFVideoOpcodeReserved1,
	kAAFVideoOpcodeReserved2,
	kAAFVideoOpcodeReserved3,
	kAAFVideoOpcodeReserved4,
	kAAFVideoOpcodeReserved5,
	kAAFVideoOpcodeReserved6,
	kAAFVideoOpcodeReserved7,
	kAAFVideoOpcodeReserved8,
		
		
	kAAFLastVideoOpcode
} aafVideoFmtOpcode_t;

typedef enum
{
	kAAFPixNone = 0, 
	kAAFPixRGBA, 
	kAAFPixYUV
} aafPixelFormat_t;

typedef enum
{
	kAAFAFmtEnd = 0, 
	kAAFSampleSize, 
	kAAFSampleRate, 
	kAAFSampleFormat, 
	kAAFNumChannels,
	kAAFExpLong,		// TomR:Added to support all options in the union
	kAAFExpRational 	// TomR:Added to support all options in the union
} aafAudioFmtOpcode_t;

AD_CPP_QUOTE(#if 0)
typedef enum
{
	kJcLuminance = 0, 
	kJcChrominance, 
	kJcLuminanceFP16, 
	kJcChrominanceFP16
} aafJPEGcomponent_t;
AD_CPP_QUOTE(#endif)

AD_CPP_QUOTE(typedef enum)
AD_CPP_QUOTE({)
AD_CPP_QUOTE(	kJcLuminance = 0\,) 
AD_CPP_QUOTE(	kJcChrominance)
AD_CPP_QUOTE(#if ! STANDARD_JPEG_Q)
AD_CPP_QUOTE(	\, kJcLuminanceFP16\,) 
AD_CPP_QUOTE(	kJcChrominanceFP16)
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(} aafJPEGcomponent_t;)

typedef enum
{
	kToolkitCompressionEnable = 0, 
	kToolkitCompressionDisable
} aafCompressEnable_t;

typedef enum
{
	kAAFiMedia = 0, 
	kForeignMedia
} aafFileFormat_t;

typedef enum
{
	kTcNonDrop = 0, 
	kTcDrop
} aafDropType_t;

typedef enum
{
	kNoLayout = 0, 
	kFullFrame, 
	kSeparateFields, 
	kOneField, 
	kMixedFields
} aafFrameLayout_t;
	
typedef enum
{
	kCoSiting = 0, 
	kAveraging = 1, 
	kThreeTap = 2
} aafColorSiting_t;
	
typedef enum
{
	kPropRequired,
	kPropOptional
} aafPropertyOpt_t;

typedef enum
{
	kExactMatch,
	kConvertTo,
	kConvertFrom
} AAFDataDefinitionMatch_t;
	  
typedef enum
{
	kAAFAppendIfAbsent,
	kAAFForceOverwrite
} aafAppendOption_t;

typedef enum
{
	kRefLimitMinimum = 0,
	kRefLimitMaximum,
	kRefMinimum,
	kRefMaximum,
	kRefEnumvalue
} aafReferenceType_t;

typedef enum
{
	kAAFSwapIfNeeded,
	kAAFNeverSwap
} aafSwapNeeded_t;

AD_CPP_QUOTE(/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Mob specific data types)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)
typedef enum
{
	kCompMob = 0, 
	kMasterMob, 
	kFileMob, 
	kTapeMob, 
	kFilmMob,
	kPrimaryMob, 
	kAllMob
} aafMobKind_t;

typedef enum
{
  kFindNull, kFindIncoming, kFindOutgoing, kFindRender,
  kFindEffectSrc1, kFindEffectSrc2, kFindEffectSrc3, kFindEffectSrc4, 
  kFindEffectSrc5, kFindEffectSrc6, kFindEffectSrc7, kFindEffectSrc8
} aafEffectChoice_t;

typedef enum
{
	kNoFollowDepend = 0, 
	kFollowDepend
}
aafDepend_t;

typedef enum
{
	kNoIncludeMedia = 0,
	kIncludeMedia
} aafIncMedia_t;

AD_CPP_QUOTE(/* aafIndexType_t: describes the types of HEAD indices */)
typedef enum
{
	kCompMobIndex = 0,
	kSourceMobIndex,
	kMediaIndex,
	kPrimaryMobIndex
} aafIndexType_t;

AD_CPP_QUOTE(/* aafFadeType_t: describes values for SCLP fadein and fadeout types  */)
typedef enum
{
	kFadeNone = 0,
	kFadeLinearAmp,
	kFadeLinearPower
} aafFadeType_t;

typedef enum
{
	kAAFOffsetBinary,
	kAAFSignedMagnitude
} aafAudioSampleType_t;
	
typedef enum
{
	kTapeCaseNull = 0,
	kThreeFourthInchVideoTape,
    kVHSVideoTape,
	k8mmVideoTape,
	kBetacamVideoTape,
	kCompactCassette,
	kDATCartridge,
	kNagraAudioTape
} aafTapeCaseType_t;

typedef enum
{
	kVideoSignalNull = 0,
	kNTSCSignal,
	kPALSignal,
	kSECAMSignal
} aafVideoSignalType_t;

typedef enum
{
	kTapeFormatNull = 0,
	kBetacamFormat,
	kBetacamSPFormat,
	kVHSFormat,
	kSVHSFormat,
	k8mmFormat,
	kHi8Format
} aafTapeFormatType_t;

typedef enum
{
	kAAFNullAttribute = 0,
	kAAFIntegerAttribute,
	kAAFStringAttribute,
	kAAFObjectAttribute
} aafAttributeKind_t;
	
typedef enum
{
	kAAFTwoThreePD,
	kAAFPALPD,
	kAAFOneToOneNTSC,
	kAAFOneToOnePAL
} aafPulldownKind_t;

typedef aafInt16	aafPhaseFrame_t;

typedef enum
{
	kAAFTapeToFilmSpeed,
	kAAFFilmToTapeSpeed
}	aafPulldownDir_t;

typedef struct
{
	aafString_t * category;
	aafString_t * comment;
} aafMobComment_t;



AD_CPP_QUOTE(/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Effect Types)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)	  
typedef enum
{
	kConstInterp = 1, 
	kLinearInterp
} aafInterpKind_t;

typedef enum
{
    kNoEditHint = 0, 
	kProportional, 
	kRelativeLeft, 
	kRelativeRight, 
	kRelativeFixed
} aafEditHint_t;

typedef enum
{
	kVersionUnknown = 0, 
	kVersionReleased, 
	kVersionDebug,
	kVersionPatched, 
	kVersionBeta, 
	kVersionPrivateBuild
} aafProductReleaseType_t;

AD_CPP_QUOTE(\/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Structured AAFI types.)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)
typedef struct
{
	char            major;
	char            minor;
} aafVersionType_t;

typedef struct
{
	aafUInt16				major;
	aafUInt16				minor;
	aafUInt16				tertiary;
	aafUInt16				patchLevel;
	aafProductReleaseType_t	type;
} aafProductVersion_t;

typedef struct
{
	char				*companyName;
	char				*productName;
	char				*productVersionString;
	aafInt32			productID;
	char				*platform;
	aafProductVersion_t	productVersion;
} aafProductIdentification_t;

AD_CPP_QUOTE(extern const aafProductVersion_t AAFToolkitVersion;)

typedef struct
{
	aafUInt32         	TimeVal;
	char            	IsGMT;
} aafTimeStamp_t;

typedef struct aafUID
{
//	aafUInt32           value[4]; // binary compatibility with GUID/CLSID and IID structures.
    aafUInt32 Data1;
    aafUInt16 Data2;
    aafUInt16 Data3;
    aafUInt8  Data4[8];
} aafUID_t;


//typedef struct
//{
//	aafUID_t        	ID; // shouldn't we declare this as a pointer?
//	AD_AAFTYPES(AAFMob) *	Mob;
//} aafObjIndexElement_t;

typedef struct
{
	aafInt32           numerator;
	aafInt32           denominator;
} aafRational_t;

typedef struct
{
	aafInt32           xOffset;
	aafInt32           yOffset;
	aafInt32           xSize;
	aafInt32           ySize;
} aafRect_t;

typedef struct
{
	aafUID_t *			mediaKind;		/* IN -- */
	aafInt16			subTrackNum;	/* IN - The physical output channel */
	aafUInt32           numSamples;	/* IN -- */
	aafUInt32          	buflen;	/* IN -- */
	aafDataBuffer_t		buffer;	/* IN/OUT -- */
	aafUInt32          	bytesXfered;	/* OUT -- */
	aafUInt32			samplesXfered;	/* OUT */
} aafmMultiXfer_t;

typedef struct
{
	aafUID_t *			mediaKind;		/* IN -- */
	aafInt16			subTrackNum;	/* IN - The physical output channel */
	aafInt32           	trackID;		/* IN -- */
	aafRational_t		sampleRate;
} aafmMultiCreate_t;

AD_CPP_QUOTE(#if 0)
typedef struct _aafVideoMemOp_t
{

    aafVideoFmtOpcode_t     opcode;
    [switch_is(opcode)] union
    {
        [case(kAAFPixelFormat)]
			aafPixelFormat_t	expPixelFormat;
        [case(kAAFFrameLayout)]
			aafFrameLayout_t	expFrameLayout;
        [case(kAAFFieldDominance)]
			aafFieldDom_t		expFieldDom	;		
        [case(kAAFStoredRect, kAAFDisplayRect, kAAFSampledRect)]
			aafRect_t			expRect;			
        [case(kAAFPixelSize, kAAFCDCIPadBits)]
			aafInt16			expInt16;			
        [case(kAAFAspectRatio, kAAFGamma)]
			aafRational_t   	expRational;			
        [case(kAAFAlphaTransparency, kAAFImageAlignmentFactor, 
              kAAFLineLength, kAAFCDCICompWidth, kAAFCDCIHorizSubsampling)]
			aafInt32			expInt32;			
        [case(kAAFVideoLineMap)]
			aafVideoLineMap_t	expLineMap;			
        [case(kAAFWillTransferLines, kAAFIsCompressed)]
			aafBool				expBoolean;			
        [case(kAAFRGBCompLayout, kAAFRGBPaletteLayout)]
			aafCompArray_t		expCompArray;			
        [case(kAAFRGBCompSizes, kAAFRGBPaletteSizes)]
			aafCompSizeArray_t	expCompSizeArray;			
        [case(kAAFRGBPalette)]
			aafDataBuffer_t		expPointer;			
        [case(kAAFCDCIColorSiting)]
			aafColorSiting_t	expColorSiting;			
        [case(kAAFCDCIBlackLevel, kAAFCDCIWhiteLevel, kAAFCDCIColorRange)]
			aafUInt32			expUInt32;			
						
        [default] ;
    } ;

} aafVideoMemOp_t;
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(//)
AD_CPP_QUOTE(typedef struct)
AD_CPP_QUOTE({)
AD_CPP_QUOTE(\	aafVideoFmtOpcode_t opcode;)
AD_CPP_QUOTE(\	union)
AD_CPP_QUOTE(\	{)
AD_CPP_QUOTE(\		aafPixelFormat_t	expPixelFormat;)
AD_CPP_QUOTE(\		aafFrameLayout_t	expFrameLayout;)
AD_CPP_QUOTE(\		aafFieldDom_t		expFieldDom;)
AD_CPP_QUOTE(\		aafRect_t			expRect;)
AD_CPP_QUOTE(\		aafInt32			expInt32;)
AD_CPP_QUOTE(\		aafInt16			expInt16;)
AD_CPP_QUOTE(\		aafUInt32			expUInt32;)
AD_CPP_QUOTE(\		aafRational_t   	expRational;)
AD_CPP_QUOTE(\		aafDataBuffer_t		expPointer;)
AD_CPP_QUOTE(\		aafCompArray_t		expCompArray;)
AD_CPP_QUOTE(\		aafCompSizeArray_t	expCompSizeArray;)
AD_CPP_QUOTE(\		aafColorSiting_t	expColorSiting;)
AD_CPP_QUOTE(\		aafVideoLineMap_t	expLineMap;)
AD_CPP_QUOTE(\		aafBool				expBoolean;)
AD_CPP_QUOTE(\	} operand;)
AD_CPP_QUOTE(} aafVideoMemOp_t;)


AD_CPP_QUOTE(#if 0)
typedef struct _aafAudioMemOp_t
{

    aafAudioFmtOpcode_t     opcode;
    [switch_is(opcode)] union
    {
        [case(kAAFSampleFormat)]
			aafAudioSampleType_t	format;	/* OffsetBinary or SignedMagnitude */
        [case(kAAFSampleSize)]
			aafInt16           		sampleSize;
        [case(kAAFSampleRate)]
			aafRational_t   		sampleRate;
        [case(kAAFNumChannels)]
			aafInt16				numChannels;
        [case(kAAFExpLong)]
			aafInt32				expLong;
        [case(kAAFExpRational)]
			aafRational_t   		expRational;
        [default] ;
    } ;

} aafAudioMemOp_t;
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(//)
AD_CPP_QUOTE(typedef struct)
AD_CPP_QUOTE({)
AD_CPP_QUOTE(\	aafAudioFmtOpcode_t opcode;)
AD_CPP_QUOTE(\	union)
AD_CPP_QUOTE(\	{)
AD_CPP_QUOTE(\	    aafAudioSampleType_t	format;	/* OffsetBinary or SignedMagnitude */)
AD_CPP_QUOTE(\		aafInt16           		sampleSize;)
AD_CPP_QUOTE(\		aafRational_t   		sampleRate;)
AD_CPP_QUOTE(\		aafInt16				numChannels;)
AD_CPP_QUOTE(\		aafInt32				expLong;)
AD_CPP_QUOTE(\		aafRational_t   		expRational;)
AD_CPP_QUOTE(\	} operand;)
AD_CPP_QUOTE(\} aafAudioMemOp_t;)

AD_CPP_QUOTE(/* Typedefs specific to edgecode and timecode */)
typedef enum
{
	kEtNull = 0, 
	kEtKeycode, 
	kEtEdgenum4, 
	kEtEdgenum5,
	kEtHeaderSize = 8
} aafEdgeType_t;

typedef enum
{
	kFtNull = 0, 
	kFt35MM = 1, 
	kFt16MM, 
	kFt8MM, 
	kFt65MM
} aafFilmType_t;

typedef enum
{
    kDirCodeRight = 0, kDirCodeUpperRight, kDirCodeUp, kDirCodeUpperLeft, 
	kDirCodeLeft, kDirCodeLowerLeft, kDirCodeDown, kDirCodeLowerRight
} aafDirectionCode_t;

typedef enum
   {
     kColorSpaceRGB = 0, kColorSpaceYUV, kColorSpaceYIQ, kColorSpaceHSI, 
	 kColorSpaceHSV, kColorSpaceYCrCb, kColorSpaceYDrDb, kColorSpaceCMYK
} aafColorSpace_t;

typedef struct
{
	aafFrameOffset_t   	startFrame;
	aafDropType_t   drop;
	aafUInt16		fps;	/* frames per second */
} aafTimecode_t;

typedef aafUInt8 aafEdgecodeHeader_t[kEtHeaderSize];

typedef struct
{
	aafFrameOffset_t   startFrame;
	aafFilmType_t   filmKind;
	aafEdgeType_t codeFormat;
	aafEdgecodeHeader_t header;
} aafEdgecode_t;

AD_CPP_QUOTE(/*** Types for clips ***/)
typedef struct
{
	aafUID_t        sourceID;
	aafTrackID_t    sourceTrackID;
	aafPosition_t   startTime;
} aafSourceRef_t;


typedef struct
{
	aafLength_t		fadeLength;
	aafFadeType_t	fadeType;
	aafRational_t	fadeEditUnit;
	aafBool			valid;				/* Are the above fields valid? */
} aafDefaultFade_t;	

AD_CPP_QUOTE(\/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Multiple Media Representations Criteria types)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)
//typedef aafInt16(*aafCriteriaProc_t)(AD_AAFTYPES(AAFFile) * file,
//                                     AD_AAFTYPES(AAFObject) * mdes, 
//                                     aafCodecID_t codecID);

typedef enum
{
	kAAFAnyRepresentation = 0,
	kAAFFastestRepresentation,
	kAAFBestFidelityRepresentation,
	kAAFSmallestRepresentation //, Jeff may add this one back.
//	kAAFUseRepresentationProc
} aafCriteriaType_t;

typedef struct
{
	aafCriteriaType_t		type;
//	aafCriteriaProc_t		proc;	
} aafMediaCriteria_t;

AD_CPP_QUOTE(/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Data Types for Search Criteria and Iterators) 
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)

typedef enum
{
	kNoSearch = 0, 
	kByMobID, 
	kByMobKind, 
	kByName, 
	kByClass, 
	kByDatakind,
	kByMediaCrit
} aafSearchTag_t;


AD_CPP_QUOTE(#if 0)
typedef struct _aafSearchCrit_t
{

    aafSearchTag_t     searchTag;
    [switch_is(searchTag)] union
    {
        [case(kByMobID)]
			aafUID_t mobID;		// shouldn't this be a pointer?
        [case(kByMobKind)]
			aafMobKind_t mobKind;
        [case(kByName)]
			aafString_t *name;
        [case(kByClass)]
			aafClassID_t objClass;	// shouldn't this be a pointer?
        [case(kByDatakind)]
			aafUID_t datadef;	// shouldn't this be a pointer?
        [case(kByMediaCrit)]
			aafCriteriaType_t mediaCrit;
        [default] ;
    } ;

} aafSearchCrit_t;
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(//)
AD_CPP_QUOTE(typedef struct)
AD_CPP_QUOTE({)
AD_CPP_QUOTE(\    aafSearchTag_t     searchTag;)
AD_CPP_QUOTE(\    union)
AD_CPP_QUOTE(\    {)
AD_CPP_QUOTE(\        aafUID_t        mobID;		// shouldn't this be a pointer?)
AD_CPP_QUOTE(\        aafMobKind_t    mobKind;)
AD_CPP_QUOTE(\        aafString_t       *name;)
AD_CPP_QUOTE(\        aafClassID_t      objClass;	// shouldn't this be a pointer?)
AD_CPP_QUOTE(\        aafUID_t		 datadef;	// shouldn't this be a pointer?)
AD_CPP_QUOTE(\        aafCriteriaType_t mediaCrit;)
AD_CPP_QUOTE(\    } tags;)
AD_CPP_QUOTE(} aafSearchCrit_t;)



typedef enum
{
	kAAFClassDefinition	    = 1,
	kAAFPropertyDefinition  = 2,
	kAAFTypeDefinition      = 4,
	kAAFDataDefinition      = 8,
	kAAFEffectDefinition    = 16,
	kAAFAllDefinitions      = -1
} aafDefinitionKind_t;

typedef enum
{
	kNoDefSearch = 0, 
	kByDefKind, 
	kByDefName, 
	kByDefClass 
} aafDefinitionCritType_t;

typedef struct
{
	aafDefinitionCritType_t type;
	union 
	{
		aafDefinitionKind_t	defKind;
		aafString_t         *name;
		aafClassID_t        objClass;	// shouldn't this be a pointer?
	} tags;
} aafDefinitionCrit_t;

typedef enum
{
	kNoIdSearch = 0, 
	kByIdProductID, 
	kByIdGeneration, 
	kByIdToolkitVersion, 
} aafIdentificationCritType_t;

typedef struct
{
	aafIdentificationCritType_t type;
	union 
	{
		aafUID_t		    productID;
		aafUID_t            generation;
		aafProductVersion_t toolkitVersion;
	} tags;
} aafIdentificationCrit_t;


AD_CPP_QUOTE(/************************************************************) 
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Data Types for Searching the Class Dictionary) 
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/) 

typedef enum
{
	kAllClasses = 0,   // selects all classes in the given class dictionary.
	kByClassID = 1,    // selects the class with the given class id.
	kByParentClassID,  // selects all classes with the given parent class id. 
	kByPropertyID,     // selects all classes that contain the given property id.
	kByTypeID,         // selects all classes that contain properties with the given type id.
	kByClassName       // selects all classes with the given name
} aafSearchDictionaryTag_t;


AD_CPP_QUOTE(#if 0)
typedef struct _aafSearchDictionaryCrit_t
{

    aafSearchDictionaryTag_t     searchTag;
    [switch_is(searchTag)] union
    {
        [case(kByClassID)]
            aafUID_t    * classID;
        [case(kByParentClassID)]
            aafUID_t    * parentClassID;
        [case(kByPropertyID)]
            aafUID_t	* propertyID;
        [case(kByTypeID)]
            aafUID_t	* typeID;
        [case(kByClassName)]
            aafString_t * name;
        [default] ;
    } ;

} aafSearchDictionaryCrit_t;
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(//)
AD_CPP_QUOTE(typedef struct _aafSearchDictionaryCrit_t)
AD_CPP_QUOTE({)
AD_CPP_QUOTE(\	aafSearchDictionaryTag_t     searchTag;)
AD_CPP_QUOTE(\	union )
AD_CPP_QUOTE(\	{)
AD_CPP_QUOTE(\		aafUID_t    * classID;)
AD_CPP_QUOTE(\		aafUID_t    * parentClassID;)
AD_CPP_QUOTE(\		aafUID_t	* propertyID;)
AD_CPP_QUOTE(\		aafUID_t	* typeID;)
AD_CPP_QUOTE(\		aafString_t * name;)
AD_CPP_QUOTE(\	} tags;)
AD_CPP_QUOTE(} aafSearchDictionaryCrit_t;)



AD_CPP_QUOTE(/**************************/)
AD_CPP_QUOTE(#ifndef STDMETHODCALLTYPE)
AD_CPP_QUOTE(#define STDMETHODCALLTYPE)
AD_CPP_QUOTE(#endif)


AD_TYPES_END

