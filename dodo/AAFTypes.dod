#c/*************************************************\
#c*													*
#c* Advanced Authoring Format						*
#c*													*
#c* Copyright (c) 1998-1999 Avid Technology, Inc.	*
#c*													*
#c\*************************************************/
#startm .this-module 0
AAFTypes\
#endm
AD_TYPES_HEAD

AD_TYPES_BEGIN(B1A2137B, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_CPP_QUOTE(/*)
AD_CPP_QUOTE(\ * Basic types that don't depend on other types.)
AD_CPP_QUOTE(\ */)





AD_CPP_QUOTE(/*)
AD_CPP_QUOTE(\ * May have to add compile-time switches for various)
AD_CPP_QUOTE(\ * machines/compilers.  For now these work on the following platforms:)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *	- NT/intel/VC++)
AD_CPP_QUOTE(\ *	- FreeBSD/intel/GCC.)
AD_CPP_QUOTE(\ *	- Irix/SGI/CC)
AD_CPP_QUOTE(\ *	- MacOS/PPC+68k/CWPro)
AD_CPP_QUOTE(\ */)

typedef long			aafInt32;
typedef short			aafInt16;
typedef signed char		aafInt8;

typedef unsigned long	aafUInt32;
typedef unsigned short	aafUInt16;
typedef unsigned char	aafUInt8;

typedef unsigned char * aafMemPtr_t;

AD_CPP_QUOTE(// All characters and strings are in AAF are unicode.)
AD_CPP_QUOTE(#ifndef _MAC)
AD_CPP_QUOTE(#ifndef _WCHAR_T_DEFINED)
AD_CPP_QUOTE(typedef unsigned short wchar_t;)
AD_CPP_QUOTE(#endif // _WCHAR_T_DEFINED)
AD_CPP_QUOTE(#endif // ndef _MAC)

AD_CPP_QUOTE(#ifdef __MWERKS__)
AD_CPP_QUOTE(#if !__option\(wchar_type\))
AD_CPP_QUOTE(typedef aafUInt16 	aafWChar;)
AD_CPP_QUOTE(typedef aafUInt16 	aafCharacter;)
AD_CPP_QUOTE(#else //!__option\(wchar_type\))
AD_CPP_QUOTE(typedef wchar_t 	aafWChar;)
AD_CPP_QUOTE(typedef wchar_t 	aafCharacter;)
AD_CPP_QUOTE(#endif //!__option\(wchar_type\))
AD_CPP_QUOTE(#else // __MWERKS__)
typedef wchar_t		aafWChar;
typedef wchar_t		aafCharacter;
AD_CPP_QUOTE(#endif // __MWERKS__)

typedef aafInt32		AAFRESULT;


AD_CPP_QUOTE(#ifndef NULL)
AD_CPP_QUOTE(#define NULL \(\(void *\)0L\))
AD_CPP_QUOTE(#endif)

typedef enum _aafBool
{
  AAFFalse = 0,
  AAFTrue = 1
} aafBool;

AD_CPP_QUOTE(#ifndef MAX_NUM_RGBA_COMPS)
AD_CPP_QUOTE(#define MAX_NUM_RGBA_COMPS 8 /* limit on the size of component arrays */)
AD_CPP_QUOTE(#if 0)
typedef enum _aafMAX_NUM_RGBA_COMPS
{
  MAX_NUM_RGBA_COMPS = 8
} aafMAX_NUM_RGBA_COMPS;
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(#endif)


AD_CPP_QUOTE(#if 0)
AD_CPP_QUOTE(// MIDL only defintion for 64 bit integer)
#if (!defined(AAF_INT64_TYPE) && (!defined(MIDL_PASS) || defined(__midl)) && (!defined(_M_IX86) || (defined(_INTEGRAL_MAX_BITS) && _INTEGRAL_MAX_BITS >= 64)))
#define AAF_INT64_TYPE hyper
typedef AAF_INT64_TYPE aafInt64;
#else
#error Using an incompatible midl host compiler!
#endif
AD_CPP_QUOTE(#else)

AD_CPP_QUOTE(#ifdef __MWERKS__)
AD_CPP_QUOTE(#if \(__MWERKS__ >= 0x1100\))
AD_CPP_QUOTE(#define AAF_INT64_NATIVE	1)
AD_CPP_QUOTE(#define AAF_INT64_TYPE		long long)
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(#endif)

AD_CPP_QUOTE(/* SGI Port definitions */)
AD_CPP_QUOTE(#ifdef sgi)
AD_CPP_QUOTE(#if defined\(__LONGLONG\) || defined\(_LONGLONG\))
AD_CPP_QUOTE(#define AAF_INT64_NATIVE	1)
AD_CPP_QUOTE(#define AAF_INT64_TYPE		long long)
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(#endif)

AD_CPP_QUOTE(/* PC Windows 32 Port Definitions */)
AD_CPP_QUOTE(#if defined\(_WIN32\) || defined\(WIN32\))
AD_CPP_QUOTE(#if \(!defined\(_M_IX86\) || \(defined\(_INTEGRAL_MAX_BITS\) && _INTEGRAL_MAX_BITS >= 64\)\))
AD_CPP_QUOTE(#define AAF_INT64_NATIVE 1)
AD_CPP_QUOTE(#define AAF_INT64_TYPE   __int64)
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(#endif)

AD_CPP_QUOTE(/* Default definitions */)
AD_CPP_QUOTE(#ifndef AAF_INT64_TYPE)
AD_CPP_QUOTE(#undef AAF_INT64_NATIVE)
AD_CPP_QUOTE(#define AAF_INT64_NATIVE 0)
AD_CPP_QUOTE(/* Treated as an integer\, defined as array of 4 shorts if needed */)
AD_CPP_QUOTE(typedef struct _aafInt64_t)
AD_CPP_QUOTE({)
AD_CPP_QUOTE(\	aafUInt16	words[4];)
AD_CPP_QUOTE(} aafInt64_t;)
AD_CPP_QUOTE(#define AAF_INT64_TYPE aafInt64_t)
AD_CPP_QUOTE(#endif)

AD_CPP_QUOTE(// Define the 64 bit integer type.)
AD_CPP_QUOTE(typedef AAF_INT64_TYPE aafInt64;)

AD_CPP_QUOTE(// Add compatibility with 32/64 conversion routines.)
AD_CPP_QUOTE(#undef PORT_USE_NATIVE64)
AD_CPP_QUOTE(#undef PORTKEY_INT64_TYPE)
AD_CPP_QUOTE(#if AAF_INT64_NATIVE)
AD_CPP_QUOTE(#define PORT_USE_NATIVE64 1)
AD_CPP_QUOTE(#define PORTKEY_INT64_TYPE AAF_INT64_TYPE)
AD_CPP_QUOTE(#else)
AD_CPP_QUOTE(#define PORT_USE_NATIVE64 0)
AD_CPP_QUOTE(#define PORTKEY_INT64_TYPE AAF_INT64_TYPE)
AD_CPP_QUOTE(#endif)

AD_CPP_QUOTE(#endif)


AD_CPP_QUOTE(#if 0)
typedef [string] aafCharacter * aafString_t;
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(typedef aafCharacter * aafString_t;)

AD_CPP_QUOTE(/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * AAF types that map to an integral type or pointer to)
AD_CPP_QUOTE(\ *  integeral type.)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * These each map to an existing integral type or pointer.  Note)
AD_CPP_QUOTE(\ * that aafClassID_t is a structure used to hold storage for a)
AD_CPP_QUOTE(\ * classID\, but most functions take an aafClassIDPtr_t reference.)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)

AD_CPP_QUOTE(/*** Types for all components***/)
typedef aafInt64   		aafLength_t;

AD_CPP_QUOTE(/*** Types for mob slots***/)
typedef aafInt64  		aafPosition_t;
typedef aafInt64		aafFrameOffset_t;
typedef aafInt64		aafFrameLength_t;
typedef aafUInt32   	aafSlotID_t;  

typedef aafInt32   		aafNumSlots_t;
typedef struct _aafUID_t   aafClassID_t;
typedef aafUInt8    	*aafDataValue_t;

// Used by all api methods that need to access an array of bytes.
typedef aafUInt8    	*aafDataBuffer_t;


AD_CPP_QUOTE(\/*** Types for operation groups ***/)
typedef struct _aafUID_t   aafArgIDType_t;
	
AD_CPP_QUOTE(\/*** Types for plugins ***/)
typedef struct _aafUID_t	aafHardwarePlatform_t;
typedef struct _aafUID_t	aafEngine_t;
typedef struct _aafUID_t	aafPluginAPI_t;
typedef struct _aafUID_t	aafCodecID_t;

AD_CPP_QUOTE(/* typedefs for image processing */)
typedef aafUInt8 	    aafCompSizeArray_t[MAX_NUM_RGBA_COMPS];
typedef aafInt8 	    aafCompArray_t[MAX_NUM_RGBA_COMPS];
typedef aafInt32 		aafVideoLineMap_t[2];
typedef aafInt32   		aafJPEGTableID_t; /* for TIFF objects */

AD_CPP_QUOTE(/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Enumerated AAFI types.)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)

typedef enum _aafFileRev_t
{
  kAAFRev1 = 0
} aafFileRev_t;

typedef enum _aafMediaOpenMode_t
{
	kMediaOpenReadOnly = 0, 
	kMediaOpenAppend = 1
} aafMediaOpenMode_t;
	
typedef enum _aafFieldDom_t
{
	kDominantField1 = 0, 
	kDominantField2 = 1, 
	kNoDominant = 2
} aafFieldDom_t;

typedef enum _aafFieldTop_t
{
	kTopField1 = 0, 
	kTopField2 = 1, 
	kTopFieldNone = 2
} aafFieldTop_t;

typedef enum _aafAlphaTransparency_t
{
	kMinValueTransparent = 0,
	kMaxValueTransparent = 1
} aafAlphaTransparency_t;

typedef enum _aafPixelFormat_t
{
	kAAFPixNone = 0, 
	kAAFPixRGBA = 1, 
	kAAFPixYUV = 2
} aafPixelFormat_t;

AD_CPP_QUOTE(#if 0)
typedef enum _aafJPEGcomponent_t
{
	kJcLuminance = 0, 
	kJcChrominance = 1, 
	kJcLuminanceFP16 = 2, 
	kJcChrominanceFP16 = 3
} aafJPEGcomponent_t;
AD_CPP_QUOTE(#endif)

AD_CPP_QUOTE(typedef enum _aafJPEGcomponent_t)
AD_CPP_QUOTE({)
AD_CPP_QUOTE(	kJcLuminance = 0\,) 
AD_CPP_QUOTE(	kJcChrominance = 1)
AD_CPP_QUOTE(#if ! STANDARD_JPEG_Q)
AD_CPP_QUOTE(	\, kJcLuminanceFP16 = 2\,) 
AD_CPP_QUOTE(	kJcChrominanceFP16 = 3)
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(} aafJPEGcomponent_t;)

typedef enum _aafCompressEnable_t
{
	kSDKCompressionEnable = 0, 
	kSDKCompressionDisable = 1
} aafCompressEnable_t;

typedef enum _aafFileFormat_t
{
	kAAFiMedia = 0, 
	kForeignMedia = 1
} aafFileFormat_t;

typedef enum _aafDropType_t
{
	kTcNonDrop = 0, 
	kTcDrop = 1
} aafDropType_t;

typedef enum _aafFrameLayout_t
{
	kFullFrame = 0, 
	kSeparateFields = 1, 
	kOneField = 2, 
	kMixedFields = 3
} aafFrameLayout_t;
	
typedef enum _aafColorSiting_t
{
	kCoSiting = 0, 
	kAveraging = 1, 
	kThreeTap = 2
} aafColorSiting_t;
	
typedef enum _aafPropertyOpt_t
{
	kPropRequired = 0,
	kPropOptional = 1
} aafPropertyOpt_t;

typedef enum _AAFDataDefinitionMatch_t
{
	kExactMatch = 0,
	kConvertTo = 1,
	kConvertFrom = 2
} AAFDataDefinitionMatch_t;
	  
typedef enum _aafAppendOption_t
{
	kAAFAppend = 0,
	kAAFForceOverwrite = 1
} aafAppendOption_t;

typedef enum _aafReferenceType_t
{
	kRefLimitMinimum = 0,
	kRefLimitMaximum = 1,
	kRefMinimum = 2,
	kRefMaximum = 3,
	kRefEnumvalue = 4
} aafReferenceType_t;

typedef enum _aafSwapNeeded_t
{
	kAAFSwapIfNeeded = 0,
	kAAFNeverSwap = 1
} aafSwapNeeded_t;

typedef enum _aafTimecodeSourceType_t
{
	kAAFTimecodeLTC = 0,
	kAAFTimecodeVITC = 1
} aafTimecodeSourceType_t;

AD_CPP_QUOTE(/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Mob specific data types)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)
typedef enum _aafMobKind_t
{
	kCompMob = 0, 
	kMasterMob = 1, 
	kFileMob = 2, 
	kTapeMob = 3, 
	kFilmMob = 4,
	kPrimaryMob = 5, 
	kAllMob = 6
} aafMobKind_t;

typedef enum _aafOperationChoice_t
{
  kFindNull = 0,
  kFindIncoming = 1,
  kFindOutgoing = 2,
  kFindRender = 3,
  kFindOperationSrc1 = 4,
  kFindOperationSrc2 = 5,
  kFindOperationSrc3 = 6,
  kFindOperationSrc4 = 7, 
  kFindOperationSrc5 = 8,
  kFindOperationSrc6 = 9,
  kFindOperationSrc7 = 10,
  kFindOperationSrc8 = 11
} aafOperationChoice_t;

typedef enum _aafDepend_t
{
	kNoFollowDepend = 0, 
	kFollowDepend = 1
} aafDepend_t;

typedef enum _aafIncMedia_t
{
	kNoIncludeMedia = 0,
	kIncludeMedia = 1
} aafIncMedia_t;

AD_CPP_QUOTE(/* aafIndexType_t: describes the types of HEAD indices */)
typedef enum _aafIndexType_t
{
	kCompMobIndex = 0,
	kSourceMobIndex = 1,
	kMediaIndex = 2,
	kPrimaryMobIndex = 3
} aafIndexType_t;

AD_CPP_QUOTE(/* aafFadeType_t: describes values for SCLP fadein and fadeout types  */)
typedef enum _aafFadeType_t
{
	kFadeNone = 0,
	kFadeLinearAmp = 1,
	kFadeLinearPower = 2
} aafFadeType_t;

typedef enum _aafAudioSampleType_t
{
	kAAFOffsetBinary = 0,
	kAAFSignedMagnitude = 1
} aafAudioSampleType_t;
	
typedef enum _aafTapeCaseType_t
{
	kTapeCaseNull = 0,
	kThreeFourthInchVideoTape = 1,
    kVHSVideoTape = 2,
	k8mmVideoTape = 3,
	kBetacamVideoTape = 4,
	kCompactCassette = 5,
	kDATCartridge = 6,
	kNagraAudioTape = 7
} aafTapeCaseType_t;

typedef enum _aafVideoSignalType_t
{
	kVideoSignalNull = 0,
	kNTSCSignal = 1,
	kPALSignal = 2,
	kSECAMSignal = 3
} aafVideoSignalType_t;

typedef enum _aafTapeFormatType_t
{
	kTapeFormatNull = 0,
	kBetacamFormat = 1,
	kBetacamSPFormat = 2,
	kVHSFormat = 3,
	kSVHSFormat = 4,
	k8mmFormat = 5,
	kHi8Format = 6
} aafTapeFormatType_t;

typedef enum _aafAttributeKind_t
{
	kAAFNullAttribute = 0,
	kAAFIntegerAttribute = 1,
	kAAFStringAttribute = 2,
	kAAFObjectAttribute = 3
} aafAttributeKind_t;
	
typedef enum _aafPulldownKind_t
{
	kAAFTwoThreePD = 0,
	kAAFPALPD = 1,
	kAAFOneToOneNTSC = 2,
	kAAFOneToOnePAL = 3
} aafPulldownKind_t;

typedef aafInt16	aafPhaseFrame_t;

typedef enum _aafPulldownDir_t
{
	kAAFTapeToFilmSpeed = 0,
	kAAFFilmToTapeSpeed = 1
}	aafPulldownDir_t;

typedef struct _aafMobComment_t
{
	aafString_t category;
	aafString_t comment;
} aafMobComment_t;



AD_CPP_QUOTE(/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Operation Group Types)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)	  
typedef enum _aafInterpKind_t
{
	kConstInterp = 1, 
	kLinearInterp = 2
} aafInterpKind_t;

typedef enum _aafEditHint_t
{
    kNoEditHint = 0, 
	kProportional = 1, 
	kRelativeLeft = 2, 
	kRelativeRight = 3, 
	kRelativeFixed = 4
} aafEditHint_t;

typedef enum _aafProductReleaseType_t
{
	kVersionUnknown = 0, 
	kVersionReleased = 1, 
	kVersionDebug = 2,
	kVersionPatched = 3, 
	kVersionBeta = 4, 
	kVersionPrivateBuild = 5
} aafProductReleaseType_t;

AD_CPP_QUOTE(\/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Structured AAFI types.)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)
typedef struct _aafVersionType_t
{
	aafInt8            major;
	aafInt8            minor;
} aafVersionType_t;

typedef struct _aafProductVersion_t
{
	aafUInt16				major;
	aafUInt16				minor;
	aafUInt16				tertiary;
	aafUInt16				patchLevel;
	aafProductReleaseType_t	type;
} aafProductVersion_t;

typedef struct _aafUID_t
{
//	aafUInt32           value[4]; // binary compatibility with GUID/CLSID and IID structures.
    aafUInt32 Data1;
    aafUInt16 Data2;
    aafUInt16 Data3;
    aafUInt8  Data4[8];
} aafUID_t;

typedef struct _aafProductIdentification_t
{
	aafCharacter			*companyName;
	aafCharacter			*productName;
	aafCharacter			*productVersionString;
	aafUID_t				productID;
	aafCharacter			*platform;
	aafProductVersion_t	productVersion;
} aafProductIdentification_t;

AD_CPP_QUOTE(extern const aafProductVersion_t AAFReferenceImplementationVersion;)

typedef struct _aafTimeStamp_t
{
	// The TimeVal field format is the same as the Timestamp field in
	// a GUID.  In short, it is represented by Universal Coordinated
	// Time (UTC) in a 60-bit number as a count of 100-nanosecond
	// intervals since 00:00:00.00, 15 October 1582 (the date of
	// Gregorian reform to the Christian calendar).  See
	// draft-leach-uuids-guids-01.txt for a further discussion.
	aafInt64         	TimeVal;
	aafInt8            	IsGMT;
} aafTimeStamp_t;





typedef struct _aafRational_t
{
	aafInt32           numerator;
	aafInt32           denominator;
} aafRational_t;

typedef struct _aafRect_t
{
	aafInt32           xOffset;
	aafInt32           yOffset;
	aafInt32           xSize;
	aafInt32           ySize;
} aafRect_t;

typedef struct _aafmMultiXfer_t
{
	aafUID_t *			mediaKind;		/* IN -- */
	aafInt16			subTrackNum;	/* IN - The physical output channel */
	aafUInt32           numSamples;		/* IN -- */
	aafUInt32          	buflen;			/* IN -- */
	aafDataBuffer_t		buffer;			/* IN/OUT -- */
} aafmMultiXfer_t;

typedef struct _aafmMultiResult_t
{
	aafUInt32          	bytesXfered;	/* OUT -- */
	aafUInt32			samplesXfered;	/* OUT */
} aafmMultiResult_t;

typedef struct _aafmMultiCreate_t
{
	aafUID_t *			mediaKind;		/* IN -- */
	aafInt16			subTrackNum;	/* IN - The physical output channel */
	aafInt32           	slotID;		/* IN -- */
	aafRational_t		sampleRate;
} aafmMultiCreate_t;

AD_CPP_QUOTE(/* Typedefs specific to edgecode and timecode */)
typedef enum _aafEdgeType_t
{
	kEtNull = 0, 
	kEtKeycode = 1, 
	kEtEdgenum4 = 2, 
	kEtEdgenum5 = 3,
	kEtHeaderSize = 8
} aafEdgeType_t;

typedef enum _aafFilmType_t
{
	kFtNull = 0, 
	kFt35MM = 1, 
	kFt16MM = 2, 
	kFt8MM = 3, 
	kFt65MM = 4
} aafFilmType_t;

typedef enum _aafDirectionCode_t
{
    kDirCodeRight = 0, 
	kDirCodeUpperRight = 1, 
	kDirCodeUp = 2, 
	kDirCodeUpperLeft = 3, 
	kDirCodeLeft = 4, 
	kDirCodeLowerLeft = 5, 
	kDirCodeDown = 6, 
	kDirCodeLowerRight = 7
} aafDirectionCode_t;

typedef enum _aafColorSpace_t
{
     kColorSpaceRGB = 0, 
	 kColorSpaceYUV = 1, 
	 kColorSpaceYIQ = 2, 
	 kColorSpaceHSI = 3, 
	 kColorSpaceHSV = 4, 
	 kColorSpaceYCrCb = 5, 
	 kColorSpaceYDrDb = 6, 
	 kColorSpaceCMYK = 7
} aafColorSpace_t;

typedef struct _aafTimecode_t
{
	aafFrameOffset_t   	startFrame;
	aafDropType_t   drop;
	aafUInt16		fps;	/* frames per second */
} aafTimecode_t;

typedef aafUInt8 aafEdgecodeHeader_t[kEtHeaderSize];

typedef struct _aafEdgecode_t
{
	aafFrameOffset_t   startFrame;
	aafFilmType_t   filmKind;
	aafEdgeType_t codeFormat;
	aafEdgecodeHeader_t header;
} aafEdgecode_t;

AD_CPP_QUOTE(/*** Types for clips ***/)
typedef struct _aafSourceRef_t
{
	aafUID_t        sourceID;
	aafSlotID_t    sourceSlotID;
	aafPosition_t   startTime;
} aafSourceRef_t;


typedef struct _aafDefaultFade_t
{
	aafLength_t		fadeLength;
	aafFadeType_t	fadeType;
	aafRational_t	fadeEditUnit;
	aafBool			valid;				/* Are the above fields valid? */
} aafDefaultFade_t;	

AD_CPP_QUOTE(\/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Multiple Media Representations Criteria types)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)
//typedef aafInt16(*aafCriteriaProc_t)(AD_AAFTYPES(AAFFile) * file,
//                                     AD_AAFTYPES(AAFObject) * mdes, 
//                                     aafCodecID_t codecID);

typedef enum _aafCriteriaType_t
{
	kAAFAnyRepresentation = 0,
	kAAFFastestRepresentation = 1,
	kAAFBestFidelityRepresentation = 2,
	kAAFSmallestRepresentation = 3 //, Jeff may add this one back.
//	kAAFUseRepresentationProc = 4
} aafCriteriaType_t;

typedef struct _aafMediaCriteria_t
{
	aafCriteriaType_t		type;
//	aafCriteriaProc_t		proc;	
} aafMediaCriteria_t;

AD_CPP_QUOTE(/************************************************************)
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Data Types for Search Criteria and Iterators) 
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/)

typedef enum _aafSearchTag_t
{
	kNoSearch = 0, 
	kByMobID = 1, 
	kByMobKind = 2, 
	kByName = 3, 
	kByClass = 4, 
	kByDataDef = 5,
	kByMediaCrit = 6
} aafSearchTag_t;


AD_CPP_QUOTE(#if 0)
typedef struct _aafSearchCrit_t
{

    aafSearchTag_t     searchTag;
    [switch_is(searchTag)] union
    {
        [case(kByMobID)]
			aafUID_t mobID;		// shouldn't this be a pointer?
        [case(kByMobKind)]
			aafMobKind_t mobKind;
        [case(kByName)]
			aafString_t name;
        [case(kByClass)]
			aafClassID_t objClass;	// shouldn't this be a pointer?
        [case(kByDataDef)]
			aafUID_t datadef;	// shouldn't this be a pointer?
        [case(kByMediaCrit)]
			aafCriteriaType_t mediaCrit;
        [default] ;
    } ;

} aafSearchCrit_t;
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(//)
AD_CPP_QUOTE(typedef struct _aafSearchCrit_t)
AD_CPP_QUOTE({)
AD_CPP_QUOTE(\    aafSearchTag_t     searchTag;)
AD_CPP_QUOTE(\    union)
AD_CPP_QUOTE(\    {)
AD_CPP_QUOTE(\        aafUID_t        mobID;		// shouldn't this be a pointer?)
AD_CPP_QUOTE(\        aafMobKind_t    mobKind;)
AD_CPP_QUOTE(\        aafString_t       name;)
AD_CPP_QUOTE(\        aafClassID_t      objClass;	// shouldn't this be a pointer?)
AD_CPP_QUOTE(\        aafUID_t		 datadef;	// shouldn't this be a pointer?)
AD_CPP_QUOTE(\        aafCriteriaType_t mediaCrit;)
AD_CPP_QUOTE(\    } tags;)
AD_CPP_QUOTE(} aafSearchCrit_t;)



typedef enum _aafDefinitionKind_t
{
	kAAFClassDefinition	    = 1,
	kAAFPropertyDefinition  = 2,
	kAAFTypeDefinition      = 4,
	kAAFDataDefinition      = 8,
	kAAFOperationDefinition    = 16,
	kAAFAllDefinitions      = -1
} aafDefinitionKind_t;

typedef enum _aafDefinitionCritType_t
{
	kNoDefSearch = 0, 
	kByDefKind = 1, 
	kByDefName = 2, 
	kByDefClass  = 3
} aafDefinitionCritType_t;

typedef struct _aafDefinitionCrit_t
{
	aafDefinitionCritType_t type;
	union 
	{
		aafDefinitionKind_t	defKind;
		aafString_t         name;
		aafClassID_t        objClass;	// shouldn't this be a pointer?
	} tags;
} aafDefinitionCrit_t;

typedef enum _aafIdentificationCritType_t
{
	kNoIdSearch = 0, 
	kByIdProductID = 1, 
	kByIdGeneration = 2, 
	kByIdRefImplVersion = 3
} aafIdentificationCritType_t;

typedef struct _aafIdentificationCrit_t
{
	aafIdentificationCritType_t type;
	union 
	{
		aafUID_t		    productID;
		aafUID_t            generation;
		aafProductVersion_t referenceImplementationVersion;
	} tags;
} aafIdentificationCrit_t;


AD_CPP_QUOTE(/************************************************************) 
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ * Data Types for Searching the Class Dictionary) 
AD_CPP_QUOTE(\ *)
AD_CPP_QUOTE(\ *************************************************************/) 

typedef enum _aafSearchDictionaryTag_t
{
	kAllClasses = 0,       // selects all classes in the given class dictionary.
	kByClassID = 1,	       // selects the class with the given class id.
	kByParentClassID = 2,  // selects all classes with the given parent class id. 
	kByPropertyID = 3,     // selects all classes that contain the given property id.
	kByTypeID = 4,         // selects all classes that contain properties with the given type id.
	kByClassName = 5       // selects all classes with the given name
} aafSearchDictionaryTag_t;


//********
//
// Enum indicating data "Endian-ness"
// 
typedef enum _eAAFByteOrder_t
{
  //
  // Little Endian (e.g. Intel byte order)
  //
  kByteOrderLittle	= 0,

  //
  // Big Endian (e.g. Mac or Sparc byte order)
  //
  kByteOrderBig	= 1

} eAAFByteOrder_t;


AD_CPP_QUOTE(#if 0)
typedef struct _aafSearchDictionaryCrit_t
{

    aafSearchDictionaryTag_t     searchTag;
    [switch_is(searchTag)] union
    {
        [case(kByClassID)]
            aafUID_t    * classID;
        [case(kByParentClassID)]
            aafUID_t    * parentClassID;
        [case(kByPropertyID)]
            aafUID_t	* propertyID;
        [case(kByTypeID)]
            aafUID_t	* typeID;
        [case(kByClassName)]
            aafString_t   name;
        [default] ;
    } ;

} aafSearchDictionaryCrit_t;


//********
//
// Enum indicating general category of stored (property) data
//
//
AD_CPP_QUOTE(#endif)
AD_CPP_QUOTE(//)
AD_CPP_QUOTE(typedef struct _aafSearchDictionaryCrit_t)
AD_CPP_QUOTE({)
AD_CPP_QUOTE(\	aafSearchDictionaryTag_t     searchTag;)
AD_CPP_QUOTE(\	union )
AD_CPP_QUOTE(\	{)
AD_CPP_QUOTE(\		aafUID_t    * classID;)
AD_CPP_QUOTE(\		aafUID_t    * parentClassID;)
AD_CPP_QUOTE(\		aafUID_t	* propertyID;)
AD_CPP_QUOTE(\		aafUID_t	* typeID;)
AD_CPP_QUOTE(\		aafString_t   name;)
AD_CPP_QUOTE(\	} tags;)
AD_CPP_QUOTE(} aafSearchDictionaryCrit_t;)



typedef enum _eAAFTypeCategory_t
{
  kAAFTypeCatUnknown       = 0,  // can only occur in damaged files
  kAAFTypeCatInt           = 1,  // any integral type
  kAAFTypeCatStrongObjRef  = 2,  // strong object reference
  kAAFTypeCatWeakObjRef    = 3,  // weak object reference
  kAAFTypeCatRename        = 4,  // renamed type
  kAAFTypeCatEnum          = 5,  // enumerated type
  kAAFTypeCatFixedArray    = 6,  // fixed-size array
  kAAFTypeCatVariableArray = 7,  // variably-sized array
  kAAFTypeCatRecord        = 8,  // a structured type
  kAAFTypeCatStream        = 9,  // potentially huge amount of data
  kAAFTypeCatString        = 10, // null-terminated variably-sized
								 // array
  kAAFTypeCatExtEnum       = 11  // extendible enumerated type
} eAAFTypeCategory_t;




AD_CPP_QUOTE(/**************************/)
AD_CPP_QUOTE(#ifndef STDMETHODCALLTYPE)
AD_CPP_QUOTE(\  #ifndef _MSC_VER)
AD_CPP_QUOTE(\    #ifdef __SC__)
AD_CPP_QUOTE(\      #define STDMETHODCALLTYPE _cdecl)
AD_CPP_QUOTE(\    #else)
AD_CPP_QUOTE(\      #define STDMETHODCALLTYPE)
AD_CPP_QUOTE(\    #endif)
AD_CPP_QUOTE(\  #else)
AD_CPP_QUOTE(\    #define STDMETHODCALLTYPE __stdcall)
AD_CPP_QUOTE(\  #endif)
AD_CPP_QUOTE(#endif)


AD_TYPES_END



