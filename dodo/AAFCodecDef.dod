#startm .this-module 0
AAFCodecDef\
#endm
#c
#startm .parent-module 0
AAFDefObject\
#endm
#c
AD_HEAD
AD_IDL(//
// This interface is used with an object representing a particular kind of essence
// codec\, which may be implemented by one or more AAFPluginDescriptors.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)

AD_FORWARD_DECLARATION(AAFClassDef)
AD_FORWARD_DECLARATION(AAFDataDef)
AD_FORWARD_DECLARATION(EnumAAFCodecFlavours)

/***********************************************\
*												*
* Advanced Authoring Format						*
*												*
* Copyright (c) 1998-1999 Avid Technology, Inc. *
*												*
\***********************************************/

AD_CLASS_UUID(AD1BB855, DBB2, 11d2, 80, 9C, 00, 60, 08, 14, 3E, 6F)

AD_DEFAULT_UUID(AD1BB856, DBB2, 11d2, 80, 9C, 00, 60, 08, 14, 3E, 6F)
AD_XCLASS_BEGIN(Concrete, StoredObject)

AD_XMETHOD2(IsEssenceKindSupported,
			[in\,ref],
			  objPass,
			  aafUID_t*,
			  pEssenceKind,
			  The essence kind,
			[out\,retval],
			  objPass,
			  aafBool*,
			  pIsSupported,
			  Is this type supported,
			Returns AAFTrue if the given codec support transfers to essence
  // of the given essence kind.
  // 
  // Succeeds if all of the following are true:
  // - the pEssenceKind pointer is valid.
  // - the pIsSupported pointer is valid.
  // 
  // If this method fails nothing will be written to *pIsSupported.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - either pEssenceKind or pIsSupported is null.)
 
 AD_XMETHOD1(AppendEssenceKind,
			[in],
		    objPass,
			aafUID_t*,
			pEssenceKind,
			The essence kind,
			Appends the given essence kind to those supported by the codec.  This is dependant upon
  // the format\, not an incomplete implementation.
  // 
  // Succeeds if all of the following are true:
  // - the pMob pointer is valid.
  // - the given mob is not already part of this collection.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pEssenceKind is null.
  //
  // AAFRESULT_DUPLICATE_ESSENCE_KIND
  //   - the given essenceKind is already contained.)



AD_XMETHOD1(AreThereFlavours,
			[out\,retval],
			  objPass,
			  aafBool *,
			  pResult,
			  True if there are flavours of this codec,
			  Find out whether its worth iterating over flavours
  // flavours are used when a single codec can support multiple formats.  An
  // Example would be a codec which would accept a \"resolution ID\" for a particular
  // manufacturer and set up all of the parameters.  When a new resolution ID is released\,
  // then a new codec plugin would give users the ability to use the new resolutions
  // without upgrading the application.
  //
  // Succeeds if all of the following are true:
  // - the pResult pointer is valid.
  // 
  // If this method fails no state will be changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - if Result is null.)


AD_XMETHOD1(GetFileDescriptorClass,
			[out],
			objOut,
			AAFClassDef,
			ppClass,
			Returned file descriptor class object,
			Places the file descriptor class object associated with this codec into the
  // *ppClass argument.  If none exists yet\, NULL is placed into the
  // *ppClass argument.
  //
  // The returned class object\, if it exists\, is
  // AddRef\(\)ed before it is returned.
  //
  // Succeeds if all of the following are true:
  // - the ppClass pointer is valid.
  // - A valid file descriptor class exists.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - ppClass is null.)


AD_XMETHOD1(SetFileDescriptorClass,
			[in],
			objIn,
			AAFClassDef,
			pClass,
			File descriptor class object,
			Sets the file descriptor class associated with this codec to be the given one.
  //
  // Succeeds if all of the following are true:
  // - the pClass pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pClass is null.)


AD_XMETHOD1(EnumCodecFlavours,
			[out\,retval],
			  objOut,
			  EnumAAFCodecFlavours,
			  ppEnum,
			  Codec flavour Enumeration,
			Places an enumerator for codec flavour into
  // the *ppEnum argument.  The returned enumerator is AddRef\(\)ed
  // before it is returned.
  // 
  // Flavours are used when a single codec can support multiple formats.  An
  // Example would be a codec which would accept a \"resolution ID\" for a particular
  // manufacturer and set up all of the parameters.  When a new resolution ID is released\,
  // then a new codec plugin would give users the ability to use the new resolutions
  // without upgrading the application.
  //
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  // 
  // If this method fails nothing will be written to *ppEnum.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - if ppEnum is null.)
  
AD_XCLASS_END(Concrete, StoredObject)
