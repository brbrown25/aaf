#c *********************************************************************
#c
#c $Id: AAFRIFFChunk.dod,v 1.2 2006/11/08 16:08:43 bmdurksen Exp $ $Name:  $
#c
#c The contents of this file are subject to the AAF SDK Public
#c Source License Agreement (the "License"); You may not use this file
#c except in compliance with the License.  The License is available in
#c AAFSDKPSL.TXT, or you may obtain a copy of the License from the AAF
#c Association or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.
#c
#c The Original Code of this file is Copyright 1998-2004, Licensor of the
#c AAF Association.
#c
#c The Initial Developer of the Original Code of this file and the
#c Licensor of the AAF Association is Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFRIFFChunk\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
#c
#c #import ./AAFObject.exp
AD_HEAD
AD_IDL(///
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - Insufficient system memory is available to perform the
///     operation.
///
/// AAFRESULT_NOT_INITIALIZED
///   - This object has not yet had Initialize\(\) called on it.
///)


AD_CLASS_UUID(b41d3fee, ed70, 401b, a8, fd, 93, a1, 35, 02, a5, 5e)

AD_DEFAULT_UUID(49b6de18, f562, 434e, bf, ab, a4, 6d, 14, 4e, f2, 2a)

AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD1(Initialize,
					[in], 
					objPass,
					aafUInt32, 
					chunkID, 
					ChunkID value,
			Initializes a newly allocated\, empty
  /// IAAFRIFFChunk-supporting object. The data content is initially
  /// empty.
  ///
  /// This method must be called after allocation\, and before any other
  /// method can be called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_ALREADY_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.)


AD_XMETHOD1(SetChunkID,
                   [in],
                        objPass,
                        aafUInt32,
                        chunkID,
                        ChunkID to set,
                        Sets the ChunkID property.
                        
  ///
  /// Succeeds if all of the following are true:
  /// - This object has already been had Initialize\(\) called on it.
  ///
  /// If this method fails\, the ChunkID property will not be
  /// changed.
  ///
  /// This method will return the following codes:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\))

AD_XMETHOD1(GetChunkID,
                        [out],
                                objPass,
                                aafUInt32 *,
                                pChunkID,
                                Retrieved ChunkID,
                        Gets the ChunkID property.
  ///
  ///
  /// Succeeds if all of the following are true:
  /// - pChunkID is a valid pointer
  ///
  /// If this method fails\, pChunkID will not be changed.
  ///
  /// This method will return the following codes:
  ///
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pChunkID is NULL.)


AD_METHOD3(Read,
[in],aafUInt32, bytes, read this many bytes,
[out\\\, size_is\\\(bytes\\\)\\\, length_is\\\(*bytesRead\\\)],aafDataBuffer_t,buffer, buffer to receive chunk data,
[out\\\,ref],aafUInt32 *,pBytesRead,,
Reads data from this RIFFChunk at the current position. Advances the position \
by the number of bytes read.)


AD_METHOD3(Write,
[in],aafUInt32, bytes, write this many bytes,
[out\\\, size_is\\\(bytes\\\)],aafDataBuffer_t,buffer, chunk data to write,
[out\\\,ref],aafUInt32 *,pBytesWritten, actual number of bytes written,
Write data to this RIFFChunk at the current position. Advances the position
/// by the number of bytes written. Any data beyond the new position is lost; 
///that is\\\, the buffer is truncated.)


AD_METHOD1(SetPosition,
[in], aafPosition_t, offset, offset from beginning of the RIFFChunk data,
Seeks to absolute position within the RIFFChunk data. The next Read or Write
/// call will operate from the given position.)


AD_METHOD1(GetPosition,
[out], aafPosition_t*, pOffset, 
current offset from beginning of the RIFFChunk data,
Gets the current position within the RIFFChunk data. This is the position at
///which the next Read or Write call will operate.)


AD_METHOD1(GetLength,
[out], aafLength_t *, pLength, length of the RIFFChunk data,
Returns the total size of the RIFFChunk data\\\, in bytes.)


AD_XCLASS_END(Concrete, StoredObject)
