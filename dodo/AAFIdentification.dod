#startm .this-module 0
AAFIdentification\
#endm
#c
#startm .parent-module 0
AAFObject\
#endm
#c
#import ./AAFObject.exp
AD_HEAD
AD_IDL(//
// The IAAFIdentification interface provides information about an
// applications that either created or modified the AAF file.
//
// If a file was opened for modification by many applications
// in its lifetime\, then there will be multiple Identification objects.
// These are kept in an ordered array\, with the first entry being the file
// creator\, and the last entry being the last application to modify the file.
//
// The identification object is useful for technical support when dealing with
// broken AAF files\, as it tells which applications \(and versions\) have touched
// the file.   If a file has been modified by multiple applications\, then the
// date and productID fields can be used to tell which changes to the
// file were made by a particular application.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)
AD_CLASS_UUID(B1A2137F, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A2137E, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_METHOD0(Initialize,
		   Initializes a newly allocated\, empty IAAFIdentification-supporting
  // object.  This method must be called after allocation\, and before
  // any other method can be called.
  //
  // Succeeds if:
  // - Initialize\(\) has not yet been called on this object.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_ALREADY_INITIALIZED
  //   - Initialize\(\) has already been called on this object.)


AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(CompanyName,
     the Company Name string property.)


AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(ProductName,
     the Product Name string property.)


AD_STD_METHOD_STRING_MULTI_SET_GET_SIZE(ProductVersionString,
     the Product Version string property.)


AD_XMETHOD1(GetProductVersion,
			[out],
			objPass,
			aafProductVersion_t *,
			pVersion,
			The Product Version,
			Gets the Product Version property associated with this
  // identification object and places it into *pVersion.
  // 
  // NOTE! Stub only.   Implementation not yet added.
  //
  // Succeeds if all of the following are true:
  // - the pVersion pointer is valid.
  // 
  // If this method fails\, nothing will be written to *pVersion.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pVersion arg is NULL.)


AD_XMETHOD1(SetProductVersion,
			[in],
			objPass,
			aafProductVersion_t *,
			pVersion,
			The Product Version,
			Set the Product Version property to the value specified in
  // pVersion.  A copy is made of the data so the caller retains
  // ownership of the *pVersion struct and is responsible for
  // de-allocating it.
  // 
  // NOTE! Stub only.   Implementation not yet added.
  //
  // Succeeds if all of the following are true:
  // - the pVersion pointer is valid.
  // 
  // If this method fails the Product Version property will not be
  // changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pVersion arg is NULL.)


AD_XMETHOD1(GetProductID,
			[out],
			objPass,
			aafUID_t *,
			pProductID,
			The Product ID,
			Obtains the Product ID\, which is the identification number
  // assigned to the application and vendor of the application which
  // attached this object to the AAF file.  This ID is written into
  // the caller-allocated aafUID_t specified by the pProductID
  // argument.
  // 
  // NOTE! Stub only.   Implementation not yet added.
  //
  // Succeeds if all of the following are true:
  // - the pProductID pointer is valid.
  // 
  // If this method fails nothing will be written to *pProductID.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pProductID arg is NULL.)


AD_XMETHOD1(SetProductID,
			[in],
			objPass,
			aafUID_t *,
			pProductID,
			The Product ID,
			Set the Product ID property to the value specified in pProductID.
  // A copy is made of the data so the caller retains ownership of the
  // *pProductID aafUID_t and is responsible for de-allocating it.
  // 
  // NOTE! Stub only.   Implementation not yet added.
  //
  // Succeeds if all of the following are true:
  // - the pProductID pointer is valid.
  // 
  // If this method fails the Product ID property will not be
  // changed.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pProductID arg is NULL.)


AD_XMETHOD1(GetDate,
			[out],
			objPass,
			aafTimeStamp_t *,
			pTimestamp,
			The date-time stamp,
			Writes the Date-time Stamp property into the caller-allocated
  // aafTimeStamp_t specified by the pTimeStamp argument.  The
  // date-time stamp recorded in this object corresponds to the time
  // that this file was created or modified upon the occasion that
  // this object was added to the file.
  //
  // NOTE! Stub only.   Implementation not yet added.
  //
  // Note: This is a read-only property.
  // 
  // Succeeds if all of the following are true:
  // - the pTimeStamp pointer is valid.
  // 
  // If this method fails nothing will be written to *pTimeStamp.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pTimeStamp arg is NULL.)


AD_XMETHOD1(GetRefImplVersion,
			[out],
			objPass,
			aafProductVersion_t *,
			pVersion,
			The Reference Implementation Version,
			Obtains the version of the Reference Implementation which
  // created this identification object and writes it into the
  // caller-allocated aafProductVersion_t specified by the pVersion
  // argument.
  //
  // NOTE! Stub only.   Implementation not yet added.
  //
  // Note: This is a read-only property.
  // 
  // Succeeds if all of the following are true:
  // - the pVersion pointer is valid.
  // 
  // If this method fails nothing will be written to *pVersion.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pVersion arg is NULL.)


AD_STD_METHOD_STRING_GET_AND_SIZE(Platform,
     the Platform string property.
  //
  // This information is provided only to allow diagnostic printing of
  // platform information to be read by humans.  The format of the
  // strings is not guaranteed to remain the same for a given
  // platform.  Having said that\\\, the possible values currently
  // returned are:
  // - "Win32" for Intel/Win32 platforms
  // - "MacOS" for MacOS platforms
  // - "Unknown" for unknown platforms)


AD_XMETHOD1(GetGeneration,
			[out],
			objPass,
			aafUID_t *,
			pGeneration,
			The unique generation,
			Obtains the generation of this AAF file\, which was generated at
  // the time this identification object was created.  If a file was
  // opened for modification by many applications in its lifetime\,
  // then there will be multiple Identification objects.  This is
  // written into the caller-allocated aafUID_t specified by the
  // pGeneration argument.
  // 
  // NOTE! Stub only.   Implementation not yet added.
  //
  // Note: This is a read-only property.
  // 
  // Succeeds if all of the following are true:
  // - the pGeneration pointer is valid.
  // 
  // If this method fails nothing will be written to *pGeneration.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NOT_INITIALIZED
  //   - This object has not yet had Initialize\(\) called on it.
  //
  // AAFRESULT_NULL_PARAM
  //   - pGeneration arg is NULL.)
AD_XCLASS_END(Concrete, StoredObject)
