#c/*************************************************\
#c*													*
#c* Advanced Authoring Format						*
#c*													*
#c* Copyright (c) 1998-1999 Avid Technology, Inc.	*
#c*													*
#c\*************************************************/
#startm .this-module 0
AAFAIFCDescriptor\
#endm
#c
#startm .parent-module 0
AAFFileDescriptor\
#endm
#c
#c #import ./AAFFileDescriptor.exp
AD_HEAD
AD_IDL(//
// The IAAFAIFCDescriptor interface is implemented by objects which
// describe audio content data formatted according to the AIFC compressed
// Audio File Format.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)


AD_CLASS_UUID(e684d773, b935, 11d2, bf, 9d, 00, 10, 4b, c9, 15, 6d)

AD_DEFAULT_UUID(e684d774, b935, 11d2, bf, 9d, 00, 10, 4b, c9, 15, 6d)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_METHOD0(Initialize,
		   Initializes a newly allocated\, empty
  // IAAFAIFCDescriptor-supporting object.  This method must be
  // called after allocation\, and before any other method can be
  // called.
  //
  // Succeeds if:
  // - Initialize\(\) has not yet been called on this object.
  //
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_ALREADY_INITIALIZED
  //   - Initialize\(\) has already been called on this object.)


AD_XMETHOD2(GetSummary,
			[in],
				objPass,
				aafUInt32,
				size,
				Size of preallocated buffer,
			[out\, size_is\(size\)],
				objPass,
				aafDataValue_t,
				pSummary,
				Preallocated buffer to hold the AIFC file information,
			Gets a copy of the AIFC file information without the media.
  // 
  // Succeeds if all of the following are true:
  // - pSummary is a valid pointer.
  // - The size of the buffer is large enough to hold the AIFC file information.
  // 
  // If this method fails pSummary will not be changed.
  // 
  // This method will return the following codes:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.
  //
  // AAFRESULT_NULL_PARAM
  //   - pSummary arg is NULL.
  //
  // AAFRESULT_SMALLBUF
  //   - The buffer is too small to hold the AIFC file information.
  //)

AD_XMETHOD1(GetSummaryBufferSize,
			[out],
			objPass,
			aafUInt32 *,
			pSize,
			required buffer size,
			Returns the size of the buffer required for the GetSummary\(\)
  // method.  The value is placed into the location specified by pSize.
  //
  // Succeeds if all of the following are true:
  // - the pSize pointer is valid.
  //
  // If this method fails nothing will be written to *pSize.
  //
  // This method will return the following codes:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.
  //
  // AAFRESULT_NULL_PARAM
  //   - pSize arg is NULL.
  //)

AD_XMETHOD2(SetSummary,
			[in],
				objPass,
				aafUInt32,
				size,
				Size of preallocated buffer,
			[in\, size_is\(size\)],
				objPass,
				aafDataValue_t,
				pSummary,
				buffer containing value,
			Sets the AIFC file information.
  // 
  // Succeeds if all of the following are true:
  // - pSummary is a valid pointer
  // 
  // If this method fails the summary property will not be
  // changed.
  // 
  // This method will return the following codes:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.
  //
  // AAFRESULT_NULL_PARAM
  //   - pSummary arg is NULL.
  //)


AD_XCLASS_END(Concrete, StoredObject)
