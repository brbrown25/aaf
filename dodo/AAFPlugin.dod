#startm .this-module 0
AAFPlugin\
#endm
#c
#startm .parent-module 0
AAFRoot\
#endm
#c
#c #import ./AAFObject.exp
AD_HEAD

AD_FORWARD_DECLARATION(AAFEssenceStream)
AD_FORWARD_DECLARATION(AAFEssenceFormat)
AD_FORWARD_DECLARATION(AAFEssenceDescriptor)

AD_IDL(//
// The AAFPlugin interface describes the calls of a plugin.
//
// The AAFPluginManager keeps a copy of each plugin in a table\, along
// with cached copies of pertinant metadata about the plugin\, and
// instantiates a copy of the plugin.
//
//)
AD_CLASS_UUID(3631F7A3, 9121, 11d2, 80, 88, 00, 60, 08, 14, 3e, 6f)

AD_DEFAULT_UUID(3631F7A4, 9121, 11d2, 80, 88, 00, 60, 08, 14, 3e, 6f)
AD_XCLASS_BEGIN(Abstract, Transient)

AD_METHOD0(Start, Set up a codec.)
AD_METHOD0(Finish, Tear down a codec.)

AD_XMETHOD1(GetNumDefinitions,
			[out],
			objPass,
			aafInt32 *,
			pDefCount,
			The number of definitions associated with this plugin,

			This method returns the number of subclasses of AAFDefObject associated with this plugin.
	// This value will equal to the number of codecs\, operation groups\, classes\, types\, containers\, etc..
	// implemented by the current plugin.  This method will be called once at startup by the plugin manager.
  //
  // If this method fails nothing will be written to *pDefCount.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pDefCount arg is NULL.)

AD_XMETHOD2(GetIndexedDefinitionID,
			[in],
			objPass,
			aafInt32,
			index,
			An index from 0 to the number of definitions - 1,
			[out],
			objPass,
			aafUID_t *,
			pPluginID,
			The unique media object id,

			This method returns the unique ID of the AAFDefObject associated with this Plugin. 
 	// This range of indices will be from 0 to one less than the total number of codecs\,
	// operation groups\, classes\, types\, containers\, etc.. implemented by this plugin.
 //
  // Succeeds if all of the following are true:
  // - the pPluginID pointer is valid.
  // - Index is within range.
  // 
  // If this method fails nothing will be written to *pPluginID.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pPluginID arg is NULL.
  //
  // AAFRESULT_INDEX_RANGE
  //   - The index value is out of range)

AD_XMETHOD1(GetPluginDescriptorID,
			[out],
			objPass,
			aafUID_t *,
			pPluginID,
			The unique media object id,

			This method returns the unique ID of the AAFPluginDescriptor associated with this Plugin.
  //
  // Succeeds if all of the following are true:
  // - the pPluginID pointer is valid.
  // 
  // If this method fails nothing will be written to *pPluginID.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pPluginID arg is NULL.)

AD_XMETHOD3(GetIndexedDefinitionObject,
			[in],
			objPass,
			aafInt32,
			index,
			An index from 0 to the number of definitions - 1,
			[in],
			objIn,
			AAFDictionary,
			pDictionary,
			The dictionary to use when creating the definition,
			[out],
			objOut,
			AAFDefObject,
			pDefObject,
			The interface of the pluggable definition,

			This method manufactures a definition object of the correct
  // class for this plugin\, and fills in the values.  You must call QueryInterface
  // on the result in order to find the correct interface.
  //
  // Succeeds if all of the following are true:
  // - the pDefObject pointer is valid.
  // 
  // If this method fails nothing will be written to *pDefObject.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pDefObject arg is NULL.)

AD_XMETHOD2(CreateDescriptor,
			[in],
			objIn,
			AAFDictionary,
			pDictionary,
			The dictionary to use when creating the descriptor,
			[out],
			objOut,
			AAFPluginDescriptor,
			pPluginDesc,
			The interface of the pluggable definition,

			This method manufactures a plugin descriptor of the correct
  // class for this plugin\, and fills in the values.  You must call QueryInterface
  // on the result in order to find the corret interface.
  //
  // Succeeds if all of the following are true:
  // - the pPluginDesc pointer is valid.
  // 
  // If this method fails nothing will be written to *pPluginDesc.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - pPluginDesc arg is NULL.)

AD_XCLASS_END(Abstract, Transient)
