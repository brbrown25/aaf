#c/*************************************************\
#c*													*
#c* Advanced Authoring Format						*
#c*													*
#c* Copyright (c) 1998-1999 Avid Technology, Inc.	*
#c*													*
#c\*************************************************/
#startm .this-module 0
EnumAAFParameters\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(//
// This interface is used to enumerate over the AAFParameters referenced
// from in an AAFOperationDefinition or AAFParameter\, and contained within
// the AAFDictionary.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)
AD_FORWARD_DECLARATION(AAFParameter)
AD_CLASS_UUID(7227261D, A8C9, 11D3, A3, ED, 00, 04, AC, 96, A9, 37)

AD_DEFAULT_UUID(7227261E, A8C9, 11D3, A3, ED, 00, 04, AC, 96, A9, 37)
AD_XCLASS_BEGIN(Concrete, Transient)
AD_XMETHOD1(NextOne,
			[out\,retval],
			objOut,
			AAFParameter,
			ppParameter,
			The Next Parameter,
			Enumerates to the next element in the enumerators list. The
  // caller is responsible for properly releasing the returned pointer
  // when it is no longer needed.
  // 
  // Succeeds if all of the following are true:
  // - the ppParameter pointer is valid.
  // - there are Parameter objects remaining to be returned.
  // 
  // If this method fails nothing is written to *ppParameter.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppParameter is null.
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - no Parameters remaining to be returned.)

AD_X2METHOD3(Next,
			[in], objPass, aafUInt32, count, number of parameter objects requested,xxx,
			[out\, size_is\(count\)\, length_is\(*pFetched\)],
			objOutArray, AAFParameter, ppParameters,
			array to receive parameter objects,count,
			[out\,ref], objPass, aafUInt32 *, pFetched,
			number of actual Parameters fetched into ppParameters array,xxx,
			Enumerates the next count elements \(AAFParameter pointers\) in the
  // enumerator's list\, returning them in the given array along with
  // the actual number of enumerated elements in pNumFetched. The caller
  // is responsible for properly releasing the returned pointers.
  // 
  // Succeeds if all of the following are true:
  // - The ppParameters pointer is valid.
  // - The pNumFetched pointer is valid. If count is 1\, pNumFetched can be NULL.
  // - There are AAFParameter objects remaining to be returned.
  // 
  // If this method fails nothing is written to *ppComponents or
  // pNumFetched.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - either ppParameters or pNumFetched is null.)


AD_METHOD1(Skip,
		   [in], aafUInt32, count, Number of elements to skip,
			Instructs the enumerator to skip the next count elements in the
  // enumeration so that the next call to Next will not
  // return those elements.
  // 
  // Succeeds if all of the following are true:
  // - count is less than or equal to the number of remaining objects.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\\\, it will return the first one
  // encountered in the order given below:
  //
  // AAFRESULT_SUCCESS
  //   - succeeded.
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - count exceeded number of remaining objects.)


AD_METHOD0(Reset,
		   Instructs the enumerator to position itself at the beginning of
  // the list of elements.
  // 
  // Always succeeds.
  // 
  // This method will return the following code:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\))
  // @comm There is no guarantee that the same set of elements will be enumerated on 
  // each pass through the list\, nor will the elements necessarily be enumerated in 
  // the same order. The exact behavior depends on the collection being enumerated.)

AD_XMETHOD1(Clone,
			[out\,retval], objOut, EnumAAFParameters, ppEnum, new enumeration,
			Creates another EnumAAFParameters enumerator with the same state as the current
  // enumerator to iterate over the same list. This method makes it
  // possible to record a point in the enumeration sequence in order
  // to return to that point at a later time.
  //
  // Note: The caller must release this new enumerator separately from
  // the first enumerator.
  // 
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEnum is null.)
AD_XCLASS_END(Concrete, Transient)
