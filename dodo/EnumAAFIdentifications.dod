#c/*************************************************\
#c*													*
#c* Advanced Authoring Format						*
#c*													*
#c* Copyright (c) 1998-1999 Avid Technology, Inc.	*
#c*													*
#c\*************************************************/
#startm .this-module 0
EnumAAFIdentifications\
#endm
#startm .parent-module 0
AAFRoot\
#endm
#c
AD_HEAD
AD_IDL(//
// This interfaces allows access to individual
// IAAFIdentification-supporting objects within a collection.
//
// In addition to the specific error results listed for each method\,
// all methods in this interface may also return one of the following
// values:
// 
// AAFRESULT_NOMEMORY
//   - insufficient system memory is available to perform the
//     operation.
//)
AD_FORWARD_DECLARATION(AAFIdentification)
AD_CLASS_UUID(B1A21385, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)

AD_DEFAULT_UUID(B1A21384, 1A7D, 11D2, BF, 78, 00, 10, 4B, C9, 15, 6D)
AD_XCLASS_BEGIN(Concrete, Transient)
AD_XMETHOD1(NextOne,
			[out\, retval],
			objOut,
			AAFIdentification,
			ppIdentification,
			The Next Identification,
			Enumerates to the next element in the enumerators list. The
  // caller is responsible for properly releasing the returned pointer
  // when it is no longer needed. 
  // 
  // Succeeds if all of the following are true:
  // - the ppIdentification pointer is valid.
  // - there are Identification objects remaining to be returned.
  // 
  // If this method fails nothing is written to *ppIdentification.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppIdentification is null.
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - no Identifications remaining to be returned.)


AD_X2METHOD3(Next,
			[in],
			  objPass,
			  aafUInt32,
			  count,
			  number of identifications requested,
			  xxx,
			[out\, size_is\(count\)\, length_is\(*pNumFetched\)],
			  objOutArray,
			  AAFIdentification,
			  ppIdentifications,
			  array to receive identification objects,
			  count,
			[out],
			  objPass,
			  aafUInt32 *,
			  pNumFetched,
			  number of actual Identifications fetched into ppIdentifications array,
			  xxx,
  // Enumerates the next count elements \(AAFIdentification pointers\)
  // in the enumerator's list\, returning them in the given array
  // along with the actual number of enumerated elements in
  // pNumFetched. The caller is responsible for properly releasing the
  // returned pointers when thery are no longer needed.
  // 
  // Succeeds if all of the following are true:
  // - the ppIdentifications pointer is valid.
  // - the pNumFetched pointer is valid.
  // - there are Identification objects remaining to be returned.
  // 
  // If this method fails nothing is written to *ppIdentifications or
  // pNumFetched.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - either ppIdentification or pNumFetched is null.)


AD_XMETHOD1(Skip,
			[in],
			objPass,
			aafUInt32,
			count,
			Number of elements to skip,
  // Instructs the enumerator to skip the next count elements in the
  // enumeration so that the next call to EnumAAFIdentifications::Next
  // will not return those elements.
  // 
  // Succeeds if all of the following are true:
  // - count is less than or equal to the number of remaining objects.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NO_MORE_OBJECTS
  //   - count exceeded number of remaining objects.)


AD_METHOD0(Reset,
		   Instructs the enumerator to position itself at the beginning of
  // the list of elements.
  // 
  // Always succeeds.
  // 
  // This method will return the following code:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\))


AD_XMETHOD1(Clone,
			[out\, retval],
			objOut,
			EnumAAFIdentifications,
			ppEnum,
			new enumeration,
  // Creates another identification enumerator with the same state as
  // the current enumerator to iterate over the same list. This method
  // makes it possible to record a point in the enumeration sequence
  // in order to return to that point at a later time.
  //
  // Note: The caller must release this new enumerator separately from
  // the first enumerator.
  // 
  // Succeeds if all of the following are true:
  // - the ppEnum pointer is valid.
  // 
  // This method will return the following codes.  If more than one of
  // the listed errors is in effect\, it will return the first one
  // encountered in the order given below:
  // 
  // AAFRESULT_SUCCESS
  //   - succeeded.  \(This is the only code indicating success.\)
  //
  // AAFRESULT_NULL_PARAM
  //   - ppEnum is null.)
AD_XCLASS_END(Concrete, Transient)
