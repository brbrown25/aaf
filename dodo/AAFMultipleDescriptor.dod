#c *********************************************************************
#c
#c $Id: AAFMultipleDescriptor.dod,v 1.3 2006/07/14 22:57:46 heydowns Exp $ $Name:  $
#c
#c The contents of this file are subject to the AAF SDK Public
#c Source License Agreement (the "License"); You may not use this file
#c except in compliance with the License.  The License is available in
#c AAFSDKPSL.TXT, or you may obtain a copy of the License from the AAF
#c Association or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.
#c
#c The Original Code of this file is Copyright 1998-2005, Licensor of the
#c AAF Association.
#c
#c The Initial Developer of the Original Code of this file and the
#c Licensor of the AAF Association is Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFMultipleDescriptor\
#endm
#c
#startm .parent-module 0
AAFFileDescriptor\
#endm
#c
#c #import ./AAFObject.exp
AD_HEAD
AD_IDL(///
/// The IAAFMultipleDescriptor interface is implemented by objects which
/// describe the format of the content data associated with a File
/// Source mob containing multiple tracks of essence.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///
/// AAFRESULT_NOT_INITIALIZED
///   - This object has not yet had Initialize\(\) called on it through
///     this object's primary interface.
///)
AD_FORWARD_DECLARATION(AAFFileDescriptor)
AD_FORWARD_DECLARATION(EnumAAFFileDescriptors)

AD_CLASS_UUID(33b9d30f, 9e63, 4e87, b5, 33, e3, f3, b1, b4, 89, f4)

AD_DEFAULT_UUID(dabf53cf, 1ec3, 43a2, 94, 18, f2, 2f, b8, 7c, 38, f4)

AD_XCLASS_BEGIN(Concrete, StoredObject)

AD_METHOD0(Initialize,
		   Initializes a newly allocated\, empty
  /// IAAFMultipleDescriptor-supporting object.  This method must be
  /// called after allocation\, and before any other method can be
  /// called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_ALREADY_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.)

AD_XMETHOD1(CountFileDescriptors,
			[out],
			  objPass,
			  aafUInt32 *,
			  pResult,
			  Returns the number of FileDescriptors,
			Return the number of FileDescriptors attached to this essence
  /// descriptor.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pCount pointer is valid.
  /// 
  /// If this method fails nothing is written to *pCount.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pCount is null.)


AD_XMETHOD1(AppendFileDescriptor,
			[in],
			  objIn,
			  AAFFileDescriptor,
			  pFileDescriptor,
			  FileDescriptor to append,
			Append another FileDescriptor to this essence descriptor.  Use this
  /// function to add a FileDescriptor to the end of the interleave pattern.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pFileDescriptor pointer is valid.
  /// - the pFileDescriptor pointer indicates an object which is not already
  ///   owned by any object
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pFileDescriptor is null.
  ///
  /// AAFRESULT_OBJECT_ALREADY_ATTACHED
  ///   - the object pointed to by pFileDescriptor is already owned by this
  ///     or another object.)


AD_XMETHOD1(PrependFileDescriptor,
			[in],
			  objIn,
			  AAFFileDescriptor,
			  pFileDescriptor,
			  FileDescriptor to append,
			Prepend another FileDescriptor to this essence descriptor.  Use this
  /// function to add a FileDescriptor to to the beginning of the interleave pattern.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pFileDescriptor pointer is valid.
  /// - the pFileDescriptor pointer indicates an object which is not already
  ///   owned by any object
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pFileDescriptor is null.
  ///
  /// AAFRESULT_OBJECT_ALREADY_ATTACHED
  ///   - the object pointed to by pFileDescriptor is already owned by this
  ///     or another object.)


AD_XMETHOD2(InsertFileDescriptorAt,
			[in],
			  objPass,
			  aafUInt32,
			  index,
			  index at which FileDescriptor is to be inserted,
			[in],
			  objIn,
			  AAFFileDescriptor,
			  pFileDescriptor,
			  FileDescriptor to append,
			Inserts the given FileDescriptor at the given index.  FileDescriptors already
  /// existing at the given and higher indices will be moved to the
  /// next higher index to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pFileDescriptor pointer is valid.
  /// - index is less than or equal to the value returned by
  ///   CountFileDescriptors\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pFileDescriptor is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than the value returned by
  ///     CountFileDescriptors\(\).)


AD_XMETHOD2(GetFileDescriptorAt,
			[in],
			  objPass,
			  aafUInt32,
			  index,
			  index of FileDescriptor to retrieve,
			[out\, retval],
			  objOut,
			  AAFFileDescriptor,
			  ppFileDescriptor,
			  returned FileDescriptor,
			Retrieves the FileDescriptor at the given index.
  /// 
  /// Succeeds if all of the following are true:
  /// - the pFileDescriptor pointer is valid.
  /// - index is less than the value returned by CountFileDescriptors\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pFileDescriptor is null.
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountFileDescriptors\(\).)


AD_XMETHOD1(RemoveFileDescriptorAt,
			[in],
			  objPass,
			  aafUInt32,
			  index,
			  index of FileDescriptor to remove,
			Removes the FileDescriptor at the given index.  FileDescriptors already
  /// existing at indices higher than the given index will be moved to
  /// the next lower index to accommodate.
  /// 
  /// Succeeds if all of the following are true:
  /// - index is less than the value returned by CountFileDescriptors\(\).
  /// 
  /// If this method fails no state will be changed.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_BADINDEX
  ///   - index is greater than or equal to the value returned by
  ///     CountFileDescriptors\(\).)


AD_XMETHOD1(GetFileDescriptors,
			[out],
			objOut,
			EnumAAFFileDescriptors,
			ppEnum,
			An enumerator of the FileDescriptors in this MultipleDescriptor,

			Returns an enumerator of all the FileDescriptors in 
  /// this MultipleDescriptor.
  /// 
  /// Succeeds if all of the following are true:
  /// - the ppEnum pointer is valid.
  /// 
  /// If this method fails nothing will be written to *ppEnum.
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppEnum is null.)

AD_XCLASS_END(Concrete, StoredObject)
