#c *********************************************************************
#c
#c $Id: AAFTypeDefRename.dod,v 1.14 2005/06/08 15:37:06 montrowe Exp $ $Name:  $
#c
#c The contents of this file are subject to the AAF SDK Public
#c Source License Agreement (the "License"); You may not use this file
#c except in compliance with the License.  The License is available in
#c AAFSDKPSL.TXT, or you may obtain a copy of the License from the AAF
#c Association or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.
#c
#c The Original Code of this file is Copyright 1998-2005, Licensor of the
#c AAF Association.
#c
#c The Initial Developer of the Original Code of this file and the
#c Licensor of the AAF Association is Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFTypeDefRename\
#endm
#c
#startm .parent-module 0
AAFTypeDef\
#endm
#c
#import ./AAFTypeDef.exp
AD_HEAD
AD_IDL(///
/// This interface is used to define Renamed types \(analogous to C
/// typedefs\) used in AAF persistent objects.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///)
AD_FORWARD_DECLARATION(AAFPropertyValue)
AD_CLASS_UUID(307e9e69, dcb2, 11d2, 84, 29, 00, 60, 08, 32, ac, b8)

AD_DEFAULT_UUID(307e9e6a, dcb2, 11d2, 84, 29, 00, 60, 08, 32, ac, b8)
AD_XCLASS_BEGIN(Concrete, StoredObject)
AD_XMETHOD3(Initialize,
			[in\, ref],
			objPass,
			aafUID_constref,
			id,
			auid to be used to identify this type,
			[in],
			objIn,
			AAFTypeDef,
			pBaseType,
			type to which this is an alias,
			[in\, string],
			objPass,
			aafCharacter_constptr,
			pTypeName,
			friendly name of this type definition,
			Initializes this type def to be an alias for the given type
  /// \(similar to a C typedef\).
  /// 
  /// This method must be called after allocation\, and before
  /// any other method can be called.
  ///
  /// Succeeds if:
  /// - Initialize\(\) has not yet been called on this object.
  /// - pBaseType is a valid pointer.
  /// - pTypeName is a valid pointer.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  /// 
  /// AAFRESULT_NULL_PARAM
  ///   - pBaseType or pTypeName is null.
  ///
  /// AAFRESULT_ALREADY_INITIALIZED
  ///   - Initialize\(\) has already been called on this object.)


AD_XMETHOD1(GetBaseType,
			[out],
			objOut,
			AAFTypeDef,
			ppBaseType,
			type definition for which this is an alias,
			Returns the type definition to which this type def is an alias.
  ///
  /// Succeeds if:
  /// - this object has been Initialize\(\)d.
  /// - The ppBaseType pointer is valid.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppBaseType pointer is NULL.)


AD_XMETHOD2(GetBaseValue,
			[in],
			objIn,
			AAFPropertyValue,
			pInPropVal,
			property value from which value is to be read,
			[out],
			objOut,
			AAFPropertyValue,
			ppOutPropVal,
			pointer to property value represented by base type,
			Gets the property value of the base type from the given property
  /// value of the typedef type and places a pointer to the base type's
  /// property value into *ppOutPropVal.
  ///
  /// Succeeds if:
  /// - The pInPropVal pointer is valid.
  /// - The ppOutPropVal pointer is valid.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pInPropVal or ppOutPropVal is NULL.)

AD_XMETHOD2(CreateValue,
			[in],
			objIn,
			AAFPropertyValue,
			pInPropVal,
			property value from which value is to be read,
			[out],
			objOut,
			AAFPropertyValue,
			ppOutPropVal,
			pointer to property value represented by rename type,
			Gets the property value of the typedef type from the given property
  /// value of the base type and places a pointer to the base type's
  /// property value into *ppOutPropVal.
  ///
  /// Succeeds if:
  /// - The pInPropVal pointer is valid.
  /// - The ppOutPropVal pointer is valid.
  ///
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NOT_INITIALIZED
  ///   - This object has not yet had Initialize\(\) called on it.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - pInPropVal or ppOutPropVal is NULL.)

AD_OVERRIDE(.method-GetTypeCategory)
AD_XCLASS_END(Concrete, StoredObject)
